{
  "version": 3,
  "sources": ["../../../../../../node_modules/@google/genai/dist/web/index.mjs"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nlet _defaultBaseGeminiUrl = undefined;\nlet _defaultBaseVertexUrl = undefined;\n/**\n * Overrides the base URLs for the Gemini API and Vertex AI API.\n *\n * @remarks This function should be called before initializing the SDK. If the\n * base URLs are set after initializing the SDK, the base URLs will not be\n * updated. Base URLs provided in the HttpOptions will also take precedence over\n * URLs set here.\n *\n * @example\n * ```ts\n * import {GoogleGenAI, setDefaultBaseUrls} from '@google/genai';\n * // Override the base URL for the Gemini API.\n * setDefaultBaseUrls({geminiUrl:'https://gemini.google.com'});\n *\n * // Override the base URL for the Vertex AI API.\n * setDefaultBaseUrls({vertexUrl: 'https://vertexai.googleapis.com'});\n *\n * const ai = new GoogleGenAI({apiKey: 'GEMINI_API_KEY'});\n * ```\n */\nfunction setDefaultBaseUrls(baseUrlParams) {\n    _defaultBaseGeminiUrl = baseUrlParams.geminiUrl;\n    _defaultBaseVertexUrl = baseUrlParams.vertexUrl;\n}\n/**\n * Returns the default base URLs for the Gemini API and Vertex AI API.\n */\nfunction getDefaultBaseUrls() {\n    return {\n        geminiUrl: _defaultBaseGeminiUrl,\n        vertexUrl: _defaultBaseVertexUrl,\n    };\n}\n/**\n * Returns the default base URL based on the following priority:\n *   1. Base URLs set via HttpOptions.\n *   2. Base URLs set via the latest call to setDefaultBaseUrls.\n *   3. Base URLs set via environment variables.\n */\nfunction getBaseUrl(httpOptions, vertexai, vertexBaseUrlFromEnv, geminiBaseUrlFromEnv) {\n    var _a, _b;\n    if (!(httpOptions === null || httpOptions === void 0 ? void 0 : httpOptions.baseUrl)) {\n        const defaultBaseUrls = getDefaultBaseUrls();\n        if (vertexai) {\n            return (_a = defaultBaseUrls.vertexUrl) !== null && _a !== void 0 ? _a : vertexBaseUrlFromEnv;\n        }\n        else {\n            return (_b = defaultBaseUrls.geminiUrl) !== null && _b !== void 0 ? _b : geminiBaseUrlFromEnv;\n        }\n    }\n    return httpOptions.baseUrl;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass BaseModule {\n}\nfunction formatMap(templateString, valueMap) {\n    // Use a regular expression to find all placeholders in the template string\n    const regex = /\\{([^}]+)\\}/g;\n    // Replace each placeholder with its corresponding value from the valueMap\n    return templateString.replace(regex, (match, key) => {\n        if (Object.prototype.hasOwnProperty.call(valueMap, key)) {\n            const value = valueMap[key];\n            // Convert the value to a string if it's not a string already\n            return value !== undefined && value !== null ? String(value) : '';\n        }\n        else {\n            // Handle missing keys\n            throw new Error(`Key '${key}' not found in valueMap.`);\n        }\n    });\n}\nfunction setValueByPath(data, keys, value) {\n    for (let i = 0; i < keys.length - 1; i++) {\n        const key = keys[i];\n        if (key.endsWith('[]')) {\n            const keyName = key.slice(0, -2);\n            if (!(keyName in data)) {\n                if (Array.isArray(value)) {\n                    data[keyName] = Array.from({ length: value.length }, () => ({}));\n                }\n                else {\n                    throw new Error(`Value must be a list given an array path ${key}`);\n                }\n            }\n            if (Array.isArray(data[keyName])) {\n                const arrayData = data[keyName];\n                if (Array.isArray(value)) {\n                    for (let j = 0; j < arrayData.length; j++) {\n                        const entry = arrayData[j];\n                        setValueByPath(entry, keys.slice(i + 1), value[j]);\n                    }\n                }\n                else {\n                    for (const d of arrayData) {\n                        setValueByPath(d, keys.slice(i + 1), value);\n                    }\n                }\n            }\n            return;\n        }\n        else if (key.endsWith('[0]')) {\n            const keyName = key.slice(0, -3);\n            if (!(keyName in data)) {\n                data[keyName] = [{}];\n            }\n            const arrayData = data[keyName];\n            setValueByPath(arrayData[0], keys.slice(i + 1), value);\n            return;\n        }\n        if (!data[key] || typeof data[key] !== 'object') {\n            data[key] = {};\n        }\n        data = data[key];\n    }\n    const keyToSet = keys[keys.length - 1];\n    const existingData = data[keyToSet];\n    if (existingData !== undefined) {\n        if (!value ||\n            (typeof value === 'object' && Object.keys(value).length === 0)) {\n            return;\n        }\n        if (value === existingData) {\n            return;\n        }\n        if (typeof existingData === 'object' &&\n            typeof value === 'object' &&\n            existingData !== null &&\n            value !== null) {\n            Object.assign(existingData, value);\n        }\n        else {\n            throw new Error(`Cannot set value for an existing key. Key: ${keyToSet}`);\n        }\n    }\n    else {\n        if (keyToSet === '_self' &&\n            typeof value === 'object' &&\n            value !== null &&\n            !Array.isArray(value)) {\n            const valueAsRecord = value;\n            Object.assign(data, valueAsRecord);\n        }\n        else {\n            data[keyToSet] = value;\n        }\n    }\n}\nfunction getValueByPath(data, keys, defaultValue = undefined) {\n    try {\n        if (keys.length === 1 && keys[0] === '_self') {\n            return data;\n        }\n        for (let i = 0; i < keys.length; i++) {\n            if (typeof data !== 'object' || data === null) {\n                return defaultValue;\n            }\n            const key = keys[i];\n            if (key.endsWith('[]')) {\n                const keyName = key.slice(0, -2);\n                if (keyName in data) {\n                    const arrayData = data[keyName];\n                    if (!Array.isArray(arrayData)) {\n                        return defaultValue;\n                    }\n                    return arrayData.map((d) => getValueByPath(d, keys.slice(i + 1), defaultValue));\n                }\n                else {\n                    return defaultValue;\n                }\n            }\n            else {\n                data = data[key];\n            }\n        }\n        return data;\n    }\n    catch (error) {\n        if (error instanceof TypeError) {\n            return defaultValue;\n        }\n        throw error;\n    }\n}\n/**\n * Moves values from source paths to destination paths.\n *\n * Examples:\n *   moveValueByPath(\n *     {'requests': [{'content': v1}, {'content': v2}]},\n *     {'requests[].*': 'requests[].request.*'}\n *   )\n *     -> {'requests': [{'request': {'content': v1}}, {'request': {'content': v2}}]}\n */\nfunction moveValueByPath(data, paths) {\n    for (const [sourcePath, destPath] of Object.entries(paths)) {\n        const sourceKeys = sourcePath.split('.');\n        const destKeys = destPath.split('.');\n        // Determine keys to exclude from wildcard to avoid cyclic references\n        const excludeKeys = new Set();\n        let wildcardIdx = -1;\n        for (let i = 0; i < sourceKeys.length; i++) {\n            if (sourceKeys[i] === '*') {\n                wildcardIdx = i;\n                break;\n            }\n        }\n        if (wildcardIdx !== -1 && destKeys.length > wildcardIdx) {\n            // Extract the intermediate key between source and dest paths\n            // Example: source=['requests[]', '*'], dest=['requests[]', 'request', '*']\n            // We want to exclude 'request'\n            for (let i = wildcardIdx; i < destKeys.length; i++) {\n                const key = destKeys[i];\n                if (key !== '*' && !key.endsWith('[]') && !key.endsWith('[0]')) {\n                    excludeKeys.add(key);\n                }\n            }\n        }\n        _moveValueRecursive(data, sourceKeys, destKeys, 0, excludeKeys);\n    }\n}\n/**\n * Recursively moves values from source path to destination path.\n */\nfunction _moveValueRecursive(data, sourceKeys, destKeys, keyIdx, excludeKeys) {\n    if (keyIdx >= sourceKeys.length) {\n        return;\n    }\n    if (typeof data !== 'object' || data === null) {\n        return;\n    }\n    const key = sourceKeys[keyIdx];\n    if (key.endsWith('[]')) {\n        const keyName = key.slice(0, -2);\n        const dataRecord = data;\n        if (keyName in dataRecord && Array.isArray(dataRecord[keyName])) {\n            for (const item of dataRecord[keyName]) {\n                _moveValueRecursive(item, sourceKeys, destKeys, keyIdx + 1, excludeKeys);\n            }\n        }\n    }\n    else if (key === '*') {\n        // wildcard - move all fields\n        if (typeof data === 'object' && data !== null && !Array.isArray(data)) {\n            const dataRecord = data;\n            const keysToMove = Object.keys(dataRecord).filter((k) => !k.startsWith('_') && !excludeKeys.has(k));\n            const valuesToMove = {};\n            for (const k of keysToMove) {\n                valuesToMove[k] = dataRecord[k];\n            }\n            // Set values at destination\n            for (const [k, v] of Object.entries(valuesToMove)) {\n                const newDestKeys = [];\n                for (const dk of destKeys.slice(keyIdx)) {\n                    if (dk === '*') {\n                        newDestKeys.push(k);\n                    }\n                    else {\n                        newDestKeys.push(dk);\n                    }\n                }\n                setValueByPath(dataRecord, newDestKeys, v);\n            }\n            for (const k of keysToMove) {\n                delete dataRecord[k];\n            }\n        }\n    }\n    else {\n        // Navigate to next level\n        const dataRecord = data;\n        if (key in dataRecord) {\n            _moveValueRecursive(dataRecord[key], sourceKeys, destKeys, keyIdx + 1, excludeKeys);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction tBytes$1(fromBytes) {\n    if (typeof fromBytes !== 'string') {\n        throw new Error('fromImageBytes must be a string');\n    }\n    // TODO(b/389133914): Remove dummy bytes converter.\n    return fromBytes;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\nfunction fetchPredictOperationParametersToVertex(fromObject) {\n    const toObject = {};\n    const fromOperationName = getValueByPath(fromObject, [\n        'operationName',\n    ]);\n    if (fromOperationName != null) {\n        setValueByPath(toObject, ['operationName'], fromOperationName);\n    }\n    const fromResourceName = getValueByPath(fromObject, ['resourceName']);\n    if (fromResourceName != null) {\n        setValueByPath(toObject, ['_url', 'resourceName'], fromResourceName);\n    }\n    return toObject;\n}\nfunction generateVideosOperationFromMldev$1(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromMetadata = getValueByPath(fromObject, ['metadata']);\n    if (fromMetadata != null) {\n        setValueByPath(toObject, ['metadata'], fromMetadata);\n    }\n    const fromDone = getValueByPath(fromObject, ['done']);\n    if (fromDone != null) {\n        setValueByPath(toObject, ['done'], fromDone);\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    const fromResponse = getValueByPath(fromObject, [\n        'response',\n        'generateVideoResponse',\n    ]);\n    if (fromResponse != null) {\n        setValueByPath(toObject, ['response'], generateVideosResponseFromMldev$1(fromResponse));\n    }\n    return toObject;\n}\nfunction generateVideosOperationFromVertex$1(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromMetadata = getValueByPath(fromObject, ['metadata']);\n    if (fromMetadata != null) {\n        setValueByPath(toObject, ['metadata'], fromMetadata);\n    }\n    const fromDone = getValueByPath(fromObject, ['done']);\n    if (fromDone != null) {\n        setValueByPath(toObject, ['done'], fromDone);\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    const fromResponse = getValueByPath(fromObject, ['response']);\n    if (fromResponse != null) {\n        setValueByPath(toObject, ['response'], generateVideosResponseFromVertex$1(fromResponse));\n    }\n    return toObject;\n}\nfunction generateVideosResponseFromMldev$1(fromObject) {\n    const toObject = {};\n    const fromGeneratedVideos = getValueByPath(fromObject, [\n        'generatedSamples',\n    ]);\n    if (fromGeneratedVideos != null) {\n        let transformedList = fromGeneratedVideos;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedVideoFromMldev$1(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedVideos'], transformedList);\n    }\n    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [\n        'raiMediaFilteredCount',\n    ]);\n    if (fromRaiMediaFilteredCount != null) {\n        setValueByPath(toObject, ['raiMediaFilteredCount'], fromRaiMediaFilteredCount);\n    }\n    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [\n        'raiMediaFilteredReasons',\n    ]);\n    if (fromRaiMediaFilteredReasons != null) {\n        setValueByPath(toObject, ['raiMediaFilteredReasons'], fromRaiMediaFilteredReasons);\n    }\n    return toObject;\n}\nfunction generateVideosResponseFromVertex$1(fromObject) {\n    const toObject = {};\n    const fromGeneratedVideos = getValueByPath(fromObject, ['videos']);\n    if (fromGeneratedVideos != null) {\n        let transformedList = fromGeneratedVideos;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedVideoFromVertex$1(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedVideos'], transformedList);\n    }\n    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [\n        'raiMediaFilteredCount',\n    ]);\n    if (fromRaiMediaFilteredCount != null) {\n        setValueByPath(toObject, ['raiMediaFilteredCount'], fromRaiMediaFilteredCount);\n    }\n    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [\n        'raiMediaFilteredReasons',\n    ]);\n    if (fromRaiMediaFilteredReasons != null) {\n        setValueByPath(toObject, ['raiMediaFilteredReasons'], fromRaiMediaFilteredReasons);\n    }\n    return toObject;\n}\nfunction generatedVideoFromMldev$1(fromObject) {\n    const toObject = {};\n    const fromVideo = getValueByPath(fromObject, ['video']);\n    if (fromVideo != null) {\n        setValueByPath(toObject, ['video'], videoFromMldev$1(fromVideo));\n    }\n    return toObject;\n}\nfunction generatedVideoFromVertex$1(fromObject) {\n    const toObject = {};\n    const fromVideo = getValueByPath(fromObject, ['_self']);\n    if (fromVideo != null) {\n        setValueByPath(toObject, ['video'], videoFromVertex$1(fromVideo));\n    }\n    return toObject;\n}\nfunction getOperationParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromOperationName = getValueByPath(fromObject, [\n        'operationName',\n    ]);\n    if (fromOperationName != null) {\n        setValueByPath(toObject, ['_url', 'operationName'], fromOperationName);\n    }\n    return toObject;\n}\nfunction getOperationParametersToVertex(fromObject) {\n    const toObject = {};\n    const fromOperationName = getValueByPath(fromObject, [\n        'operationName',\n    ]);\n    if (fromOperationName != null) {\n        setValueByPath(toObject, ['_url', 'operationName'], fromOperationName);\n    }\n    return toObject;\n}\nfunction videoFromMldev$1(fromObject) {\n    const toObject = {};\n    const fromUri = getValueByPath(fromObject, ['uri']);\n    if (fromUri != null) {\n        setValueByPath(toObject, ['uri'], fromUri);\n    }\n    const fromVideoBytes = getValueByPath(fromObject, ['encodedVideo']);\n    if (fromVideoBytes != null) {\n        setValueByPath(toObject, ['videoBytes'], tBytes$1(fromVideoBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['encoding']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction videoFromVertex$1(fromObject) {\n    const toObject = {};\n    const fromUri = getValueByPath(fromObject, ['gcsUri']);\n    if (fromUri != null) {\n        setValueByPath(toObject, ['uri'], fromUri);\n    }\n    const fromVideoBytes = getValueByPath(fromObject, [\n        'bytesBase64Encoded',\n    ]);\n    if (fromVideoBytes != null) {\n        setValueByPath(toObject, ['videoBytes'], tBytes$1(fromVideoBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/** Required. Outcome of the code execution. */\nvar Outcome;\n(function (Outcome) {\n    /**\n     * Unspecified status. This value should not be used.\n     */\n    Outcome[\"OUTCOME_UNSPECIFIED\"] = \"OUTCOME_UNSPECIFIED\";\n    /**\n     * Code execution completed successfully.\n     */\n    Outcome[\"OUTCOME_OK\"] = \"OUTCOME_OK\";\n    /**\n     * Code execution finished but with a failure. `stderr` should contain the reason.\n     */\n    Outcome[\"OUTCOME_FAILED\"] = \"OUTCOME_FAILED\";\n    /**\n     * Code execution ran for too long, and was cancelled. There may or may not be a partial output present.\n     */\n    Outcome[\"OUTCOME_DEADLINE_EXCEEDED\"] = \"OUTCOME_DEADLINE_EXCEEDED\";\n})(Outcome || (Outcome = {}));\n/** Required. Programming language of the `code`. */\nvar Language;\n(function (Language) {\n    /**\n     * Unspecified language. This value should not be used.\n     */\n    Language[\"LANGUAGE_UNSPECIFIED\"] = \"LANGUAGE_UNSPECIFIED\";\n    /**\n     * Python >= 3.10, with numpy and simpy available.\n     */\n    Language[\"PYTHON\"] = \"PYTHON\";\n})(Language || (Language = {}));\n/** Specifies how the response should be scheduled in the conversation. */\nvar FunctionResponseScheduling;\n(function (FunctionResponseScheduling) {\n    /**\n     * This value is unused.\n     */\n    FunctionResponseScheduling[\"SCHEDULING_UNSPECIFIED\"] = \"SCHEDULING_UNSPECIFIED\";\n    /**\n     * Only add the result to the conversation context, do not interrupt or trigger generation.\n     */\n    FunctionResponseScheduling[\"SILENT\"] = \"SILENT\";\n    /**\n     * Add the result to the conversation context, and prompt to generate output without interrupting ongoing generation.\n     */\n    FunctionResponseScheduling[\"WHEN_IDLE\"] = \"WHEN_IDLE\";\n    /**\n     * Add the result to the conversation context, interrupt ongoing generation and prompt to generate output.\n     */\n    FunctionResponseScheduling[\"INTERRUPT\"] = \"INTERRUPT\";\n})(FunctionResponseScheduling || (FunctionResponseScheduling = {}));\n/** Optional. The type of the data. */\nvar Type;\n(function (Type) {\n    /**\n     * Not specified, should not be used.\n     */\n    Type[\"TYPE_UNSPECIFIED\"] = \"TYPE_UNSPECIFIED\";\n    /**\n     * OpenAPI string type\n     */\n    Type[\"STRING\"] = \"STRING\";\n    /**\n     * OpenAPI number type\n     */\n    Type[\"NUMBER\"] = \"NUMBER\";\n    /**\n     * OpenAPI integer type\n     */\n    Type[\"INTEGER\"] = \"INTEGER\";\n    /**\n     * OpenAPI boolean type\n     */\n    Type[\"BOOLEAN\"] = \"BOOLEAN\";\n    /**\n     * OpenAPI array type\n     */\n    Type[\"ARRAY\"] = \"ARRAY\";\n    /**\n     * OpenAPI object type\n     */\n    Type[\"OBJECT\"] = \"OBJECT\";\n    /**\n     * Null type\n     */\n    Type[\"NULL\"] = \"NULL\";\n})(Type || (Type = {}));\n/** Required. Harm category. */\nvar HarmCategory;\n(function (HarmCategory) {\n    /**\n     * The harm category is unspecified.\n     */\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    /**\n     * The harm category is harassment.\n     */\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    /**\n     * The harm category is hate speech.\n     */\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    /**\n     * The harm category is sexually explicit content.\n     */\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n    /**\n     * The harm category is dangerous content.\n     */\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n    /**\n     * Deprecated: Election filter is not longer supported. The harm category is civic integrity.\n     */\n    HarmCategory[\"HARM_CATEGORY_CIVIC_INTEGRITY\"] = \"HARM_CATEGORY_CIVIC_INTEGRITY\";\n    /**\n     * The harm category is image hate.\n     */\n    HarmCategory[\"HARM_CATEGORY_IMAGE_HATE\"] = \"HARM_CATEGORY_IMAGE_HATE\";\n    /**\n     * The harm category is image dangerous content.\n     */\n    HarmCategory[\"HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT\";\n    /**\n     * The harm category is image harassment.\n     */\n    HarmCategory[\"HARM_CATEGORY_IMAGE_HARASSMENT\"] = \"HARM_CATEGORY_IMAGE_HARASSMENT\";\n    /**\n     * The harm category is image sexually explicit content.\n     */\n    HarmCategory[\"HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT\";\n    /**\n     * The harm category is for jailbreak prompts.\n     */\n    HarmCategory[\"HARM_CATEGORY_JAILBREAK\"] = \"HARM_CATEGORY_JAILBREAK\";\n})(HarmCategory || (HarmCategory = {}));\n/** Optional. Specify if the threshold is used for probability or severity score. If not specified, the threshold is used for probability score. */\nvar HarmBlockMethod;\n(function (HarmBlockMethod) {\n    /**\n     * The harm block method is unspecified.\n     */\n    HarmBlockMethod[\"HARM_BLOCK_METHOD_UNSPECIFIED\"] = \"HARM_BLOCK_METHOD_UNSPECIFIED\";\n    /**\n     * The harm block method uses both probability and severity scores.\n     */\n    HarmBlockMethod[\"SEVERITY\"] = \"SEVERITY\";\n    /**\n     * The harm block method uses the probability score.\n     */\n    HarmBlockMethod[\"PROBABILITY\"] = \"PROBABILITY\";\n})(HarmBlockMethod || (HarmBlockMethod = {}));\n/** Required. The harm block threshold. */\nvar HarmBlockThreshold;\n(function (HarmBlockThreshold) {\n    /**\n     * Unspecified harm block threshold.\n     */\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    /**\n     * Block low threshold and above (i.e. block more).\n     */\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    /**\n     * Block medium threshold and above.\n     */\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    /**\n     * Block only high threshold (i.e. block less).\n     */\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    /**\n     * Block none.\n     */\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n    /**\n     * Turn off the safety filter.\n     */\n    HarmBlockThreshold[\"OFF\"] = \"OFF\";\n})(HarmBlockThreshold || (HarmBlockThreshold = {}));\n/** The mode of the predictor to be used in dynamic retrieval. */\nvar Mode;\n(function (Mode) {\n    /**\n     * Always trigger retrieval.\n     */\n    Mode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    /**\n     * Run retrieval only when system decides it is necessary.\n     */\n    Mode[\"MODE_DYNAMIC\"] = \"MODE_DYNAMIC\";\n})(Mode || (Mode = {}));\n/** Type of auth scheme. */\nvar AuthType;\n(function (AuthType) {\n    AuthType[\"AUTH_TYPE_UNSPECIFIED\"] = \"AUTH_TYPE_UNSPECIFIED\";\n    /**\n     * No Auth.\n     */\n    AuthType[\"NO_AUTH\"] = \"NO_AUTH\";\n    /**\n     * API Key Auth.\n     */\n    AuthType[\"API_KEY_AUTH\"] = \"API_KEY_AUTH\";\n    /**\n     * HTTP Basic Auth.\n     */\n    AuthType[\"HTTP_BASIC_AUTH\"] = \"HTTP_BASIC_AUTH\";\n    /**\n     * Google Service Account Auth.\n     */\n    AuthType[\"GOOGLE_SERVICE_ACCOUNT_AUTH\"] = \"GOOGLE_SERVICE_ACCOUNT_AUTH\";\n    /**\n     * OAuth auth.\n     */\n    AuthType[\"OAUTH\"] = \"OAUTH\";\n    /**\n     * OpenID Connect (OIDC) Auth.\n     */\n    AuthType[\"OIDC_AUTH\"] = \"OIDC_AUTH\";\n})(AuthType || (AuthType = {}));\n/** The API spec that the external API implements. */\nvar ApiSpec;\n(function (ApiSpec) {\n    /**\n     * Unspecified API spec. This value should not be used.\n     */\n    ApiSpec[\"API_SPEC_UNSPECIFIED\"] = \"API_SPEC_UNSPECIFIED\";\n    /**\n     * Simple search API spec.\n     */\n    ApiSpec[\"SIMPLE_SEARCH\"] = \"SIMPLE_SEARCH\";\n    /**\n     * Elastic search API spec.\n     */\n    ApiSpec[\"ELASTIC_SEARCH\"] = \"ELASTIC_SEARCH\";\n})(ApiSpec || (ApiSpec = {}));\n/** Status of the url retrieval. */\nvar UrlRetrievalStatus;\n(function (UrlRetrievalStatus) {\n    /**\n     * Default value. This value is unused\n     */\n    UrlRetrievalStatus[\"URL_RETRIEVAL_STATUS_UNSPECIFIED\"] = \"URL_RETRIEVAL_STATUS_UNSPECIFIED\";\n    /**\n     * Url retrieval is successful.\n     */\n    UrlRetrievalStatus[\"URL_RETRIEVAL_STATUS_SUCCESS\"] = \"URL_RETRIEVAL_STATUS_SUCCESS\";\n    /**\n     * Url retrieval is failed due to error.\n     */\n    UrlRetrievalStatus[\"URL_RETRIEVAL_STATUS_ERROR\"] = \"URL_RETRIEVAL_STATUS_ERROR\";\n    /**\n     * Url retrieval is failed because the content is behind paywall.\n     */\n    UrlRetrievalStatus[\"URL_RETRIEVAL_STATUS_PAYWALL\"] = \"URL_RETRIEVAL_STATUS_PAYWALL\";\n    /**\n     * Url retrieval is failed because the content is unsafe.\n     */\n    UrlRetrievalStatus[\"URL_RETRIEVAL_STATUS_UNSAFE\"] = \"URL_RETRIEVAL_STATUS_UNSAFE\";\n})(UrlRetrievalStatus || (UrlRetrievalStatus = {}));\n/** Output only. The reason why the model stopped generating tokens.\n\nIf empty, the model has not stopped generating the tokens. */\nvar FinishReason;\n(function (FinishReason) {\n    /**\n     * The finish reason is unspecified.\n     */\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    /**\n     * Token generation reached a natural stopping point or a configured stop sequence.\n     */\n    FinishReason[\"STOP\"] = \"STOP\";\n    /**\n     * Token generation reached the configured maximum output tokens.\n     */\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    /**\n     * Token generation stopped because the content potentially contains safety violations. NOTE: When streaming, [content][] is empty if content filters blocks the output.\n     */\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    /**\n     * The token generation stopped because of potential recitation.\n     */\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    /**\n     * The token generation stopped because of using an unsupported language.\n     */\n    FinishReason[\"LANGUAGE\"] = \"LANGUAGE\";\n    /**\n     * All other reasons that stopped the token generation.\n     */\n    FinishReason[\"OTHER\"] = \"OTHER\";\n    /**\n     * Token generation stopped because the content contains forbidden terms.\n     */\n    FinishReason[\"BLOCKLIST\"] = \"BLOCKLIST\";\n    /**\n     * Token generation stopped for potentially containing prohibited content.\n     */\n    FinishReason[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n    /**\n     * Token generation stopped because the content potentially contains Sensitive Personally Identifiable Information (SPII).\n     */\n    FinishReason[\"SPII\"] = \"SPII\";\n    /**\n     * The function call generated by the model is invalid.\n     */\n    FinishReason[\"MALFORMED_FUNCTION_CALL\"] = \"MALFORMED_FUNCTION_CALL\";\n    /**\n     * Token generation stopped because generated images have safety violations.\n     */\n    FinishReason[\"IMAGE_SAFETY\"] = \"IMAGE_SAFETY\";\n    /**\n     * The tool call generated by the model is invalid.\n     */\n    FinishReason[\"UNEXPECTED_TOOL_CALL\"] = \"UNEXPECTED_TOOL_CALL\";\n    /**\n     * Image generation stopped because the generated images have prohibited content.\n     */\n    FinishReason[\"IMAGE_PROHIBITED_CONTENT\"] = \"IMAGE_PROHIBITED_CONTENT\";\n    /**\n     * The model was expected to generate an image, but none was generated.\n     */\n    FinishReason[\"NO_IMAGE\"] = \"NO_IMAGE\";\n})(FinishReason || (FinishReason = {}));\n/** Output only. Harm probability levels in the content. */\nvar HarmProbability;\n(function (HarmProbability) {\n    /**\n     * Harm probability unspecified.\n     */\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    /**\n     * Negligible level of harm.\n     */\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    /**\n     * Low level of harm.\n     */\n    HarmProbability[\"LOW\"] = \"LOW\";\n    /**\n     * Medium level of harm.\n     */\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    /**\n     * High level of harm.\n     */\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})(HarmProbability || (HarmProbability = {}));\n/** Output only. Harm severity levels in the content. */\nvar HarmSeverity;\n(function (HarmSeverity) {\n    /**\n     * Harm severity unspecified.\n     */\n    HarmSeverity[\"HARM_SEVERITY_UNSPECIFIED\"] = \"HARM_SEVERITY_UNSPECIFIED\";\n    /**\n     * Negligible level of harm severity.\n     */\n    HarmSeverity[\"HARM_SEVERITY_NEGLIGIBLE\"] = \"HARM_SEVERITY_NEGLIGIBLE\";\n    /**\n     * Low level of harm severity.\n     */\n    HarmSeverity[\"HARM_SEVERITY_LOW\"] = \"HARM_SEVERITY_LOW\";\n    /**\n     * Medium level of harm severity.\n     */\n    HarmSeverity[\"HARM_SEVERITY_MEDIUM\"] = \"HARM_SEVERITY_MEDIUM\";\n    /**\n     * High level of harm severity.\n     */\n    HarmSeverity[\"HARM_SEVERITY_HIGH\"] = \"HARM_SEVERITY_HIGH\";\n})(HarmSeverity || (HarmSeverity = {}));\n/** Output only. The reason why the prompt was blocked. */\nvar BlockedReason;\n(function (BlockedReason) {\n    /**\n     * The blocked reason is unspecified.\n     */\n    BlockedReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n    /**\n     * The prompt was blocked for safety reasons.\n     */\n    BlockedReason[\"SAFETY\"] = \"SAFETY\";\n    /**\n     * The prompt was blocked for other reasons. For example, it may be due to the prompt's language, or because it contains other harmful content.\n     */\n    BlockedReason[\"OTHER\"] = \"OTHER\";\n    /**\n     * The prompt was blocked because it contains a term from the terminology blocklist.\n     */\n    BlockedReason[\"BLOCKLIST\"] = \"BLOCKLIST\";\n    /**\n     * The prompt was blocked because it contains prohibited content.\n     */\n    BlockedReason[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n    /**\n     * The prompt was blocked because it contains content that is unsafe for image generation.\n     */\n    BlockedReason[\"IMAGE_SAFETY\"] = \"IMAGE_SAFETY\";\n    /**\n     * The prompt was blocked by Model Armor.\n     */\n    BlockedReason[\"MODEL_ARMOR\"] = \"MODEL_ARMOR\";\n    /**\n     * The prompt was blocked as a jailbreak attempt.\n     */\n    BlockedReason[\"JAILBREAK\"] = \"JAILBREAK\";\n})(BlockedReason || (BlockedReason = {}));\n/** Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota. */\nvar TrafficType;\n(function (TrafficType) {\n    /**\n     * Unspecified request traffic type.\n     */\n    TrafficType[\"TRAFFIC_TYPE_UNSPECIFIED\"] = \"TRAFFIC_TYPE_UNSPECIFIED\";\n    /**\n     * Type for Pay-As-You-Go traffic.\n     */\n    TrafficType[\"ON_DEMAND\"] = \"ON_DEMAND\";\n    /**\n     * Type for Provisioned Throughput traffic.\n     */\n    TrafficType[\"PROVISIONED_THROUGHPUT\"] = \"PROVISIONED_THROUGHPUT\";\n})(TrafficType || (TrafficType = {}));\n/** Server content modalities. */\nvar Modality;\n(function (Modality) {\n    /**\n     * The modality is unspecified.\n     */\n    Modality[\"MODALITY_UNSPECIFIED\"] = \"MODALITY_UNSPECIFIED\";\n    /**\n     * Indicates the model should return text\n     */\n    Modality[\"TEXT\"] = \"TEXT\";\n    /**\n     * Indicates the model should return images.\n     */\n    Modality[\"IMAGE\"] = \"IMAGE\";\n    /**\n     * Indicates the model should return audio.\n     */\n    Modality[\"AUDIO\"] = \"AUDIO\";\n})(Modality || (Modality = {}));\n/** The media resolution to use. */\nvar MediaResolution;\n(function (MediaResolution) {\n    /**\n     * Media resolution has not been set\n     */\n    MediaResolution[\"MEDIA_RESOLUTION_UNSPECIFIED\"] = \"MEDIA_RESOLUTION_UNSPECIFIED\";\n    /**\n     * Media resolution set to low (64 tokens).\n     */\n    MediaResolution[\"MEDIA_RESOLUTION_LOW\"] = \"MEDIA_RESOLUTION_LOW\";\n    /**\n     * Media resolution set to medium (256 tokens).\n     */\n    MediaResolution[\"MEDIA_RESOLUTION_MEDIUM\"] = \"MEDIA_RESOLUTION_MEDIUM\";\n    /**\n     * Media resolution set to high (zoomed reframing with 256 tokens).\n     */\n    MediaResolution[\"MEDIA_RESOLUTION_HIGH\"] = \"MEDIA_RESOLUTION_HIGH\";\n})(MediaResolution || (MediaResolution = {}));\n/** Job state. */\nvar JobState;\n(function (JobState) {\n    /**\n     * The job state is unspecified.\n     */\n    JobState[\"JOB_STATE_UNSPECIFIED\"] = \"JOB_STATE_UNSPECIFIED\";\n    /**\n     * The job has been just created or resumed and processing has not yet begun.\n     */\n    JobState[\"JOB_STATE_QUEUED\"] = \"JOB_STATE_QUEUED\";\n    /**\n     * The service is preparing to run the job.\n     */\n    JobState[\"JOB_STATE_PENDING\"] = \"JOB_STATE_PENDING\";\n    /**\n     * The job is in progress.\n     */\n    JobState[\"JOB_STATE_RUNNING\"] = \"JOB_STATE_RUNNING\";\n    /**\n     * The job completed successfully.\n     */\n    JobState[\"JOB_STATE_SUCCEEDED\"] = \"JOB_STATE_SUCCEEDED\";\n    /**\n     * The job failed.\n     */\n    JobState[\"JOB_STATE_FAILED\"] = \"JOB_STATE_FAILED\";\n    /**\n     * The job is being cancelled. From this state the job may only go to either `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED` or `JOB_STATE_CANCELLED`.\n     */\n    JobState[\"JOB_STATE_CANCELLING\"] = \"JOB_STATE_CANCELLING\";\n    /**\n     * The job has been cancelled.\n     */\n    JobState[\"JOB_STATE_CANCELLED\"] = \"JOB_STATE_CANCELLED\";\n    /**\n     * The job has been stopped, and can be resumed.\n     */\n    JobState[\"JOB_STATE_PAUSED\"] = \"JOB_STATE_PAUSED\";\n    /**\n     * The job has expired.\n     */\n    JobState[\"JOB_STATE_EXPIRED\"] = \"JOB_STATE_EXPIRED\";\n    /**\n     * The job is being updated. Only jobs in the `JOB_STATE_RUNNING` state can be updated. After updating, the job goes back to the `JOB_STATE_RUNNING` state.\n     */\n    JobState[\"JOB_STATE_UPDATING\"] = \"JOB_STATE_UPDATING\";\n    /**\n     * The job is partially succeeded, some results may be missing due to errors.\n     */\n    JobState[\"JOB_STATE_PARTIALLY_SUCCEEDED\"] = \"JOB_STATE_PARTIALLY_SUCCEEDED\";\n})(JobState || (JobState = {}));\n/** Tuning mode. */\nvar TuningMode;\n(function (TuningMode) {\n    /**\n     * Tuning mode is unspecified.\n     */\n    TuningMode[\"TUNING_MODE_UNSPECIFIED\"] = \"TUNING_MODE_UNSPECIFIED\";\n    /**\n     * Full fine-tuning mode.\n     */\n    TuningMode[\"TUNING_MODE_FULL\"] = \"TUNING_MODE_FULL\";\n    /**\n     * PEFT adapter tuning mode.\n     */\n    TuningMode[\"TUNING_MODE_PEFT_ADAPTER\"] = \"TUNING_MODE_PEFT_ADAPTER\";\n})(TuningMode || (TuningMode = {}));\n/** Optional. Adapter size for tuning. */\nvar AdapterSize;\n(function (AdapterSize) {\n    /**\n     * Adapter size is unspecified.\n     */\n    AdapterSize[\"ADAPTER_SIZE_UNSPECIFIED\"] = \"ADAPTER_SIZE_UNSPECIFIED\";\n    /**\n     * Adapter size 1.\n     */\n    AdapterSize[\"ADAPTER_SIZE_ONE\"] = \"ADAPTER_SIZE_ONE\";\n    /**\n     * Adapter size 2.\n     */\n    AdapterSize[\"ADAPTER_SIZE_TWO\"] = \"ADAPTER_SIZE_TWO\";\n    /**\n     * Adapter size 4.\n     */\n    AdapterSize[\"ADAPTER_SIZE_FOUR\"] = \"ADAPTER_SIZE_FOUR\";\n    /**\n     * Adapter size 8.\n     */\n    AdapterSize[\"ADAPTER_SIZE_EIGHT\"] = \"ADAPTER_SIZE_EIGHT\";\n    /**\n     * Adapter size 16.\n     */\n    AdapterSize[\"ADAPTER_SIZE_SIXTEEN\"] = \"ADAPTER_SIZE_SIXTEEN\";\n    /**\n     * Adapter size 32.\n     */\n    AdapterSize[\"ADAPTER_SIZE_THIRTY_TWO\"] = \"ADAPTER_SIZE_THIRTY_TWO\";\n})(AdapterSize || (AdapterSize = {}));\n/** Optional. The tuning task. Either I2V or T2V. */\nvar TuningTask;\n(function (TuningTask) {\n    /**\n     * Default value. This value is unused.\n     */\n    TuningTask[\"TUNING_TASK_UNSPECIFIED\"] = \"TUNING_TASK_UNSPECIFIED\";\n    /**\n     * Tuning task for image to video.\n     */\n    TuningTask[\"TUNING_TASK_I2V\"] = \"TUNING_TASK_I2V\";\n    /**\n     * Tuning task for text to video.\n     */\n    TuningTask[\"TUNING_TASK_T2V\"] = \"TUNING_TASK_T2V\";\n})(TuningTask || (TuningTask = {}));\n/** Options for feature selection preference. */\nvar FeatureSelectionPreference;\n(function (FeatureSelectionPreference) {\n    FeatureSelectionPreference[\"FEATURE_SELECTION_PREFERENCE_UNSPECIFIED\"] = \"FEATURE_SELECTION_PREFERENCE_UNSPECIFIED\";\n    FeatureSelectionPreference[\"PRIORITIZE_QUALITY\"] = \"PRIORITIZE_QUALITY\";\n    FeatureSelectionPreference[\"BALANCED\"] = \"BALANCED\";\n    FeatureSelectionPreference[\"PRIORITIZE_COST\"] = \"PRIORITIZE_COST\";\n})(FeatureSelectionPreference || (FeatureSelectionPreference = {}));\n/** Defines the function behavior. Defaults to `BLOCKING`. */\nvar Behavior;\n(function (Behavior) {\n    /**\n     * This value is unused.\n     */\n    Behavior[\"UNSPECIFIED\"] = \"UNSPECIFIED\";\n    /**\n     * If set, the system will wait to receive the function response before continuing the conversation.\n     */\n    Behavior[\"BLOCKING\"] = \"BLOCKING\";\n    /**\n     * If set, the system will not wait to receive the function response. Instead, it will attempt to handle function responses as they become available while maintaining the conversation between the user and the model.\n     */\n    Behavior[\"NON_BLOCKING\"] = \"NON_BLOCKING\";\n})(Behavior || (Behavior = {}));\n/** Config for the dynamic retrieval config mode. */\nvar DynamicRetrievalConfigMode;\n(function (DynamicRetrievalConfigMode) {\n    /**\n     * Always trigger retrieval.\n     */\n    DynamicRetrievalConfigMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    /**\n     * Run retrieval only when system decides it is necessary.\n     */\n    DynamicRetrievalConfigMode[\"MODE_DYNAMIC\"] = \"MODE_DYNAMIC\";\n})(DynamicRetrievalConfigMode || (DynamicRetrievalConfigMode = {}));\n/** The environment being operated. */\nvar Environment;\n(function (Environment) {\n    /**\n     * Defaults to browser.\n     */\n    Environment[\"ENVIRONMENT_UNSPECIFIED\"] = \"ENVIRONMENT_UNSPECIFIED\";\n    /**\n     * Operates in a web browser.\n     */\n    Environment[\"ENVIRONMENT_BROWSER\"] = \"ENVIRONMENT_BROWSER\";\n})(Environment || (Environment = {}));\n/** Config for the function calling config mode. */\nvar FunctionCallingConfigMode;\n(function (FunctionCallingConfigMode) {\n    /**\n     * The function calling config mode is unspecified. Should not be used.\n     */\n    FunctionCallingConfigMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    /**\n     * Default model behavior, model decides to predict either function calls or natural language response.\n     */\n    FunctionCallingConfigMode[\"AUTO\"] = \"AUTO\";\n    /**\n     * Model is constrained to always predicting function calls only. If \"allowed_function_names\" are set, the predicted function calls will be limited to any one of \"allowed_function_names\", else the predicted function calls will be any one of the provided \"function_declarations\".\n     */\n    FunctionCallingConfigMode[\"ANY\"] = \"ANY\";\n    /**\n     * Model will not predict any function calls. Model behavior is same as when not passing any function declarations.\n     */\n    FunctionCallingConfigMode[\"NONE\"] = \"NONE\";\n    /**\n     * Model decides to predict either a function call or a natural language response, but will validate function calls with constrained decoding. If \"allowed_function_names\" are set, the predicted function call will be limited to any one of \"allowed_function_names\", else the predicted function call will be any one of the provided \"function_declarations\".\n     */\n    FunctionCallingConfigMode[\"VALIDATED\"] = \"VALIDATED\";\n})(FunctionCallingConfigMode || (FunctionCallingConfigMode = {}));\n/** Enum that controls the safety filter level for objectionable content. */\nvar SafetyFilterLevel;\n(function (SafetyFilterLevel) {\n    SafetyFilterLevel[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    SafetyFilterLevel[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    SafetyFilterLevel[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    SafetyFilterLevel[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(SafetyFilterLevel || (SafetyFilterLevel = {}));\n/** Enum that controls the generation of people. */\nvar PersonGeneration;\n(function (PersonGeneration) {\n    /**\n     * Block generation of images of people.\n     */\n    PersonGeneration[\"DONT_ALLOW\"] = \"DONT_ALLOW\";\n    /**\n     * Generate images of adults, but not children.\n     */\n    PersonGeneration[\"ALLOW_ADULT\"] = \"ALLOW_ADULT\";\n    /**\n     * Generate images that include adults and children.\n     */\n    PersonGeneration[\"ALLOW_ALL\"] = \"ALLOW_ALL\";\n})(PersonGeneration || (PersonGeneration = {}));\n/** Enum that specifies the language of the text in the prompt. */\nvar ImagePromptLanguage;\n(function (ImagePromptLanguage) {\n    /**\n     * Auto-detect the language.\n     */\n    ImagePromptLanguage[\"auto\"] = \"auto\";\n    /**\n     * English\n     */\n    ImagePromptLanguage[\"en\"] = \"en\";\n    /**\n     * Japanese\n     */\n    ImagePromptLanguage[\"ja\"] = \"ja\";\n    /**\n     * Korean\n     */\n    ImagePromptLanguage[\"ko\"] = \"ko\";\n    /**\n     * Hindi\n     */\n    ImagePromptLanguage[\"hi\"] = \"hi\";\n    /**\n     * Chinese\n     */\n    ImagePromptLanguage[\"zh\"] = \"zh\";\n    /**\n     * Portuguese\n     */\n    ImagePromptLanguage[\"pt\"] = \"pt\";\n    /**\n     * Spanish\n     */\n    ImagePromptLanguage[\"es\"] = \"es\";\n})(ImagePromptLanguage || (ImagePromptLanguage = {}));\n/** Enum representing the mask mode of a mask reference image. */\nvar MaskReferenceMode;\n(function (MaskReferenceMode) {\n    MaskReferenceMode[\"MASK_MODE_DEFAULT\"] = \"MASK_MODE_DEFAULT\";\n    MaskReferenceMode[\"MASK_MODE_USER_PROVIDED\"] = \"MASK_MODE_USER_PROVIDED\";\n    MaskReferenceMode[\"MASK_MODE_BACKGROUND\"] = \"MASK_MODE_BACKGROUND\";\n    MaskReferenceMode[\"MASK_MODE_FOREGROUND\"] = \"MASK_MODE_FOREGROUND\";\n    MaskReferenceMode[\"MASK_MODE_SEMANTIC\"] = \"MASK_MODE_SEMANTIC\";\n})(MaskReferenceMode || (MaskReferenceMode = {}));\n/** Enum representing the control type of a control reference image. */\nvar ControlReferenceType;\n(function (ControlReferenceType) {\n    ControlReferenceType[\"CONTROL_TYPE_DEFAULT\"] = \"CONTROL_TYPE_DEFAULT\";\n    ControlReferenceType[\"CONTROL_TYPE_CANNY\"] = \"CONTROL_TYPE_CANNY\";\n    ControlReferenceType[\"CONTROL_TYPE_SCRIBBLE\"] = \"CONTROL_TYPE_SCRIBBLE\";\n    ControlReferenceType[\"CONTROL_TYPE_FACE_MESH\"] = \"CONTROL_TYPE_FACE_MESH\";\n})(ControlReferenceType || (ControlReferenceType = {}));\n/** Enum representing the subject type of a subject reference image. */\nvar SubjectReferenceType;\n(function (SubjectReferenceType) {\n    SubjectReferenceType[\"SUBJECT_TYPE_DEFAULT\"] = \"SUBJECT_TYPE_DEFAULT\";\n    SubjectReferenceType[\"SUBJECT_TYPE_PERSON\"] = \"SUBJECT_TYPE_PERSON\";\n    SubjectReferenceType[\"SUBJECT_TYPE_ANIMAL\"] = \"SUBJECT_TYPE_ANIMAL\";\n    SubjectReferenceType[\"SUBJECT_TYPE_PRODUCT\"] = \"SUBJECT_TYPE_PRODUCT\";\n})(SubjectReferenceType || (SubjectReferenceType = {}));\n/** Enum representing the editing mode. */\nvar EditMode;\n(function (EditMode) {\n    EditMode[\"EDIT_MODE_DEFAULT\"] = \"EDIT_MODE_DEFAULT\";\n    EditMode[\"EDIT_MODE_INPAINT_REMOVAL\"] = \"EDIT_MODE_INPAINT_REMOVAL\";\n    EditMode[\"EDIT_MODE_INPAINT_INSERTION\"] = \"EDIT_MODE_INPAINT_INSERTION\";\n    EditMode[\"EDIT_MODE_OUTPAINT\"] = \"EDIT_MODE_OUTPAINT\";\n    EditMode[\"EDIT_MODE_CONTROLLED_EDITING\"] = \"EDIT_MODE_CONTROLLED_EDITING\";\n    EditMode[\"EDIT_MODE_STYLE\"] = \"EDIT_MODE_STYLE\";\n    EditMode[\"EDIT_MODE_BGSWAP\"] = \"EDIT_MODE_BGSWAP\";\n    EditMode[\"EDIT_MODE_PRODUCT_IMAGE\"] = \"EDIT_MODE_PRODUCT_IMAGE\";\n})(EditMode || (EditMode = {}));\n/** Enum that represents the segmentation mode. */\nvar SegmentMode;\n(function (SegmentMode) {\n    SegmentMode[\"FOREGROUND\"] = \"FOREGROUND\";\n    SegmentMode[\"BACKGROUND\"] = \"BACKGROUND\";\n    SegmentMode[\"PROMPT\"] = \"PROMPT\";\n    SegmentMode[\"SEMANTIC\"] = \"SEMANTIC\";\n    SegmentMode[\"INTERACTIVE\"] = \"INTERACTIVE\";\n})(SegmentMode || (SegmentMode = {}));\n/** Enum for the reference type of a video generation reference image. */\nvar VideoGenerationReferenceType;\n(function (VideoGenerationReferenceType) {\n    /**\n     * A reference image that provides assets to the generated video,\n        such as the scene, an object, a character, etc.\n     */\n    VideoGenerationReferenceType[\"ASSET\"] = \"ASSET\";\n    /**\n     * A reference image that provides aesthetics including colors,\n        lighting, texture, etc., to be used as the style of the generated video,\n        such as 'anime', 'photography', 'origami', etc.\n     */\n    VideoGenerationReferenceType[\"STYLE\"] = \"STYLE\";\n})(VideoGenerationReferenceType || (VideoGenerationReferenceType = {}));\n/** Enum for the mask mode of a video generation mask. */\nvar VideoGenerationMaskMode;\n(function (VideoGenerationMaskMode) {\n    /**\n     * The image mask contains a masked rectangular region which is\n        applied on the first frame of the input video. The object described in\n        the prompt is inserted into this region and will appear in subsequent\n        frames.\n     */\n    VideoGenerationMaskMode[\"INSERT\"] = \"INSERT\";\n    /**\n     * The image mask is used to determine an object in the\n        first video frame to track. This object is removed from the video.\n     */\n    VideoGenerationMaskMode[\"REMOVE\"] = \"REMOVE\";\n    /**\n     * The image mask is used to determine a region in the\n        video. Objects in this region will be removed.\n     */\n    VideoGenerationMaskMode[\"REMOVE_STATIC\"] = \"REMOVE_STATIC\";\n    /**\n     * The image mask contains a masked rectangular region where\n        the input video will go. The remaining area will be generated. Video\n        masks are not supported.\n     */\n    VideoGenerationMaskMode[\"OUTPAINT\"] = \"OUTPAINT\";\n})(VideoGenerationMaskMode || (VideoGenerationMaskMode = {}));\n/** Enum that controls the compression quality of the generated videos. */\nvar VideoCompressionQuality;\n(function (VideoCompressionQuality) {\n    /**\n     * Optimized video compression quality. This will produce videos\n        with a compressed, smaller file size.\n     */\n    VideoCompressionQuality[\"OPTIMIZED\"] = \"OPTIMIZED\";\n    /**\n     * Lossless video compression quality. This will produce videos\n        with a larger file size.\n     */\n    VideoCompressionQuality[\"LOSSLESS\"] = \"LOSSLESS\";\n})(VideoCompressionQuality || (VideoCompressionQuality = {}));\n/** State for the lifecycle of a File. */\nvar FileState;\n(function (FileState) {\n    FileState[\"STATE_UNSPECIFIED\"] = \"STATE_UNSPECIFIED\";\n    FileState[\"PROCESSING\"] = \"PROCESSING\";\n    FileState[\"ACTIVE\"] = \"ACTIVE\";\n    FileState[\"FAILED\"] = \"FAILED\";\n})(FileState || (FileState = {}));\n/** Source of the File. */\nvar FileSource;\n(function (FileSource) {\n    FileSource[\"SOURCE_UNSPECIFIED\"] = \"SOURCE_UNSPECIFIED\";\n    FileSource[\"UPLOADED\"] = \"UPLOADED\";\n    FileSource[\"GENERATED\"] = \"GENERATED\";\n})(FileSource || (FileSource = {}));\n/** The reason why the turn is complete. */\nvar TurnCompleteReason;\n(function (TurnCompleteReason) {\n    /**\n     * Default value. Reason is unspecified.\n     */\n    TurnCompleteReason[\"TURN_COMPLETE_REASON_UNSPECIFIED\"] = \"TURN_COMPLETE_REASON_UNSPECIFIED\";\n    /**\n     * The function call generated by the model is invalid.\n     */\n    TurnCompleteReason[\"MALFORMED_FUNCTION_CALL\"] = \"MALFORMED_FUNCTION_CALL\";\n    /**\n     * The response is rejected by the model.\n     */\n    TurnCompleteReason[\"RESPONSE_REJECTED\"] = \"RESPONSE_REJECTED\";\n    /**\n     * Needs more input from the user.\n     */\n    TurnCompleteReason[\"NEED_MORE_INPUT\"] = \"NEED_MORE_INPUT\";\n})(TurnCompleteReason || (TurnCompleteReason = {}));\n/** Server content modalities. */\nvar MediaModality;\n(function (MediaModality) {\n    /**\n     * The modality is unspecified.\n     */\n    MediaModality[\"MODALITY_UNSPECIFIED\"] = \"MODALITY_UNSPECIFIED\";\n    /**\n     * Plain text.\n     */\n    MediaModality[\"TEXT\"] = \"TEXT\";\n    /**\n     * Images.\n     */\n    MediaModality[\"IMAGE\"] = \"IMAGE\";\n    /**\n     * Video.\n     */\n    MediaModality[\"VIDEO\"] = \"VIDEO\";\n    /**\n     * Audio.\n     */\n    MediaModality[\"AUDIO\"] = \"AUDIO\";\n    /**\n     * Document, e.g. PDF.\n     */\n    MediaModality[\"DOCUMENT\"] = \"DOCUMENT\";\n})(MediaModality || (MediaModality = {}));\n/** Start of speech sensitivity. */\nvar StartSensitivity;\n(function (StartSensitivity) {\n    /**\n     * The default is START_SENSITIVITY_LOW.\n     */\n    StartSensitivity[\"START_SENSITIVITY_UNSPECIFIED\"] = \"START_SENSITIVITY_UNSPECIFIED\";\n    /**\n     * Automatic detection will detect the start of speech more often.\n     */\n    StartSensitivity[\"START_SENSITIVITY_HIGH\"] = \"START_SENSITIVITY_HIGH\";\n    /**\n     * Automatic detection will detect the start of speech less often.\n     */\n    StartSensitivity[\"START_SENSITIVITY_LOW\"] = \"START_SENSITIVITY_LOW\";\n})(StartSensitivity || (StartSensitivity = {}));\n/** End of speech sensitivity. */\nvar EndSensitivity;\n(function (EndSensitivity) {\n    /**\n     * The default is END_SENSITIVITY_LOW.\n     */\n    EndSensitivity[\"END_SENSITIVITY_UNSPECIFIED\"] = \"END_SENSITIVITY_UNSPECIFIED\";\n    /**\n     * Automatic detection ends speech more often.\n     */\n    EndSensitivity[\"END_SENSITIVITY_HIGH\"] = \"END_SENSITIVITY_HIGH\";\n    /**\n     * Automatic detection ends speech less often.\n     */\n    EndSensitivity[\"END_SENSITIVITY_LOW\"] = \"END_SENSITIVITY_LOW\";\n})(EndSensitivity || (EndSensitivity = {}));\n/** The different ways of handling user activity. */\nvar ActivityHandling;\n(function (ActivityHandling) {\n    /**\n     * If unspecified, the default behavior is `START_OF_ACTIVITY_INTERRUPTS`.\n     */\n    ActivityHandling[\"ACTIVITY_HANDLING_UNSPECIFIED\"] = \"ACTIVITY_HANDLING_UNSPECIFIED\";\n    /**\n     * If true, start of activity will interrupt the model's response (also called \"barge in\"). The model's current response will be cut-off in the moment of the interruption. This is the default behavior.\n     */\n    ActivityHandling[\"START_OF_ACTIVITY_INTERRUPTS\"] = \"START_OF_ACTIVITY_INTERRUPTS\";\n    /**\n     * The model's response will not be interrupted.\n     */\n    ActivityHandling[\"NO_INTERRUPTION\"] = \"NO_INTERRUPTION\";\n})(ActivityHandling || (ActivityHandling = {}));\n/** Options about which input is included in the user's turn. */\nvar TurnCoverage;\n(function (TurnCoverage) {\n    /**\n     * If unspecified, the default behavior is `TURN_INCLUDES_ONLY_ACTIVITY`.\n     */\n    TurnCoverage[\"TURN_COVERAGE_UNSPECIFIED\"] = \"TURN_COVERAGE_UNSPECIFIED\";\n    /**\n     * The users turn only includes activity since the last turn, excluding inactivity (e.g. silence on the audio stream). This is the default behavior.\n     */\n    TurnCoverage[\"TURN_INCLUDES_ONLY_ACTIVITY\"] = \"TURN_INCLUDES_ONLY_ACTIVITY\";\n    /**\n     * The users turn includes all realtime input since the last turn, including inactivity (e.g. silence on the audio stream).\n     */\n    TurnCoverage[\"TURN_INCLUDES_ALL_INPUT\"] = \"TURN_INCLUDES_ALL_INPUT\";\n})(TurnCoverage || (TurnCoverage = {}));\n/** Scale of the generated music. */\nvar Scale;\n(function (Scale) {\n    /**\n     * Default value. This value is unused.\n     */\n    Scale[\"SCALE_UNSPECIFIED\"] = \"SCALE_UNSPECIFIED\";\n    /**\n     * C major or A minor.\n     */\n    Scale[\"C_MAJOR_A_MINOR\"] = \"C_MAJOR_A_MINOR\";\n    /**\n     * Db major or Bb minor.\n     */\n    Scale[\"D_FLAT_MAJOR_B_FLAT_MINOR\"] = \"D_FLAT_MAJOR_B_FLAT_MINOR\";\n    /**\n     * D major or B minor.\n     */\n    Scale[\"D_MAJOR_B_MINOR\"] = \"D_MAJOR_B_MINOR\";\n    /**\n     * Eb major or C minor\n     */\n    Scale[\"E_FLAT_MAJOR_C_MINOR\"] = \"E_FLAT_MAJOR_C_MINOR\";\n    /**\n     * E major or Db minor.\n     */\n    Scale[\"E_MAJOR_D_FLAT_MINOR\"] = \"E_MAJOR_D_FLAT_MINOR\";\n    /**\n     * F major or D minor.\n     */\n    Scale[\"F_MAJOR_D_MINOR\"] = \"F_MAJOR_D_MINOR\";\n    /**\n     * Gb major or Eb minor.\n     */\n    Scale[\"G_FLAT_MAJOR_E_FLAT_MINOR\"] = \"G_FLAT_MAJOR_E_FLAT_MINOR\";\n    /**\n     * G major or E minor.\n     */\n    Scale[\"G_MAJOR_E_MINOR\"] = \"G_MAJOR_E_MINOR\";\n    /**\n     * Ab major or F minor.\n     */\n    Scale[\"A_FLAT_MAJOR_F_MINOR\"] = \"A_FLAT_MAJOR_F_MINOR\";\n    /**\n     * A major or Gb minor.\n     */\n    Scale[\"A_MAJOR_G_FLAT_MINOR\"] = \"A_MAJOR_G_FLAT_MINOR\";\n    /**\n     * Bb major or G minor.\n     */\n    Scale[\"B_FLAT_MAJOR_G_MINOR\"] = \"B_FLAT_MAJOR_G_MINOR\";\n    /**\n     * B major or Ab minor.\n     */\n    Scale[\"B_MAJOR_A_FLAT_MINOR\"] = \"B_MAJOR_A_FLAT_MINOR\";\n})(Scale || (Scale = {}));\n/** The mode of music generation. */\nvar MusicGenerationMode;\n(function (MusicGenerationMode) {\n    /**\n     * Rely on the server default generation mode.\n     */\n    MusicGenerationMode[\"MUSIC_GENERATION_MODE_UNSPECIFIED\"] = \"MUSIC_GENERATION_MODE_UNSPECIFIED\";\n    /**\n     * Steer text prompts to regions of latent space with higher quality\n        music.\n     */\n    MusicGenerationMode[\"QUALITY\"] = \"QUALITY\";\n    /**\n     * Steer text prompts to regions of latent space with a larger\n        diversity of music.\n     */\n    MusicGenerationMode[\"DIVERSITY\"] = \"DIVERSITY\";\n    /**\n     * Steer text prompts to regions of latent space more likely to\n        generate music with vocals.\n     */\n    MusicGenerationMode[\"VOCALIZATION\"] = \"VOCALIZATION\";\n})(MusicGenerationMode || (MusicGenerationMode = {}));\n/** The playback control signal to apply to the music generation. */\nvar LiveMusicPlaybackControl;\n(function (LiveMusicPlaybackControl) {\n    /**\n     * This value is unused.\n     */\n    LiveMusicPlaybackControl[\"PLAYBACK_CONTROL_UNSPECIFIED\"] = \"PLAYBACK_CONTROL_UNSPECIFIED\";\n    /**\n     * Start generating the music.\n     */\n    LiveMusicPlaybackControl[\"PLAY\"] = \"PLAY\";\n    /**\n     * Hold the music generation. Use PLAY to resume from the current position.\n     */\n    LiveMusicPlaybackControl[\"PAUSE\"] = \"PAUSE\";\n    /**\n     * Stop the music generation and reset the context (prompts retained).\n        Use PLAY to restart the music generation.\n     */\n    LiveMusicPlaybackControl[\"STOP\"] = \"STOP\";\n    /**\n     * Reset the context of the music generation without stopping it.\n        Retains the current prompts and config.\n     */\n    LiveMusicPlaybackControl[\"RESET_CONTEXT\"] = \"RESET_CONTEXT\";\n})(LiveMusicPlaybackControl || (LiveMusicPlaybackControl = {}));\n/** Raw media bytes for function response.\n\nText should not be sent as raw bytes, use the FunctionResponse.response\nfield. */\nclass FunctionResponseBlob {\n}\n/** URI based data for function response. */\nclass FunctionResponseFileData {\n}\n/** A datatype containing media that is part of a `FunctionResponse` message.\n\nA `FunctionResponsePart` consists of data which has an associated datatype. A\n`FunctionResponsePart` can only contain one of the accepted types in\n`FunctionResponsePart.data`.\n\nA `FunctionResponsePart` must have a fixed IANA MIME type identifying the\ntype and subtype of the media if the `inline_data` field is filled with raw\nbytes. */\nclass FunctionResponsePart {\n}\n/**\n * Creates a `FunctionResponsePart` object from a `base64` encoded `string`.\n */\nfunction createFunctionResponsePartFromBase64(data, mimeType) {\n    return {\n        inlineData: {\n            data: data,\n            mimeType: mimeType,\n        },\n    };\n}\n/**\n * Creates a `FunctionResponsePart` object from a `URI` string.\n */\nfunction createFunctionResponsePartFromUri(uri, mimeType) {\n    return {\n        fileData: {\n            fileUri: uri,\n            mimeType: mimeType,\n        },\n    };\n}\n/** A function response. */\nclass FunctionResponse {\n}\n/**\n * Creates a `Part` object from a `URI` string.\n */\nfunction createPartFromUri(uri, mimeType) {\n    return {\n        fileData: {\n            fileUri: uri,\n            mimeType: mimeType,\n        },\n    };\n}\n/**\n * Creates a `Part` object from a `text` string.\n */\nfunction createPartFromText(text) {\n    return {\n        text: text,\n    };\n}\n/**\n * Creates a `Part` object from a `FunctionCall` object.\n */\nfunction createPartFromFunctionCall(name, args) {\n    return {\n        functionCall: {\n            name: name,\n            args: args,\n        },\n    };\n}\n/**\n * Creates a `Part` object from a `FunctionResponse` object.\n */\nfunction createPartFromFunctionResponse(id, name, response, parts = []) {\n    return {\n        functionResponse: Object.assign({ id: id, name: name, response: response }, (parts.length > 0 && { parts })),\n    };\n}\n/**\n * Creates a `Part` object from a `base64` encoded `string`.\n */\nfunction createPartFromBase64(data, mimeType) {\n    return {\n        inlineData: {\n            data: data,\n            mimeType: mimeType,\n        },\n    };\n}\n/**\n * Creates a `Part` object from the `outcome` and `output` of a `CodeExecutionResult` object.\n */\nfunction createPartFromCodeExecutionResult(outcome, output) {\n    return {\n        codeExecutionResult: {\n            outcome: outcome,\n            output: output,\n        },\n    };\n}\n/**\n * Creates a `Part` object from the `code` and `language` of an `ExecutableCode` object.\n */\nfunction createPartFromExecutableCode(code, language) {\n    return {\n        executableCode: {\n            code: code,\n            language: language,\n        },\n    };\n}\nfunction _isPart(obj) {\n    if (typeof obj === 'object' && obj !== null) {\n        return ('fileData' in obj ||\n            'text' in obj ||\n            'functionCall' in obj ||\n            'functionResponse' in obj ||\n            'inlineData' in obj ||\n            'videoMetadata' in obj ||\n            'codeExecutionResult' in obj ||\n            'executableCode' in obj);\n    }\n    return false;\n}\nfunction _toParts(partOrString) {\n    const parts = [];\n    if (typeof partOrString === 'string') {\n        parts.push(createPartFromText(partOrString));\n    }\n    else if (_isPart(partOrString)) {\n        parts.push(partOrString);\n    }\n    else if (Array.isArray(partOrString)) {\n        if (partOrString.length === 0) {\n            throw new Error('partOrString cannot be an empty array');\n        }\n        for (const part of partOrString) {\n            if (typeof part === 'string') {\n                parts.push(createPartFromText(part));\n            }\n            else if (_isPart(part)) {\n                parts.push(part);\n            }\n            else {\n                throw new Error('element in PartUnion must be a Part object or string');\n            }\n        }\n    }\n    else {\n        throw new Error('partOrString must be a Part object, string, or array');\n    }\n    return parts;\n}\n/**\n * Creates a `Content` object with a user role from a `PartListUnion` object or `string`.\n */\nfunction createUserContent(partOrString) {\n    return {\n        role: 'user',\n        parts: _toParts(partOrString),\n    };\n}\n/**\n * Creates a `Content` object with a model role from a `PartListUnion` object or `string`.\n */\nfunction createModelContent(partOrString) {\n    return {\n        role: 'model',\n        parts: _toParts(partOrString),\n    };\n}\n/** A wrapper class for the http response. */\nclass HttpResponse {\n    constructor(response) {\n        // Process the headers.\n        const headers = {};\n        for (const pair of response.headers.entries()) {\n            headers[pair[0]] = pair[1];\n        }\n        this.headers = headers;\n        // Keep the original response.\n        this.responseInternal = response;\n    }\n    json() {\n        return this.responseInternal.json();\n    }\n}\n/** Content filter results for a prompt sent in the request. Note: This is sent only in the first stream chunk and only if no candidates were generated due to content violations. */\nclass GenerateContentResponsePromptFeedback {\n}\n/** Usage metadata about response(s). */\nclass GenerateContentResponseUsageMetadata {\n}\n/** Response message for PredictionService.GenerateContent. */\nclass GenerateContentResponse {\n    /**\n     * Returns the concatenation of all text parts from the first candidate in the response.\n     *\n     * @remarks\n     * If there are multiple candidates in the response, the text from the first\n     * one will be returned.\n     * If there are non-text parts in the response, the concatenation of all text\n     * parts will be returned, and a warning will be logged.\n     * If there are thought parts in the response, the concatenation of all text\n     * parts excluding the thought parts will be returned.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.generateContent({\n     *   model: 'gemini-2.0-flash',\n     *   contents:\n     *     'Why is the sky blue?',\n     * });\n     *\n     * console.debug(response.text);\n     * ```\n     */\n    get text() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n            return undefined;\n        }\n        if (this.candidates && this.candidates.length > 1) {\n            console.warn('there are multiple candidates in the response, returning text from the first one.');\n        }\n        let text = '';\n        let anyTextPartText = false;\n        const nonTextParts = [];\n        for (const part of (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) !== null && _h !== void 0 ? _h : []) {\n            for (const [fieldName, fieldValue] of Object.entries(part)) {\n                if (fieldName !== 'text' &&\n                    fieldName !== 'thought' &&\n                    (fieldValue !== null || fieldValue !== undefined)) {\n                    nonTextParts.push(fieldName);\n                }\n            }\n            if (typeof part.text === 'string') {\n                if (typeof part.thought === 'boolean' && part.thought) {\n                    continue;\n                }\n                anyTextPartText = true;\n                text += part.text;\n            }\n        }\n        if (nonTextParts.length > 0) {\n            console.warn(`there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`);\n        }\n        // part.text === '' is different from part.text is null\n        return anyTextPartText ? text : undefined;\n    }\n    /**\n     * Returns the concatenation of all inline data parts from the first candidate\n     * in the response.\n     *\n     * @remarks\n     * If there are multiple candidates in the response, the inline data from the\n     * first one will be returned. If there are non-inline data parts in the\n     * response, the concatenation of all inline data parts will be returned, and\n     * a warning will be logged.\n     */\n    get data() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n            return undefined;\n        }\n        if (this.candidates && this.candidates.length > 1) {\n            console.warn('there are multiple candidates in the response, returning data from the first one.');\n        }\n        let data = '';\n        const nonDataParts = [];\n        for (const part of (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) !== null && _h !== void 0 ? _h : []) {\n            for (const [fieldName, fieldValue] of Object.entries(part)) {\n                if (fieldName !== 'inlineData' &&\n                    (fieldValue !== null || fieldValue !== undefined)) {\n                    nonDataParts.push(fieldName);\n                }\n            }\n            if (part.inlineData && typeof part.inlineData.data === 'string') {\n                data += atob(part.inlineData.data);\n            }\n        }\n        if (nonDataParts.length > 0) {\n            console.warn(`there are non-data parts ${nonDataParts} in the response, returning concatenation of all data parts. Please refer to the non data parts for a full response from model.`);\n        }\n        return data.length > 0 ? btoa(data) : undefined;\n    }\n    /**\n     * Returns the function calls from the first candidate in the response.\n     *\n     * @remarks\n     * If there are multiple candidates in the response, the function calls from\n     * the first one will be returned.\n     * If there are no function calls in the response, undefined will be returned.\n     *\n     * @example\n     * ```ts\n     * const controlLightFunctionDeclaration: FunctionDeclaration = {\n     *   name: 'controlLight',\n     *   parameters: {\n     *   type: Type.OBJECT,\n     *   description: 'Set the brightness and color temperature of a room light.',\n     *   properties: {\n     *     brightness: {\n     *       type: Type.NUMBER,\n     *       description:\n     *         'Light level from 0 to 100. Zero is off and 100 is full brightness.',\n     *     },\n     *     colorTemperature: {\n     *       type: Type.STRING,\n     *       description:\n     *         'Color temperature of the light fixture which can be `daylight`, `cool` or `warm`.',\n     *     },\n     *   },\n     *   required: ['brightness', 'colorTemperature'],\n     *  };\n     *  const response = await ai.models.generateContent({\n     *     model: 'gemini-2.0-flash',\n     *     contents: 'Dim the lights so the room feels cozy and warm.',\n     *     config: {\n     *       tools: [{functionDeclarations: [controlLightFunctionDeclaration]}],\n     *       toolConfig: {\n     *         functionCallingConfig: {\n     *           mode: FunctionCallingConfigMode.ANY,\n     *           allowedFunctionNames: ['controlLight'],\n     *         },\n     *       },\n     *     },\n     *   });\n     *  console.debug(JSON.stringify(response.functionCalls));\n     * ```\n     */\n    get functionCalls() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n            return undefined;\n        }\n        if (this.candidates && this.candidates.length > 1) {\n            console.warn('there are multiple candidates in the response, returning function calls from the first one.');\n        }\n        const functionCalls = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.functionCall).map((part) => part.functionCall).filter((functionCall) => functionCall !== undefined);\n        if ((functionCalls === null || functionCalls === void 0 ? void 0 : functionCalls.length) === 0) {\n            return undefined;\n        }\n        return functionCalls;\n    }\n    /**\n     * Returns the first executable code from the first candidate in the response.\n     *\n     * @remarks\n     * If there are multiple candidates in the response, the executable code from\n     * the first one will be returned.\n     * If there are no executable code in the response, undefined will be\n     * returned.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.generateContent({\n     *   model: 'gemini-2.0-flash',\n     *   contents:\n     *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'\n     *   config: {\n     *     tools: [{codeExecution: {}}],\n     *   },\n     * });\n     *\n     * console.debug(response.executableCode);\n     * ```\n     */\n    get executableCode() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n            return undefined;\n        }\n        if (this.candidates && this.candidates.length > 1) {\n            console.warn('there are multiple candidates in the response, returning executable code from the first one.');\n        }\n        const executableCode = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.executableCode).map((part) => part.executableCode).filter((executableCode) => executableCode !== undefined);\n        if ((executableCode === null || executableCode === void 0 ? void 0 : executableCode.length) === 0) {\n            return undefined;\n        }\n        return (_j = executableCode === null || executableCode === void 0 ? void 0 : executableCode[0]) === null || _j === void 0 ? void 0 : _j.code;\n    }\n    /**\n     * Returns the first code execution result from the first candidate in the response.\n     *\n     * @remarks\n     * If there are multiple candidates in the response, the code execution result from\n     * the first one will be returned.\n     * If there are no code execution result in the response, undefined will be returned.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.generateContent({\n     *   model: 'gemini-2.0-flash',\n     *   contents:\n     *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'\n     *   config: {\n     *     tools: [{codeExecution: {}}],\n     *   },\n     * });\n     *\n     * console.debug(response.codeExecutionResult);\n     * ```\n     */\n    get codeExecutionResult() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n            return undefined;\n        }\n        if (this.candidates && this.candidates.length > 1) {\n            console.warn('there are multiple candidates in the response, returning code execution result from the first one.');\n        }\n        const codeExecutionResult = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.codeExecutionResult).map((part) => part.codeExecutionResult).filter((codeExecutionResult) => codeExecutionResult !== undefined);\n        if ((codeExecutionResult === null || codeExecutionResult === void 0 ? void 0 : codeExecutionResult.length) === 0) {\n            return undefined;\n        }\n        return (_j = codeExecutionResult === null || codeExecutionResult === void 0 ? void 0 : codeExecutionResult[0]) === null || _j === void 0 ? void 0 : _j.output;\n    }\n}\n/** Response for the embed_content method. */\nclass EmbedContentResponse {\n}\n/** The output images response. */\nclass GenerateImagesResponse {\n}\n/** Response for the request to edit an image. */\nclass EditImageResponse {\n}\nclass UpscaleImageResponse {\n}\n/** The output images response. */\nclass RecontextImageResponse {\n}\n/** The output images response. */\nclass SegmentImageResponse {\n}\nclass ListModelsResponse {\n}\nclass DeleteModelResponse {\n}\n/** Response for counting tokens. */\nclass CountTokensResponse {\n}\n/** Response for computing tokens. */\nclass ComputeTokensResponse {\n}\n/** Response with generated videos. */\nclass GenerateVideosResponse {\n}\n/** A video generation operation. */\nclass GenerateVideosOperation {\n    /**\n     * Instantiates an Operation of the same type as the one being called with the fields set from the API response.\n     * @internal\n     */\n    _fromAPIResponse({ apiResponse, isVertexAI, }) {\n        const operation = new GenerateVideosOperation();\n        let response;\n        const op = apiResponse;\n        if (isVertexAI) {\n            response = generateVideosOperationFromVertex$1(op);\n        }\n        else {\n            response = generateVideosOperationFromMldev$1(op);\n        }\n        Object.assign(operation, response);\n        return operation;\n    }\n}\n/** Response for the list tuning jobs method. */\nclass ListTuningJobsResponse {\n}\n/** Empty response for caches.delete method. */\nclass DeleteCachedContentResponse {\n}\nclass ListCachedContentsResponse {\n}\n/** Response for the list files method. */\nclass ListFilesResponse {\n}\n/** Response for the create file method. */\nclass CreateFileResponse {\n}\n/** Response for the delete file method. */\nclass DeleteFileResponse {\n}\n/** Config for `inlined_responses` parameter. */\nclass InlinedResponse {\n}\n/** Config for `response` parameter. */\nclass SingleEmbedContentResponse {\n}\n/** Config for `inlined_embedding_responses` parameter. */\nclass InlinedEmbedContentResponse {\n}\n/** Config for batches.list return value. */\nclass ListBatchJobsResponse {\n}\n/** Represents a single response in a replay. */\nclass ReplayResponse {\n}\n/** A raw reference image.\n\nA raw reference image represents the base image to edit, provided by the user.\nIt can optionally be provided in addition to a mask reference image or\na style reference image. */\nclass RawReferenceImage {\n    /** Internal method to convert to ReferenceImageAPIInternal. */\n    toReferenceImageAPI() {\n        const referenceImageAPI = {\n            referenceType: 'REFERENCE_TYPE_RAW',\n            referenceImage: this.referenceImage,\n            referenceId: this.referenceId,\n        };\n        return referenceImageAPI;\n    }\n}\n/** A mask reference image.\n\nThis encapsulates either a mask image provided by the user and configs for\nthe user provided mask, or only config parameters for the model to generate\na mask.\n\nA mask image is an image whose non-zero values indicate where to edit the base\nimage. If the user provides a mask image, the mask must be in the same\ndimensions as the raw image. */\nclass MaskReferenceImage {\n    /** Internal method to convert to ReferenceImageAPIInternal. */\n    toReferenceImageAPI() {\n        const referenceImageAPI = {\n            referenceType: 'REFERENCE_TYPE_MASK',\n            referenceImage: this.referenceImage,\n            referenceId: this.referenceId,\n            maskImageConfig: this.config,\n        };\n        return referenceImageAPI;\n    }\n}\n/** A control reference image.\n\nThe image of the control reference image is either a control image provided\nby the user, or a regular image which the backend will use to generate a\ncontrol image of. In the case of the latter, the\nenable_control_image_computation field in the config should be set to True.\n\nA control image is an image that represents a sketch image of areas for the\nmodel to fill in based on the prompt. */\nclass ControlReferenceImage {\n    /** Internal method to convert to ReferenceImageAPIInternal. */\n    toReferenceImageAPI() {\n        const referenceImageAPI = {\n            referenceType: 'REFERENCE_TYPE_CONTROL',\n            referenceImage: this.referenceImage,\n            referenceId: this.referenceId,\n            controlImageConfig: this.config,\n        };\n        return referenceImageAPI;\n    }\n}\n/** A style reference image.\n\nThis encapsulates a style reference image provided by the user, and\nadditionally optional config parameters for the style reference image.\n\nA raw reference image can also be provided as a destination for the style to\nbe applied to. */\nclass StyleReferenceImage {\n    /** Internal method to convert to ReferenceImageAPIInternal. */\n    toReferenceImageAPI() {\n        const referenceImageAPI = {\n            referenceType: 'REFERENCE_TYPE_STYLE',\n            referenceImage: this.referenceImage,\n            referenceId: this.referenceId,\n            styleImageConfig: this.config,\n        };\n        return referenceImageAPI;\n    }\n}\n/** A subject reference image.\n\nThis encapsulates a subject reference image provided by the user, and\nadditionally optional config parameters for the subject reference image.\n\nA raw reference image can also be provided as a destination for the subject to\nbe applied to. */\nclass SubjectReferenceImage {\n    /* Internal method to convert to ReferenceImageAPIInternal. */\n    toReferenceImageAPI() {\n        const referenceImageAPI = {\n            referenceType: 'REFERENCE_TYPE_SUBJECT',\n            referenceImage: this.referenceImage,\n            referenceId: this.referenceId,\n            subjectImageConfig: this.config,\n        };\n        return referenceImageAPI;\n    }\n}\n/** A content reference image.\n\nA content reference image represents a subject to reference (ex. person,\nproduct, animal) provided by the user. It can optionally be provided in\naddition to a style reference image (ex. background, style reference). */\nclass ContentReferenceImage {\n    /** Internal method to convert to ReferenceImageAPIInternal. */\n    toReferenceImageAPI() {\n        const referenceImageAPI = {\n            referenceType: 'REFERENCE_TYPE_CONTENT',\n            referenceImage: this.referenceImage,\n            referenceId: this.referenceId,\n        };\n        return referenceImageAPI;\n    }\n}\n/** Response message for API call. */\nclass LiveServerMessage {\n    /**\n     * Returns the concatenation of all text parts from the server content if present.\n     *\n     * @remarks\n     * If there are non-text parts in the response, the concatenation of all text\n     * parts will be returned, and a warning will be logged.\n     */\n    get text() {\n        var _a, _b, _c;\n        let text = '';\n        let anyTextPartFound = false;\n        const nonTextParts = [];\n        for (const part of (_c = (_b = (_a = this.serverContent) === null || _a === void 0 ? void 0 : _a.modelTurn) === null || _b === void 0 ? void 0 : _b.parts) !== null && _c !== void 0 ? _c : []) {\n            for (const [fieldName, fieldValue] of Object.entries(part)) {\n                if (fieldName !== 'text' &&\n                    fieldName !== 'thought' &&\n                    fieldValue !== null) {\n                    nonTextParts.push(fieldName);\n                }\n            }\n            if (typeof part.text === 'string') {\n                if (typeof part.thought === 'boolean' && part.thought) {\n                    continue;\n                }\n                anyTextPartFound = true;\n                text += part.text;\n            }\n        }\n        if (nonTextParts.length > 0) {\n            console.warn(`there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`);\n        }\n        // part.text === '' is different from part.text is null\n        return anyTextPartFound ? text : undefined;\n    }\n    /**\n     * Returns the concatenation of all inline data parts from the server content if present.\n     *\n     * @remarks\n     * If there are non-inline data parts in the\n     * response, the concatenation of all inline data parts will be returned, and\n     * a warning will be logged.\n     */\n    get data() {\n        var _a, _b, _c;\n        let data = '';\n        const nonDataParts = [];\n        for (const part of (_c = (_b = (_a = this.serverContent) === null || _a === void 0 ? void 0 : _a.modelTurn) === null || _b === void 0 ? void 0 : _b.parts) !== null && _c !== void 0 ? _c : []) {\n            for (const [fieldName, fieldValue] of Object.entries(part)) {\n                if (fieldName !== 'inlineData' && fieldValue !== null) {\n                    nonDataParts.push(fieldName);\n                }\n            }\n            if (part.inlineData && typeof part.inlineData.data === 'string') {\n                data += atob(part.inlineData.data);\n            }\n        }\n        if (nonDataParts.length > 0) {\n            console.warn(`there are non-data parts ${nonDataParts} in the response, returning concatenation of all data parts. Please refer to the non data parts for a full response from model.`);\n        }\n        return data.length > 0 ? btoa(data) : undefined;\n    }\n}\n/** Client generated response to a `ToolCall` received from the server.\n\nIndividual `FunctionResponse` objects are matched to the respective\n`FunctionCall` objects by the `id` field.\n\nNote that in the unary and server-streaming GenerateContent APIs function\ncalling happens by exchanging the `Content` parts, while in the bidi\nGenerateContent APIs function calling happens over this dedicated set of\nmessages. */\nclass LiveClientToolResponse {\n}\n/** Parameters for sending tool responses to the live API. */\nclass LiveSendToolResponseParameters {\n    constructor() {\n        /** Tool responses to send to the session. */\n        this.functionResponses = [];\n    }\n}\n/** Response message for the LiveMusicClientMessage call. */\nclass LiveMusicServerMessage {\n    /**\n     * Returns the first audio chunk from the server content, if present.\n     *\n     * @remarks\n     * If there are no audio chunks in the response, undefined will be returned.\n     */\n    get audioChunk() {\n        if (this.serverContent &&\n            this.serverContent.audioChunks &&\n            this.serverContent.audioChunks.length > 0) {\n            return this.serverContent.audioChunks[0];\n        }\n        return undefined;\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction tModel(apiClient, model) {\n    if (!model || typeof model !== 'string') {\n        throw new Error('model is required and must be a string');\n    }\n    if (apiClient.isVertexAI()) {\n        if (model.startsWith('publishers/') ||\n            model.startsWith('projects/') ||\n            model.startsWith('models/')) {\n            return model;\n        }\n        else if (model.indexOf('/') >= 0) {\n            const parts = model.split('/', 2);\n            return `publishers/${parts[0]}/models/${parts[1]}`;\n        }\n        else {\n            return `publishers/google/models/${model}`;\n        }\n    }\n    else {\n        if (model.startsWith('models/') || model.startsWith('tunedModels/')) {\n            return model;\n        }\n        else {\n            return `models/${model}`;\n        }\n    }\n}\nfunction tCachesModel(apiClient, model) {\n    const transformedModel = tModel(apiClient, model);\n    if (!transformedModel) {\n        return '';\n    }\n    if (transformedModel.startsWith('publishers/') && apiClient.isVertexAI()) {\n        // vertex caches only support model name start with projects.\n        return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/${transformedModel}`;\n    }\n    else if (transformedModel.startsWith('models/') && apiClient.isVertexAI()) {\n        return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/publishers/google/${transformedModel}`;\n    }\n    else {\n        return transformedModel;\n    }\n}\nfunction tBlobs(blobs) {\n    if (Array.isArray(blobs)) {\n        return blobs.map((blob) => tBlob(blob));\n    }\n    else {\n        return [tBlob(blobs)];\n    }\n}\nfunction tBlob(blob) {\n    if (typeof blob === 'object' && blob !== null) {\n        return blob;\n    }\n    throw new Error(`Could not parse input as Blob. Unsupported blob type: ${typeof blob}`);\n}\nfunction tImageBlob(blob) {\n    const transformedBlob = tBlob(blob);\n    if (transformedBlob.mimeType &&\n        transformedBlob.mimeType.startsWith('image/')) {\n        return transformedBlob;\n    }\n    throw new Error(`Unsupported mime type: ${transformedBlob.mimeType}`);\n}\nfunction tAudioBlob(blob) {\n    const transformedBlob = tBlob(blob);\n    if (transformedBlob.mimeType &&\n        transformedBlob.mimeType.startsWith('audio/')) {\n        return transformedBlob;\n    }\n    throw new Error(`Unsupported mime type: ${transformedBlob.mimeType}`);\n}\nfunction tPart(origin) {\n    if (origin === null || origin === undefined) {\n        throw new Error('PartUnion is required');\n    }\n    if (typeof origin === 'object') {\n        return origin;\n    }\n    if (typeof origin === 'string') {\n        return { text: origin };\n    }\n    throw new Error(`Unsupported part type: ${typeof origin}`);\n}\nfunction tParts(origin) {\n    if (origin === null ||\n        origin === undefined ||\n        (Array.isArray(origin) && origin.length === 0)) {\n        throw new Error('PartListUnion is required');\n    }\n    if (Array.isArray(origin)) {\n        return origin.map((item) => tPart(item));\n    }\n    return [tPart(origin)];\n}\nfunction _isContent(origin) {\n    return (origin !== null &&\n        origin !== undefined &&\n        typeof origin === 'object' &&\n        'parts' in origin &&\n        Array.isArray(origin.parts));\n}\nfunction _isFunctionCallPart(origin) {\n    return (origin !== null &&\n        origin !== undefined &&\n        typeof origin === 'object' &&\n        'functionCall' in origin);\n}\nfunction _isFunctionResponsePart(origin) {\n    return (origin !== null &&\n        origin !== undefined &&\n        typeof origin === 'object' &&\n        'functionResponse' in origin);\n}\nfunction tContent(origin) {\n    if (origin === null || origin === undefined) {\n        throw new Error('ContentUnion is required');\n    }\n    if (_isContent(origin)) {\n        // _isContent is a utility function that checks if the\n        // origin is a Content.\n        return origin;\n    }\n    return {\n        role: 'user',\n        parts: tParts(origin),\n    };\n}\nfunction tContentsForEmbed(apiClient, origin) {\n    if (!origin) {\n        return [];\n    }\n    if (apiClient.isVertexAI() && Array.isArray(origin)) {\n        return origin.flatMap((item) => {\n            const content = tContent(item);\n            if (content.parts &&\n                content.parts.length > 0 &&\n                content.parts[0].text !== undefined) {\n                return [content.parts[0].text];\n            }\n            return [];\n        });\n    }\n    else if (apiClient.isVertexAI()) {\n        const content = tContent(origin);\n        if (content.parts &&\n            content.parts.length > 0 &&\n            content.parts[0].text !== undefined) {\n            return [content.parts[0].text];\n        }\n        return [];\n    }\n    if (Array.isArray(origin)) {\n        return origin.map((item) => tContent(item));\n    }\n    return [tContent(origin)];\n}\nfunction tContents(origin) {\n    if (origin === null ||\n        origin === undefined ||\n        (Array.isArray(origin) && origin.length === 0)) {\n        throw new Error('contents are required');\n    }\n    if (!Array.isArray(origin)) {\n        // If it's not an array, it's a single content or a single PartUnion.\n        if (_isFunctionCallPart(origin) || _isFunctionResponsePart(origin)) {\n            throw new Error('To specify functionCall or functionResponse parts, please wrap them in a Content object, specifying the role for them');\n        }\n        return [tContent(origin)];\n    }\n    const result = [];\n    const accumulatedParts = [];\n    const isContentArray = _isContent(origin[0]);\n    for (const item of origin) {\n        const isContent = _isContent(item);\n        if (isContent != isContentArray) {\n            throw new Error('Mixing Content and Parts is not supported, please group the parts into a the appropriate Content objects and specify the roles for them');\n        }\n        if (isContent) {\n            // `isContent` contains the result of _isContent, which is a utility\n            // function that checks if the item is a Content.\n            result.push(item);\n        }\n        else if (_isFunctionCallPart(item) || _isFunctionResponsePart(item)) {\n            throw new Error('To specify functionCall or functionResponse parts, please wrap them, and any other parts, in Content objects as appropriate, specifying the role for them');\n        }\n        else {\n            accumulatedParts.push(item);\n        }\n    }\n    if (!isContentArray) {\n        result.push({ role: 'user', parts: tParts(accumulatedParts) });\n    }\n    return result;\n}\n/*\nTransform the type field from an array of types to an array of anyOf fields.\nExample:\n  {type: ['STRING', 'NUMBER']}\nwill be transformed to\n  {anyOf: [{type: 'STRING'}, {type: 'NUMBER'}]}\n*/\nfunction flattenTypeArrayToAnyOf(typeList, resultingSchema) {\n    if (typeList.includes('null')) {\n        resultingSchema['nullable'] = true;\n    }\n    const listWithoutNull = typeList.filter((type) => type !== 'null');\n    if (listWithoutNull.length === 1) {\n        resultingSchema['type'] = Object.values(Type).includes(listWithoutNull[0].toUpperCase())\n            ? listWithoutNull[0].toUpperCase()\n            : Type.TYPE_UNSPECIFIED;\n    }\n    else {\n        resultingSchema['anyOf'] = [];\n        for (const i of listWithoutNull) {\n            resultingSchema['anyOf'].push({\n                'type': Object.values(Type).includes(i.toUpperCase())\n                    ? i.toUpperCase()\n                    : Type.TYPE_UNSPECIFIED,\n            });\n        }\n    }\n}\nfunction processJsonSchema(_jsonSchema) {\n    const genAISchema = {};\n    const schemaFieldNames = ['items'];\n    const listSchemaFieldNames = ['anyOf'];\n    const dictSchemaFieldNames = ['properties'];\n    if (_jsonSchema['type'] && _jsonSchema['anyOf']) {\n        throw new Error('type and anyOf cannot be both populated.');\n    }\n    /*\n    This is to handle the nullable array or object. The _jsonSchema will\n    be in the format of {anyOf: [{type: 'null'}, {type: 'object'}]}. The\n    logic is to check if anyOf has 2 elements and one of the element is null,\n    if so, the anyOf field is unnecessary, so we need to get rid of the anyOf\n    field and make the schema nullable. Then use the other element as the new\n    _jsonSchema for processing. This is because the backend doesn't have a null\n    type.\n    This has to be checked before we process any other fields.\n    For example:\n      const objectNullable = z.object({\n        nullableArray: z.array(z.string()).nullable(),\n      });\n    Will have the raw _jsonSchema as:\n    {\n      type: 'OBJECT',\n      properties: {\n          nullableArray: {\n             anyOf: [\n                {type: 'null'},\n                {\n                  type: 'array',\n                  items: {type: 'string'},\n                },\n              ],\n          }\n      },\n      required: [ 'nullableArray' ],\n    }\n    Will result in following schema compatible with Gemini API:\n      {\n        type: 'OBJECT',\n        properties: {\n           nullableArray: {\n              nullable: true,\n              type: 'ARRAY',\n              items: {type: 'string'},\n           }\n        },\n        required: [ 'nullableArray' ],\n      }\n    */\n    const incomingAnyOf = _jsonSchema['anyOf'];\n    if (incomingAnyOf != null && incomingAnyOf.length == 2) {\n        if (incomingAnyOf[0]['type'] === 'null') {\n            genAISchema['nullable'] = true;\n            _jsonSchema = incomingAnyOf[1];\n        }\n        else if (incomingAnyOf[1]['type'] === 'null') {\n            genAISchema['nullable'] = true;\n            _jsonSchema = incomingAnyOf[0];\n        }\n    }\n    if (_jsonSchema['type'] instanceof Array) {\n        flattenTypeArrayToAnyOf(_jsonSchema['type'], genAISchema);\n    }\n    for (const [fieldName, fieldValue] of Object.entries(_jsonSchema)) {\n        // Skip if the fieldvalue is undefined or null.\n        if (fieldValue == null) {\n            continue;\n        }\n        if (fieldName == 'type') {\n            if (fieldValue === 'null') {\n                throw new Error('type: null can not be the only possible type for the field.');\n            }\n            if (fieldValue instanceof Array) {\n                // we have already handled the type field with array of types in the\n                // beginning of this function.\n                continue;\n            }\n            genAISchema['type'] = Object.values(Type).includes(fieldValue.toUpperCase())\n                ? fieldValue.toUpperCase()\n                : Type.TYPE_UNSPECIFIED;\n        }\n        else if (schemaFieldNames.includes(fieldName)) {\n            genAISchema[fieldName] =\n                processJsonSchema(fieldValue);\n        }\n        else if (listSchemaFieldNames.includes(fieldName)) {\n            const listSchemaFieldValue = [];\n            for (const item of fieldValue) {\n                if (item['type'] == 'null') {\n                    genAISchema['nullable'] = true;\n                    continue;\n                }\n                listSchemaFieldValue.push(processJsonSchema(item));\n            }\n            genAISchema[fieldName] =\n                listSchemaFieldValue;\n        }\n        else if (dictSchemaFieldNames.includes(fieldName)) {\n            const dictSchemaFieldValue = {};\n            for (const [key, value] of Object.entries(fieldValue)) {\n                dictSchemaFieldValue[key] = processJsonSchema(value);\n            }\n            genAISchema[fieldName] =\n                dictSchemaFieldValue;\n        }\n        else {\n            // additionalProperties is not included in JSONSchema, skipping it.\n            if (fieldName === 'additionalProperties') {\n                continue;\n            }\n            genAISchema[fieldName] = fieldValue;\n        }\n    }\n    return genAISchema;\n}\n// we take the unknown in the schema field because we want enable user to pass\n// the output of major schema declaration tools without casting. Tools such as\n// zodToJsonSchema, typebox, zodToJsonSchema function can return JsonSchema7Type\n// or object, see details in\n// https://github.com/StefanTerdell/zod-to-json-schema/blob/70525efe555cd226691e093d171370a3b10921d1/src/zodToJsonSchema.ts#L7\n// typebox can return unknown, see details in\n// https://github.com/sinclairzx81/typebox/blob/5a5431439f7d5ca6b494d0d18fbfd7b1a356d67c/src/type/create/type.ts#L35\n// Note: proper json schemas with the $schema field set never arrive to this\n// transformer. Schemas with $schema are routed to the equivalent API json\n// schema field.\nfunction tSchema(schema) {\n    return processJsonSchema(schema);\n}\nfunction tSpeechConfig(speechConfig) {\n    if (typeof speechConfig === 'object') {\n        return speechConfig;\n    }\n    else if (typeof speechConfig === 'string') {\n        return {\n            voiceConfig: {\n                prebuiltVoiceConfig: {\n                    voiceName: speechConfig,\n                },\n            },\n        };\n    }\n    else {\n        throw new Error(`Unsupported speechConfig type: ${typeof speechConfig}`);\n    }\n}\nfunction tLiveSpeechConfig(speechConfig) {\n    if ('multiSpeakerVoiceConfig' in speechConfig) {\n        throw new Error('multiSpeakerVoiceConfig is not supported in the live API.');\n    }\n    return speechConfig;\n}\nfunction tTool(tool) {\n    if (tool.functionDeclarations) {\n        for (const functionDeclaration of tool.functionDeclarations) {\n            if (functionDeclaration.parameters) {\n                if (!Object.keys(functionDeclaration.parameters).includes('$schema')) {\n                    functionDeclaration.parameters = processJsonSchema(functionDeclaration.parameters);\n                }\n                else {\n                    if (!functionDeclaration.parametersJsonSchema) {\n                        functionDeclaration.parametersJsonSchema =\n                            functionDeclaration.parameters;\n                        delete functionDeclaration.parameters;\n                    }\n                }\n            }\n            if (functionDeclaration.response) {\n                if (!Object.keys(functionDeclaration.response).includes('$schema')) {\n                    functionDeclaration.response = processJsonSchema(functionDeclaration.response);\n                }\n                else {\n                    if (!functionDeclaration.responseJsonSchema) {\n                        functionDeclaration.responseJsonSchema =\n                            functionDeclaration.response;\n                        delete functionDeclaration.response;\n                    }\n                }\n            }\n        }\n    }\n    return tool;\n}\nfunction tTools(tools) {\n    // Check if the incoming type is defined.\n    if (tools === undefined || tools === null) {\n        throw new Error('tools is required');\n    }\n    if (!Array.isArray(tools)) {\n        throw new Error('tools is required and must be an array of Tools');\n    }\n    const result = [];\n    for (const tool of tools) {\n        result.push(tool);\n    }\n    return result;\n}\n/**\n * Prepends resource name with project, location, resource_prefix if needed.\n *\n * @param client The API client.\n * @param resourceName The resource name.\n * @param resourcePrefix The resource prefix.\n * @param splitsAfterPrefix The number of splits after the prefix.\n * @returns The completed resource name.\n *\n * Examples:\n *\n * ```\n * resource_name = '123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = True\n * client.project = 'bar'\n * client.location = 'us-west1'\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns: 'projects/bar/locations/us-west1/cachedContents/123'\n * ```\n *\n * ```\n * resource_name = 'projects/foo/locations/us-central1/cachedContents/123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = True\n * client.project = 'bar'\n * client.location = 'us-west1'\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns: 'projects/foo/locations/us-central1/cachedContents/123'\n * ```\n *\n * ```\n * resource_name = '123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = False\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns 'cachedContents/123'\n * ```\n *\n * ```\n * resource_name = 'some/wrong/cachedContents/resource/name/123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = False\n * # client.vertexai = True\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * -> 'some/wrong/resource/name/123'\n * ```\n */\nfunction resourceName(client, resourceName, resourcePrefix, splitsAfterPrefix = 1) {\n    const shouldAppendPrefix = !resourceName.startsWith(`${resourcePrefix}/`) &&\n        resourceName.split('/').length === splitsAfterPrefix;\n    if (client.isVertexAI()) {\n        if (resourceName.startsWith('projects/')) {\n            return resourceName;\n        }\n        else if (resourceName.startsWith('locations/')) {\n            return `projects/${client.getProject()}/${resourceName}`;\n        }\n        else if (resourceName.startsWith(`${resourcePrefix}/`)) {\n            return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourceName}`;\n        }\n        else if (shouldAppendPrefix) {\n            return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourcePrefix}/${resourceName}`;\n        }\n        else {\n            return resourceName;\n        }\n    }\n    if (shouldAppendPrefix) {\n        return `${resourcePrefix}/${resourceName}`;\n    }\n    return resourceName;\n}\nfunction tCachedContentName(apiClient, name) {\n    if (typeof name !== 'string') {\n        throw new Error('name must be a string');\n    }\n    return resourceName(apiClient, name, 'cachedContents');\n}\nfunction tTuningJobStatus(status) {\n    switch (status) {\n        case 'STATE_UNSPECIFIED':\n            return 'JOB_STATE_UNSPECIFIED';\n        case 'CREATING':\n            return 'JOB_STATE_RUNNING';\n        case 'ACTIVE':\n            return 'JOB_STATE_SUCCEEDED';\n        case 'FAILED':\n            return 'JOB_STATE_FAILED';\n        default:\n            return status;\n    }\n}\nfunction tBytes(fromImageBytes) {\n    return tBytes$1(fromImageBytes);\n}\nfunction _isFile(origin) {\n    return (origin !== null &&\n        origin !== undefined &&\n        typeof origin === 'object' &&\n        'name' in origin);\n}\nfunction isGeneratedVideo(origin) {\n    return (origin !== null &&\n        origin !== undefined &&\n        typeof origin === 'object' &&\n        'video' in origin);\n}\nfunction isVideo(origin) {\n    return (origin !== null &&\n        origin !== undefined &&\n        typeof origin === 'object' &&\n        'uri' in origin);\n}\nfunction tFileName(fromName) {\n    var _a;\n    let name;\n    if (_isFile(fromName)) {\n        name = fromName.name;\n    }\n    if (isVideo(fromName)) {\n        name = fromName.uri;\n        if (name === undefined) {\n            return undefined;\n        }\n    }\n    if (isGeneratedVideo(fromName)) {\n        name = (_a = fromName.video) === null || _a === void 0 ? void 0 : _a.uri;\n        if (name === undefined) {\n            return undefined;\n        }\n    }\n    if (typeof fromName === 'string') {\n        name = fromName;\n    }\n    if (name === undefined) {\n        throw new Error('Could not extract file name from the provided input.');\n    }\n    if (name.startsWith('https://')) {\n        const suffix = name.split('files/')[1];\n        const match = suffix.match(/[a-z0-9]+/);\n        if (match === null) {\n            throw new Error(`Could not extract file name from URI ${name}`);\n        }\n        name = match[0];\n    }\n    else if (name.startsWith('files/')) {\n        name = name.split('files/')[1];\n    }\n    return name;\n}\nfunction tModelsUrl(apiClient, baseModels) {\n    let res;\n    if (apiClient.isVertexAI()) {\n        res = baseModels ? 'publishers/google/models' : 'models';\n    }\n    else {\n        res = baseModels ? 'models' : 'tunedModels';\n    }\n    return res;\n}\nfunction tExtractModels(response) {\n    for (const key of ['models', 'tunedModels', 'publisherModels']) {\n        if (hasField(response, key)) {\n            return response[key];\n        }\n    }\n    return [];\n}\nfunction hasField(data, fieldName) {\n    return data !== null && typeof data === 'object' && fieldName in data;\n}\nfunction mcpToGeminiTool(mcpTool, config = {}) {\n    const mcpToolSchema = mcpTool;\n    const functionDeclaration = {\n        name: mcpToolSchema['name'],\n        description: mcpToolSchema['description'],\n        parametersJsonSchema: mcpToolSchema['inputSchema'],\n    };\n    if (mcpToolSchema['outputSchema']) {\n        functionDeclaration['responseJsonSchema'] = mcpToolSchema['outputSchema'];\n    }\n    if (config.behavior) {\n        functionDeclaration['behavior'] = config.behavior;\n    }\n    const geminiTool = {\n        functionDeclarations: [\n            functionDeclaration,\n        ],\n    };\n    return geminiTool;\n}\n/**\n * Converts a list of MCP tools to a single Gemini tool with a list of function\n * declarations.\n */\nfunction mcpToolsToGeminiTool(mcpTools, config = {}) {\n    const functionDeclarations = [];\n    const toolNames = new Set();\n    for (const mcpTool of mcpTools) {\n        const mcpToolName = mcpTool.name;\n        if (toolNames.has(mcpToolName)) {\n            throw new Error(`Duplicate function name ${mcpToolName} found in MCP tools. Please ensure function names are unique.`);\n        }\n        toolNames.add(mcpToolName);\n        const geminiTool = mcpToGeminiTool(mcpTool, config);\n        if (geminiTool.functionDeclarations) {\n            functionDeclarations.push(...geminiTool.functionDeclarations);\n        }\n    }\n    return { functionDeclarations: functionDeclarations };\n}\n// Transforms a source input into a BatchJobSource object with validation.\nfunction tBatchJobSource(client, src) {\n    let sourceObj;\n    if (typeof src === 'string') {\n        if (client.isVertexAI()) {\n            if (src.startsWith('gs://')) {\n                sourceObj = { format: 'jsonl', gcsUri: [src] };\n            }\n            else if (src.startsWith('bq://')) {\n                sourceObj = { format: 'bigquery', bigqueryUri: src };\n            }\n            else {\n                throw new Error(`Unsupported string source for Vertex AI: ${src}`);\n            }\n        }\n        else {\n            // MLDEV\n            if (src.startsWith('files/')) {\n                sourceObj = { fileName: src }; // Default to fileName for string input\n            }\n            else {\n                throw new Error(`Unsupported string source for Gemini API: ${src}`);\n            }\n        }\n    }\n    else if (Array.isArray(src)) {\n        if (client.isVertexAI()) {\n            throw new Error('InlinedRequest[] is not supported in Vertex AI.');\n        }\n        sourceObj = { inlinedRequests: src };\n    }\n    else {\n        // It's already a BatchJobSource object\n        sourceObj = src;\n    }\n    // Validation logic\n    const vertexSourcesCount = [sourceObj.gcsUri, sourceObj.bigqueryUri].filter(Boolean).length;\n    const mldevSourcesCount = [\n        sourceObj.inlinedRequests,\n        sourceObj.fileName,\n    ].filter(Boolean).length;\n    if (client.isVertexAI()) {\n        if (mldevSourcesCount > 0 || vertexSourcesCount !== 1) {\n            throw new Error('Exactly one of `gcsUri` or `bigqueryUri` must be set for Vertex AI.');\n        }\n    }\n    else {\n        // MLDEV\n        if (vertexSourcesCount > 0 || mldevSourcesCount !== 1) {\n            throw new Error('Exactly one of `inlinedRequests`, `fileName`, ' +\n                'must be set for Gemini API.');\n        }\n    }\n    return sourceObj;\n}\nfunction tBatchJobDestination(dest) {\n    if (typeof dest !== 'string') {\n        return dest;\n    }\n    const destString = dest;\n    if (destString.startsWith('gs://')) {\n        return {\n            format: 'jsonl',\n            gcsUri: destString,\n        };\n    }\n    else if (destString.startsWith('bq://')) {\n        return {\n            format: 'bigquery',\n            bigqueryUri: destString,\n        };\n    }\n    else {\n        throw new Error(`Unsupported destination: ${destString}`);\n    }\n}\nfunction tRecvBatchJobDestination(dest) {\n    // Ensure dest is a non-null object before proceeding.\n    if (typeof dest !== 'object' || dest === null) {\n        // If the input is not an object, it cannot be a valid BatchJobDestination\n        // based on the operations performed. Return it cast, or handle as an error.\n        // Casting an empty object might be a safe default.\n        return {};\n    }\n    // Cast to Record<string, unknown> to allow string property access.\n    const obj = dest;\n    // Safely access nested properties.\n    const inlineResponsesVal = obj['inlinedResponses'];\n    if (typeof inlineResponsesVal !== 'object' || inlineResponsesVal === null) {\n        return dest;\n    }\n    const inlineResponsesObj = inlineResponsesVal;\n    const responsesArray = inlineResponsesObj['inlinedResponses'];\n    if (!Array.isArray(responsesArray) || responsesArray.length === 0) {\n        return dest;\n    }\n    // Check if any response has the 'embedding' property.\n    let hasEmbedding = false;\n    for (const responseItem of responsesArray) {\n        if (typeof responseItem !== 'object' || responseItem === null) {\n            continue;\n        }\n        const responseItemObj = responseItem;\n        const responseVal = responseItemObj['response'];\n        if (typeof responseVal !== 'object' || responseVal === null) {\n            continue;\n        }\n        const responseObj = responseVal;\n        // Check for the existence of the 'embedding' key.\n        if (responseObj['embedding'] !== undefined) {\n            hasEmbedding = true;\n            break;\n        }\n    }\n    // Perform the transformation if an embedding was found.\n    if (hasEmbedding) {\n        obj['inlinedEmbedContentResponses'] = obj['inlinedResponses'];\n        delete obj['inlinedResponses'];\n    }\n    // Cast the (potentially) modified object to the target type.\n    return dest;\n}\nfunction tBatchJobName(apiClient, name) {\n    const nameString = name;\n    if (!apiClient.isVertexAI()) {\n        const mldevPattern = /batches\\/[^/]+$/;\n        if (mldevPattern.test(nameString)) {\n            return nameString.split('/').pop();\n        }\n        else {\n            throw new Error(`Invalid batch job name: ${nameString}.`);\n        }\n    }\n    const vertexPattern = /^projects\\/[^/]+\\/locations\\/[^/]+\\/batchPredictionJobs\\/[^/]+$/;\n    if (vertexPattern.test(nameString)) {\n        return nameString.split('/').pop();\n    }\n    else if (/^\\d+$/.test(nameString)) {\n        return nameString;\n    }\n    else {\n        throw new Error(`Invalid batch job name: ${nameString}.`);\n    }\n}\nfunction tJobState(state) {\n    const stateString = state;\n    if (stateString === 'BATCH_STATE_UNSPECIFIED') {\n        return 'JOB_STATE_UNSPECIFIED';\n    }\n    else if (stateString === 'BATCH_STATE_PENDING') {\n        return 'JOB_STATE_PENDING';\n    }\n    else if (stateString === 'BATCH_STATE_RUNNING') {\n        return 'JOB_STATE_RUNNING';\n    }\n    else if (stateString === 'BATCH_STATE_SUCCEEDED') {\n        return 'JOB_STATE_SUCCEEDED';\n    }\n    else if (stateString === 'BATCH_STATE_FAILED') {\n        return 'JOB_STATE_FAILED';\n    }\n    else if (stateString === 'BATCH_STATE_CANCELLED') {\n        return 'JOB_STATE_CANCELLED';\n    }\n    else if (stateString === 'BATCH_STATE_EXPIRED') {\n        return 'JOB_STATE_EXPIRED';\n    }\n    else {\n        return stateString;\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction batchJobDestinationFromMldev(fromObject) {\n    const toObject = {};\n    const fromFileName = getValueByPath(fromObject, ['responsesFile']);\n    if (fromFileName != null) {\n        setValueByPath(toObject, ['fileName'], fromFileName);\n    }\n    const fromInlinedResponses = getValueByPath(fromObject, [\n        'inlinedResponses',\n        'inlinedResponses',\n    ]);\n    if (fromInlinedResponses != null) {\n        let transformedList = fromInlinedResponses;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return inlinedResponseFromMldev(item);\n            });\n        }\n        setValueByPath(toObject, ['inlinedResponses'], transformedList);\n    }\n    const fromInlinedEmbedContentResponses = getValueByPath(fromObject, [\n        'inlinedEmbedContentResponses',\n        'inlinedResponses',\n    ]);\n    if (fromInlinedEmbedContentResponses != null) {\n        let transformedList = fromInlinedEmbedContentResponses;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['inlinedEmbedContentResponses'], transformedList);\n    }\n    return toObject;\n}\nfunction batchJobDestinationFromVertex(fromObject) {\n    const toObject = {};\n    const fromFormat = getValueByPath(fromObject, ['predictionsFormat']);\n    if (fromFormat != null) {\n        setValueByPath(toObject, ['format'], fromFormat);\n    }\n    const fromGcsUri = getValueByPath(fromObject, [\n        'gcsDestination',\n        'outputUriPrefix',\n    ]);\n    if (fromGcsUri != null) {\n        setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n    }\n    const fromBigqueryUri = getValueByPath(fromObject, [\n        'bigqueryDestination',\n        'outputUri',\n    ]);\n    if (fromBigqueryUri != null) {\n        setValueByPath(toObject, ['bigqueryUri'], fromBigqueryUri);\n    }\n    return toObject;\n}\nfunction batchJobDestinationToVertex(fromObject) {\n    const toObject = {};\n    const fromFormat = getValueByPath(fromObject, ['format']);\n    if (fromFormat != null) {\n        setValueByPath(toObject, ['predictionsFormat'], fromFormat);\n    }\n    const fromGcsUri = getValueByPath(fromObject, ['gcsUri']);\n    if (fromGcsUri != null) {\n        setValueByPath(toObject, ['gcsDestination', 'outputUriPrefix'], fromGcsUri);\n    }\n    const fromBigqueryUri = getValueByPath(fromObject, ['bigqueryUri']);\n    if (fromBigqueryUri != null) {\n        setValueByPath(toObject, ['bigqueryDestination', 'outputUri'], fromBigqueryUri);\n    }\n    if (getValueByPath(fromObject, ['fileName']) !== undefined) {\n        throw new Error('fileName parameter is not supported in Vertex AI.');\n    }\n    if (getValueByPath(fromObject, ['inlinedResponses']) !== undefined) {\n        throw new Error('inlinedResponses parameter is not supported in Vertex AI.');\n    }\n    if (getValueByPath(fromObject, ['inlinedEmbedContentResponses']) !==\n        undefined) {\n        throw new Error('inlinedEmbedContentResponses parameter is not supported in Vertex AI.');\n    }\n    return toObject;\n}\nfunction batchJobFromMldev(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromDisplayName = getValueByPath(fromObject, [\n        'metadata',\n        'displayName',\n    ]);\n    if (fromDisplayName != null) {\n        setValueByPath(toObject, ['displayName'], fromDisplayName);\n    }\n    const fromState = getValueByPath(fromObject, ['metadata', 'state']);\n    if (fromState != null) {\n        setValueByPath(toObject, ['state'], tJobState(fromState));\n    }\n    const fromCreateTime = getValueByPath(fromObject, [\n        'metadata',\n        'createTime',\n    ]);\n    if (fromCreateTime != null) {\n        setValueByPath(toObject, ['createTime'], fromCreateTime);\n    }\n    const fromEndTime = getValueByPath(fromObject, [\n        'metadata',\n        'endTime',\n    ]);\n    if (fromEndTime != null) {\n        setValueByPath(toObject, ['endTime'], fromEndTime);\n    }\n    const fromUpdateTime = getValueByPath(fromObject, [\n        'metadata',\n        'updateTime',\n    ]);\n    if (fromUpdateTime != null) {\n        setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n    }\n    const fromModel = getValueByPath(fromObject, ['metadata', 'model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['model'], fromModel);\n    }\n    const fromDest = getValueByPath(fromObject, ['metadata', 'output']);\n    if (fromDest != null) {\n        setValueByPath(toObject, ['dest'], batchJobDestinationFromMldev(tRecvBatchJobDestination(fromDest)));\n    }\n    return toObject;\n}\nfunction batchJobFromVertex(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (fromDisplayName != null) {\n        setValueByPath(toObject, ['displayName'], fromDisplayName);\n    }\n    const fromState = getValueByPath(fromObject, ['state']);\n    if (fromState != null) {\n        setValueByPath(toObject, ['state'], tJobState(fromState));\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n    if (fromCreateTime != null) {\n        setValueByPath(toObject, ['createTime'], fromCreateTime);\n    }\n    const fromStartTime = getValueByPath(fromObject, ['startTime']);\n    if (fromStartTime != null) {\n        setValueByPath(toObject, ['startTime'], fromStartTime);\n    }\n    const fromEndTime = getValueByPath(fromObject, ['endTime']);\n    if (fromEndTime != null) {\n        setValueByPath(toObject, ['endTime'], fromEndTime);\n    }\n    const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n    if (fromUpdateTime != null) {\n        setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n    }\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['model'], fromModel);\n    }\n    const fromSrc = getValueByPath(fromObject, ['inputConfig']);\n    if (fromSrc != null) {\n        setValueByPath(toObject, ['src'], batchJobSourceFromVertex(fromSrc));\n    }\n    const fromDest = getValueByPath(fromObject, ['outputConfig']);\n    if (fromDest != null) {\n        setValueByPath(toObject, ['dest'], batchJobDestinationFromVertex(tRecvBatchJobDestination(fromDest)));\n    }\n    return toObject;\n}\nfunction batchJobSourceFromVertex(fromObject) {\n    const toObject = {};\n    const fromFormat = getValueByPath(fromObject, ['instancesFormat']);\n    if (fromFormat != null) {\n        setValueByPath(toObject, ['format'], fromFormat);\n    }\n    const fromGcsUri = getValueByPath(fromObject, ['gcsSource', 'uris']);\n    if (fromGcsUri != null) {\n        setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n    }\n    const fromBigqueryUri = getValueByPath(fromObject, [\n        'bigquerySource',\n        'inputUri',\n    ]);\n    if (fromBigqueryUri != null) {\n        setValueByPath(toObject, ['bigqueryUri'], fromBigqueryUri);\n    }\n    return toObject;\n}\nfunction batchJobSourceToMldev(apiClient, fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['format']) !== undefined) {\n        throw new Error('format parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['gcsUri']) !== undefined) {\n        throw new Error('gcsUri parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['bigqueryUri']) !== undefined) {\n        throw new Error('bigqueryUri parameter is not supported in Gemini API.');\n    }\n    const fromFileName = getValueByPath(fromObject, ['fileName']);\n    if (fromFileName != null) {\n        setValueByPath(toObject, ['fileName'], fromFileName);\n    }\n    const fromInlinedRequests = getValueByPath(fromObject, [\n        'inlinedRequests',\n    ]);\n    if (fromInlinedRequests != null) {\n        let transformedList = fromInlinedRequests;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return inlinedRequestToMldev(apiClient, item);\n            });\n        }\n        setValueByPath(toObject, ['requests', 'requests'], transformedList);\n    }\n    return toObject;\n}\nfunction batchJobSourceToVertex(fromObject) {\n    const toObject = {};\n    const fromFormat = getValueByPath(fromObject, ['format']);\n    if (fromFormat != null) {\n        setValueByPath(toObject, ['instancesFormat'], fromFormat);\n    }\n    const fromGcsUri = getValueByPath(fromObject, ['gcsUri']);\n    if (fromGcsUri != null) {\n        setValueByPath(toObject, ['gcsSource', 'uris'], fromGcsUri);\n    }\n    const fromBigqueryUri = getValueByPath(fromObject, ['bigqueryUri']);\n    if (fromBigqueryUri != null) {\n        setValueByPath(toObject, ['bigquerySource', 'inputUri'], fromBigqueryUri);\n    }\n    if (getValueByPath(fromObject, ['fileName']) !== undefined) {\n        throw new Error('fileName parameter is not supported in Vertex AI.');\n    }\n    if (getValueByPath(fromObject, ['inlinedRequests']) !== undefined) {\n        throw new Error('inlinedRequests parameter is not supported in Vertex AI.');\n    }\n    return toObject;\n}\nfunction blobToMldev$4(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromData = getValueByPath(fromObject, ['data']);\n    if (fromData != null) {\n        setValueByPath(toObject, ['data'], fromData);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction cancelBatchJobParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tBatchJobName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction cancelBatchJobParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tBatchJobName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction candidateFromMldev$1(fromObject) {\n    const toObject = {};\n    const fromContent = getValueByPath(fromObject, ['content']);\n    if (fromContent != null) {\n        setValueByPath(toObject, ['content'], fromContent);\n    }\n    const fromCitationMetadata = getValueByPath(fromObject, [\n        'citationMetadata',\n    ]);\n    if (fromCitationMetadata != null) {\n        setValueByPath(toObject, ['citationMetadata'], citationMetadataFromMldev$1(fromCitationMetadata));\n    }\n    const fromTokenCount = getValueByPath(fromObject, ['tokenCount']);\n    if (fromTokenCount != null) {\n        setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n    }\n    const fromFinishReason = getValueByPath(fromObject, ['finishReason']);\n    if (fromFinishReason != null) {\n        setValueByPath(toObject, ['finishReason'], fromFinishReason);\n    }\n    const fromUrlContextMetadata = getValueByPath(fromObject, [\n        'urlContextMetadata',\n    ]);\n    if (fromUrlContextMetadata != null) {\n        setValueByPath(toObject, ['urlContextMetadata'], fromUrlContextMetadata);\n    }\n    const fromAvgLogprobs = getValueByPath(fromObject, ['avgLogprobs']);\n    if (fromAvgLogprobs != null) {\n        setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);\n    }\n    const fromGroundingMetadata = getValueByPath(fromObject, [\n        'groundingMetadata',\n    ]);\n    if (fromGroundingMetadata != null) {\n        setValueByPath(toObject, ['groundingMetadata'], fromGroundingMetadata);\n    }\n    const fromIndex = getValueByPath(fromObject, ['index']);\n    if (fromIndex != null) {\n        setValueByPath(toObject, ['index'], fromIndex);\n    }\n    const fromLogprobsResult = getValueByPath(fromObject, [\n        'logprobsResult',\n    ]);\n    if (fromLogprobsResult != null) {\n        setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);\n    }\n    const fromSafetyRatings = getValueByPath(fromObject, [\n        'safetyRatings',\n    ]);\n    if (fromSafetyRatings != null) {\n        let transformedList = fromSafetyRatings;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['safetyRatings'], transformedList);\n    }\n    return toObject;\n}\nfunction citationMetadataFromMldev$1(fromObject) {\n    const toObject = {};\n    const fromCitations = getValueByPath(fromObject, ['citationSources']);\n    if (fromCitations != null) {\n        let transformedList = fromCitations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['citations'], transformedList);\n    }\n    return toObject;\n}\nfunction contentToMldev$4(fromObject) {\n    const toObject = {};\n    const fromParts = getValueByPath(fromObject, ['parts']);\n    if (fromParts != null) {\n        let transformedList = fromParts;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return partToMldev$4(item);\n            });\n        }\n        setValueByPath(toObject, ['parts'], transformedList);\n    }\n    const fromRole = getValueByPath(fromObject, ['role']);\n    if (fromRole != null) {\n        setValueByPath(toObject, ['role'], fromRole);\n    }\n    return toObject;\n}\nfunction createBatchJobConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (parentObject !== undefined && fromDisplayName != null) {\n        setValueByPath(parentObject, ['batch', 'displayName'], fromDisplayName);\n    }\n    if (getValueByPath(fromObject, ['dest']) !== undefined) {\n        throw new Error('dest parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction createBatchJobConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (parentObject !== undefined && fromDisplayName != null) {\n        setValueByPath(parentObject, ['displayName'], fromDisplayName);\n    }\n    const fromDest = getValueByPath(fromObject, ['dest']);\n    if (parentObject !== undefined && fromDest != null) {\n        setValueByPath(parentObject, ['outputConfig'], batchJobDestinationToVertex(tBatchJobDestination(fromDest)));\n    }\n    return toObject;\n}\nfunction createBatchJobParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromSrc = getValueByPath(fromObject, ['src']);\n    if (fromSrc != null) {\n        setValueByPath(toObject, ['batch', 'inputConfig'], batchJobSourceToMldev(apiClient, tBatchJobSource(apiClient, fromSrc)));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        createBatchJobConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction createBatchJobParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['model'], tModel(apiClient, fromModel));\n    }\n    const fromSrc = getValueByPath(fromObject, ['src']);\n    if (fromSrc != null) {\n        setValueByPath(toObject, ['inputConfig'], batchJobSourceToVertex(tBatchJobSource(apiClient, fromSrc)));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        createBatchJobConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction createEmbeddingsBatchJobConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (parentObject !== undefined && fromDisplayName != null) {\n        setValueByPath(parentObject, ['batch', 'displayName'], fromDisplayName);\n    }\n    return toObject;\n}\nfunction createEmbeddingsBatchJobParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromSrc = getValueByPath(fromObject, ['src']);\n    if (fromSrc != null) {\n        setValueByPath(toObject, ['batch', 'inputConfig'], embeddingsBatchJobSourceToMldev(apiClient, fromSrc));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        createEmbeddingsBatchJobConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction deleteBatchJobParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tBatchJobName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction deleteBatchJobParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tBatchJobName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction deleteResourceJobFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromDone = getValueByPath(fromObject, ['done']);\n    if (fromDone != null) {\n        setValueByPath(toObject, ['done'], fromDone);\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    return toObject;\n}\nfunction deleteResourceJobFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromDone = getValueByPath(fromObject, ['done']);\n    if (fromDone != null) {\n        setValueByPath(toObject, ['done'], fromDone);\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    return toObject;\n}\nfunction embedContentBatchToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContentsForEmbed(apiClient, fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['requests[]', 'request', 'content'], transformedList);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        setValueByPath(toObject, ['_self'], embedContentConfigToMldev$1(fromConfig, toObject));\n        moveValueByPath(toObject, { 'requests[].*': 'requests[].request.*' });\n    }\n    return toObject;\n}\nfunction embedContentConfigToMldev$1(fromObject, parentObject) {\n    const toObject = {};\n    const fromTaskType = getValueByPath(fromObject, ['taskType']);\n    if (parentObject !== undefined && fromTaskType != null) {\n        setValueByPath(parentObject, ['requests[]', 'taskType'], fromTaskType);\n    }\n    const fromTitle = getValueByPath(fromObject, ['title']);\n    if (parentObject !== undefined && fromTitle != null) {\n        setValueByPath(parentObject, ['requests[]', 'title'], fromTitle);\n    }\n    const fromOutputDimensionality = getValueByPath(fromObject, [\n        'outputDimensionality',\n    ]);\n    if (parentObject !== undefined && fromOutputDimensionality != null) {\n        setValueByPath(parentObject, ['requests[]', 'outputDimensionality'], fromOutputDimensionality);\n    }\n    if (getValueByPath(fromObject, ['mimeType']) !== undefined) {\n        throw new Error('mimeType parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['autoTruncate']) !== undefined) {\n        throw new Error('autoTruncate parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction embeddingsBatchJobSourceToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromFileName = getValueByPath(fromObject, ['fileName']);\n    if (fromFileName != null) {\n        setValueByPath(toObject, ['file_name'], fromFileName);\n    }\n    const fromInlinedRequests = getValueByPath(fromObject, [\n        'inlinedRequests',\n    ]);\n    if (fromInlinedRequests != null) {\n        setValueByPath(toObject, ['requests'], embedContentBatchToMldev(apiClient, fromInlinedRequests));\n    }\n    return toObject;\n}\nfunction fileDataToMldev$4(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromFileUri = getValueByPath(fromObject, ['fileUri']);\n    if (fromFileUri != null) {\n        setValueByPath(toObject, ['fileUri'], fromFileUri);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction generateContentConfigToMldev$1(apiClient, fromObject, parentObject) {\n    const toObject = {};\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['systemInstruction'], contentToMldev$4(tContent(fromSystemInstruction)));\n    }\n    const fromTemperature = getValueByPath(fromObject, ['temperature']);\n    if (fromTemperature != null) {\n        setValueByPath(toObject, ['temperature'], fromTemperature);\n    }\n    const fromTopP = getValueByPath(fromObject, ['topP']);\n    if (fromTopP != null) {\n        setValueByPath(toObject, ['topP'], fromTopP);\n    }\n    const fromTopK = getValueByPath(fromObject, ['topK']);\n    if (fromTopK != null) {\n        setValueByPath(toObject, ['topK'], fromTopK);\n    }\n    const fromCandidateCount = getValueByPath(fromObject, [\n        'candidateCount',\n    ]);\n    if (fromCandidateCount != null) {\n        setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n    }\n    const fromMaxOutputTokens = getValueByPath(fromObject, [\n        'maxOutputTokens',\n    ]);\n    if (fromMaxOutputTokens != null) {\n        setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n    }\n    const fromStopSequences = getValueByPath(fromObject, [\n        'stopSequences',\n    ]);\n    if (fromStopSequences != null) {\n        setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n    }\n    const fromResponseLogprobs = getValueByPath(fromObject, [\n        'responseLogprobs',\n    ]);\n    if (fromResponseLogprobs != null) {\n        setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n    }\n    const fromLogprobs = getValueByPath(fromObject, ['logprobs']);\n    if (fromLogprobs != null) {\n        setValueByPath(toObject, ['logprobs'], fromLogprobs);\n    }\n    const fromPresencePenalty = getValueByPath(fromObject, [\n        'presencePenalty',\n    ]);\n    if (fromPresencePenalty != null) {\n        setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n    }\n    const fromFrequencyPenalty = getValueByPath(fromObject, [\n        'frequencyPenalty',\n    ]);\n    if (fromFrequencyPenalty != null) {\n        setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (fromSeed != null) {\n        setValueByPath(toObject, ['seed'], fromSeed);\n    }\n    const fromResponseMimeType = getValueByPath(fromObject, [\n        'responseMimeType',\n    ]);\n    if (fromResponseMimeType != null) {\n        setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n    }\n    const fromResponseSchema = getValueByPath(fromObject, [\n        'responseSchema',\n    ]);\n    if (fromResponseSchema != null) {\n        setValueByPath(toObject, ['responseSchema'], tSchema(fromResponseSchema));\n    }\n    const fromResponseJsonSchema = getValueByPath(fromObject, [\n        'responseJsonSchema',\n    ]);\n    if (fromResponseJsonSchema != null) {\n        setValueByPath(toObject, ['responseJsonSchema'], fromResponseJsonSchema);\n    }\n    if (getValueByPath(fromObject, ['routingConfig']) !== undefined) {\n        throw new Error('routingConfig parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['modelSelectionConfig']) !== undefined) {\n        throw new Error('modelSelectionConfig parameter is not supported in Gemini API.');\n    }\n    const fromSafetySettings = getValueByPath(fromObject, [\n        'safetySettings',\n    ]);\n    if (parentObject !== undefined && fromSafetySettings != null) {\n        let transformedList = fromSafetySettings;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return safetySettingToMldev$1(item);\n            });\n        }\n        setValueByPath(parentObject, ['safetySettings'], transformedList);\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = tTools(fromTools);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToMldev$4(tTool(item));\n            });\n        }\n        setValueByPath(parentObject, ['tools'], transformedList);\n    }\n    const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n    if (parentObject !== undefined && fromToolConfig != null) {\n        setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n    }\n    if (getValueByPath(fromObject, ['labels']) !== undefined) {\n        throw new Error('labels parameter is not supported in Gemini API.');\n    }\n    const fromCachedContent = getValueByPath(fromObject, [\n        'cachedContent',\n    ]);\n    if (parentObject !== undefined && fromCachedContent != null) {\n        setValueByPath(parentObject, ['cachedContent'], tCachedContentName(apiClient, fromCachedContent));\n    }\n    const fromResponseModalities = getValueByPath(fromObject, [\n        'responseModalities',\n    ]);\n    if (fromResponseModalities != null) {\n        setValueByPath(toObject, ['responseModalities'], fromResponseModalities);\n    }\n    const fromMediaResolution = getValueByPath(fromObject, [\n        'mediaResolution',\n    ]);\n    if (fromMediaResolution != null) {\n        setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n    }\n    const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n    if (fromSpeechConfig != null) {\n        setValueByPath(toObject, ['speechConfig'], tSpeechConfig(fromSpeechConfig));\n    }\n    if (getValueByPath(fromObject, ['audioTimestamp']) !== undefined) {\n        throw new Error('audioTimestamp parameter is not supported in Gemini API.');\n    }\n    const fromThinkingConfig = getValueByPath(fromObject, [\n        'thinkingConfig',\n    ]);\n    if (fromThinkingConfig != null) {\n        setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n    }\n    const fromImageConfig = getValueByPath(fromObject, ['imageConfig']);\n    if (fromImageConfig != null) {\n        setValueByPath(toObject, ['imageConfig'], fromImageConfig);\n    }\n    return toObject;\n}\nfunction generateContentResponseFromMldev$1(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromCandidates = getValueByPath(fromObject, ['candidates']);\n    if (fromCandidates != null) {\n        let transformedList = fromCandidates;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return candidateFromMldev$1(item);\n            });\n        }\n        setValueByPath(toObject, ['candidates'], transformedList);\n    }\n    const fromModelVersion = getValueByPath(fromObject, ['modelVersion']);\n    if (fromModelVersion != null) {\n        setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n    }\n    const fromPromptFeedback = getValueByPath(fromObject, [\n        'promptFeedback',\n    ]);\n    if (fromPromptFeedback != null) {\n        setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n    }\n    const fromResponseId = getValueByPath(fromObject, ['responseId']);\n    if (fromResponseId != null) {\n        setValueByPath(toObject, ['responseId'], fromResponseId);\n    }\n    const fromUsageMetadata = getValueByPath(fromObject, [\n        'usageMetadata',\n    ]);\n    if (fromUsageMetadata != null) {\n        setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n    }\n    return toObject;\n}\nfunction getBatchJobParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tBatchJobName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction getBatchJobParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tBatchJobName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction googleMapsToMldev$4(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['authConfig']) !== undefined) {\n        throw new Error('authConfig parameter is not supported in Gemini API.');\n    }\n    const fromEnableWidget = getValueByPath(fromObject, ['enableWidget']);\n    if (fromEnableWidget != null) {\n        setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n    }\n    return toObject;\n}\nfunction googleSearchToMldev$4(fromObject) {\n    const toObject = {};\n    const fromTimeRangeFilter = getValueByPath(fromObject, [\n        'timeRangeFilter',\n    ]);\n    if (fromTimeRangeFilter != null) {\n        setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n    }\n    if (getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n        throw new Error('excludeDomains parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction inlinedRequestToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['request', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContents(fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return contentToMldev$4(item);\n            });\n        }\n        setValueByPath(toObject, ['request', 'contents'], transformedList);\n    }\n    const fromMetadata = getValueByPath(fromObject, ['metadata']);\n    if (fromMetadata != null) {\n        setValueByPath(toObject, ['metadata'], fromMetadata);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        setValueByPath(toObject, ['request', 'generationConfig'], generateContentConfigToMldev$1(apiClient, fromConfig, getValueByPath(toObject, ['request'], {})));\n    }\n    return toObject;\n}\nfunction inlinedResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromResponse = getValueByPath(fromObject, ['response']);\n    if (fromResponse != null) {\n        setValueByPath(toObject, ['response'], generateContentResponseFromMldev$1(fromResponse));\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    return toObject;\n}\nfunction listBatchJobsConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    if (getValueByPath(fromObject, ['filter']) !== undefined) {\n        throw new Error('filter parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction listBatchJobsConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    const fromFilter = getValueByPath(fromObject, ['filter']);\n    if (parentObject !== undefined && fromFilter != null) {\n        setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n    }\n    return toObject;\n}\nfunction listBatchJobsParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listBatchJobsConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listBatchJobsParametersToVertex(fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listBatchJobsConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listBatchJobsResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromBatchJobs = getValueByPath(fromObject, ['operations']);\n    if (fromBatchJobs != null) {\n        let transformedList = fromBatchJobs;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return batchJobFromMldev(item);\n            });\n        }\n        setValueByPath(toObject, ['batchJobs'], transformedList);\n    }\n    return toObject;\n}\nfunction listBatchJobsResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromBatchJobs = getValueByPath(fromObject, [\n        'batchPredictionJobs',\n    ]);\n    if (fromBatchJobs != null) {\n        let transformedList = fromBatchJobs;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return batchJobFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['batchJobs'], transformedList);\n    }\n    return toObject;\n}\nfunction partToMldev$4(fromObject) {\n    const toObject = {};\n    const fromVideoMetadata = getValueByPath(fromObject, [\n        'videoMetadata',\n    ]);\n    if (fromVideoMetadata != null) {\n        setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n    }\n    const fromThought = getValueByPath(fromObject, ['thought']);\n    if (fromThought != null) {\n        setValueByPath(toObject, ['thought'], fromThought);\n    }\n    const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n    if (fromInlineData != null) {\n        setValueByPath(toObject, ['inlineData'], blobToMldev$4(fromInlineData));\n    }\n    const fromFileData = getValueByPath(fromObject, ['fileData']);\n    if (fromFileData != null) {\n        setValueByPath(toObject, ['fileData'], fileDataToMldev$4(fromFileData));\n    }\n    const fromThoughtSignature = getValueByPath(fromObject, [\n        'thoughtSignature',\n    ]);\n    if (fromThoughtSignature != null) {\n        setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n    }\n    const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n    if (fromFunctionCall != null) {\n        setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n    }\n    const fromCodeExecutionResult = getValueByPath(fromObject, [\n        'codeExecutionResult',\n    ]);\n    if (fromCodeExecutionResult != null) {\n        setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n    }\n    const fromExecutableCode = getValueByPath(fromObject, [\n        'executableCode',\n    ]);\n    if (fromExecutableCode != null) {\n        setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n    }\n    const fromFunctionResponse = getValueByPath(fromObject, [\n        'functionResponse',\n    ]);\n    if (fromFunctionResponse != null) {\n        setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n    }\n    const fromText = getValueByPath(fromObject, ['text']);\n    if (fromText != null) {\n        setValueByPath(toObject, ['text'], fromText);\n    }\n    return toObject;\n}\nfunction safetySettingToMldev$1(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['method']) !== undefined) {\n        throw new Error('method parameter is not supported in Gemini API.');\n    }\n    const fromCategory = getValueByPath(fromObject, ['category']);\n    if (fromCategory != null) {\n        setValueByPath(toObject, ['category'], fromCategory);\n    }\n    const fromThreshold = getValueByPath(fromObject, ['threshold']);\n    if (fromThreshold != null) {\n        setValueByPath(toObject, ['threshold'], fromThreshold);\n    }\n    return toObject;\n}\nfunction toolToMldev$4(fromObject) {\n    const toObject = {};\n    const fromFunctionDeclarations = getValueByPath(fromObject, [\n        'functionDeclarations',\n    ]);\n    if (fromFunctionDeclarations != null) {\n        let transformedList = fromFunctionDeclarations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['functionDeclarations'], transformedList);\n    }\n    if (getValueByPath(fromObject, ['retrieval']) !== undefined) {\n        throw new Error('retrieval parameter is not supported in Gemini API.');\n    }\n    const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n    if (fromGoogleSearch != null) {\n        setValueByPath(toObject, ['googleSearch'], googleSearchToMldev$4(fromGoogleSearch));\n    }\n    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [\n        'googleSearchRetrieval',\n    ]);\n    if (fromGoogleSearchRetrieval != null) {\n        setValueByPath(toObject, ['googleSearchRetrieval'], fromGoogleSearchRetrieval);\n    }\n    if (getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined) {\n        throw new Error('enterpriseWebSearch parameter is not supported in Gemini API.');\n    }\n    const fromGoogleMaps = getValueByPath(fromObject, ['googleMaps']);\n    if (fromGoogleMaps != null) {\n        setValueByPath(toObject, ['googleMaps'], googleMapsToMldev$4(fromGoogleMaps));\n    }\n    const fromUrlContext = getValueByPath(fromObject, ['urlContext']);\n    if (fromUrlContext != null) {\n        setValueByPath(toObject, ['urlContext'], fromUrlContext);\n    }\n    const fromComputerUse = getValueByPath(fromObject, ['computerUse']);\n    if (fromComputerUse != null) {\n        setValueByPath(toObject, ['computerUse'], fromComputerUse);\n    }\n    const fromCodeExecution = getValueByPath(fromObject, [\n        'codeExecution',\n    ]);\n    if (fromCodeExecution != null) {\n        setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n    }\n    return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nvar PagedItem;\n(function (PagedItem) {\n    PagedItem[\"PAGED_ITEM_BATCH_JOBS\"] = \"batchJobs\";\n    PagedItem[\"PAGED_ITEM_MODELS\"] = \"models\";\n    PagedItem[\"PAGED_ITEM_TUNING_JOBS\"] = \"tuningJobs\";\n    PagedItem[\"PAGED_ITEM_FILES\"] = \"files\";\n    PagedItem[\"PAGED_ITEM_CACHED_CONTENTS\"] = \"cachedContents\";\n})(PagedItem || (PagedItem = {}));\n/**\n * Pager class for iterating through paginated results.\n */\nclass Pager {\n    constructor(name, request, response, params) {\n        this.pageInternal = [];\n        this.paramsInternal = {};\n        this.requestInternal = request;\n        this.init(name, response, params);\n    }\n    init(name, response, params) {\n        var _a, _b;\n        this.nameInternal = name;\n        this.pageInternal = response[this.nameInternal] || [];\n        this.sdkHttpResponseInternal = response === null || response === void 0 ? void 0 : response.sdkHttpResponse;\n        this.idxInternal = 0;\n        let requestParams = { config: {} };\n        if (!params || Object.keys(params).length === 0) {\n            requestParams = { config: {} };\n        }\n        else if (typeof params === 'object') {\n            requestParams = Object.assign({}, params);\n        }\n        else {\n            requestParams = params;\n        }\n        if (requestParams['config']) {\n            requestParams['config']['pageToken'] = response['nextPageToken'];\n        }\n        this.paramsInternal = requestParams;\n        this.pageInternalSize =\n            (_b = (_a = requestParams['config']) === null || _a === void 0 ? void 0 : _a['pageSize']) !== null && _b !== void 0 ? _b : this.pageInternal.length;\n    }\n    initNextPage(response) {\n        this.init(this.nameInternal, response, this.paramsInternal);\n    }\n    /**\n     * Returns the current page, which is a list of items.\n     *\n     * @remarks\n     * The first page is retrieved when the pager is created. The returned list of\n     * items could be a subset of the entire list.\n     */\n    get page() {\n        return this.pageInternal;\n    }\n    /**\n     * Returns the type of paged item (for example, ``batch_jobs``).\n     */\n    get name() {\n        return this.nameInternal;\n    }\n    /**\n     * Returns the length of the page fetched each time by this pager.\n     *\n     * @remarks\n     * The number of items in the page is less than or equal to the page length.\n     */\n    get pageSize() {\n        return this.pageInternalSize;\n    }\n    /**\n     * Returns the headers of the API response.\n     */\n    get sdkHttpResponse() {\n        return this.sdkHttpResponseInternal;\n    }\n    /**\n     * Returns the parameters when making the API request for the next page.\n     *\n     * @remarks\n     * Parameters contain a set of optional configs that can be\n     * used to customize the API request. For example, the `pageToken` parameter\n     * contains the token to request the next page.\n     */\n    get params() {\n        return this.paramsInternal;\n    }\n    /**\n     * Returns the total number of items in the current page.\n     */\n    get pageLength() {\n        return this.pageInternal.length;\n    }\n    /**\n     * Returns the item at the given index.\n     */\n    getItem(index) {\n        return this.pageInternal[index];\n    }\n    /**\n     * Returns an async iterator that support iterating through all items\n     * retrieved from the API.\n     *\n     * @remarks\n     * The iterator will automatically fetch the next page if there are more items\n     * to fetch from the API.\n     *\n     * @example\n     *\n     * ```ts\n     * const pager = await ai.files.list({config: {pageSize: 10}});\n     * for await (const file of pager) {\n     *   console.log(file.name);\n     * }\n     * ```\n     */\n    [Symbol.asyncIterator]() {\n        return {\n            next: async () => {\n                if (this.idxInternal >= this.pageLength) {\n                    if (this.hasNextPage()) {\n                        await this.nextPage();\n                    }\n                    else {\n                        return { value: undefined, done: true };\n                    }\n                }\n                const item = this.getItem(this.idxInternal);\n                this.idxInternal += 1;\n                return { value: item, done: false };\n            },\n            return: async () => {\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    /**\n     * Fetches the next page of items. This makes a new API request.\n     *\n     * @throws {Error} If there are no more pages to fetch.\n     *\n     * @example\n     *\n     * ```ts\n     * const pager = await ai.files.list({config: {pageSize: 10}});\n     * let page = pager.page;\n     * while (true) {\n     *   for (const file of page) {\n     *     console.log(file.name);\n     *   }\n     *   if (!pager.hasNextPage()) {\n     *     break;\n     *   }\n     *   page = await pager.nextPage();\n     * }\n     * ```\n     */\n    async nextPage() {\n        if (!this.hasNextPage()) {\n            throw new Error('No more pages to fetch.');\n        }\n        const response = await this.requestInternal(this.params);\n        this.initNextPage(response);\n        return this.page;\n    }\n    /**\n     * Returns true if there are more pages to fetch from the API.\n     */\n    hasNextPage() {\n        var _a;\n        if (((_a = this.params['config']) === null || _a === void 0 ? void 0 : _a['pageToken']) !== undefined) {\n            return true;\n        }\n        return false;\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Batches extends BaseModule {\n    constructor(apiClient) {\n        super();\n        this.apiClient = apiClient;\n        /**\n         * Create batch job.\n         *\n         * @param params - The parameters for create batch job request.\n         * @return The created batch job.\n         *\n         * @example\n         * ```ts\n         * const response = await ai.batches.create({\n         *   model: 'gemini-2.0-flash',\n         *   src: {gcsUri: 'gs://bucket/path/to/file.jsonl', format: 'jsonl'},\n         *   config: {\n         *     dest: {gcsUri: 'gs://bucket/path/output/directory', format: 'jsonl'},\n         *   }\n         * });\n         * console.log(response);\n         * ```\n         */\n        this.create = async (params) => {\n            if (this.apiClient.isVertexAI()) {\n                // Format destination if not provided\n                // Cast params.src as Vertex AI path does not handle InlinedRequest[]\n                params.config = this.formatDestination(params.src, params.config);\n            }\n            return this.createInternal(params);\n        };\n        /**\n         * **Experimental** Creates an embedding batch job.\n         *\n         * @param params - The parameters for create embedding batch job request.\n         * @return The created batch job.\n         *\n         * @example\n         * ```ts\n         * const response = await ai.batches.createEmbeddings({\n         *   model: 'text-embedding-004',\n         *   src: {fileName: 'files/my_embedding_input'},\n         * });\n         * console.log(response);\n         * ```\n         */\n        this.createEmbeddings = async (params) => {\n            console.warn('batches.createEmbeddings() is experimental and may change without notice.');\n            if (this.apiClient.isVertexAI()) {\n                throw new Error('Vertex AI does not support batches.createEmbeddings.');\n            }\n            return this.createEmbeddingsInternal(params);\n        };\n        /**\n         * Lists batch job configurations.\n         *\n         * @param params - The parameters for the list request.\n         * @return The paginated results of the list of batch jobs.\n         *\n         * @example\n         * ```ts\n         * const batchJobs = await ai.batches.list({config: {'pageSize': 2}});\n         * for await (const batchJob of batchJobs) {\n         *   console.log(batchJob);\n         * }\n         * ```\n         */\n        this.list = async (params = {}) => {\n            return new Pager(PagedItem.PAGED_ITEM_BATCH_JOBS, (x) => this.listInternal(x), await this.listInternal(params), params);\n        };\n    }\n    // Helper function to handle inlined generate content requests\n    createInlinedGenerateContentRequest(params) {\n        const body = createBatchJobParametersToMldev(this.apiClient, // Use instance apiClient\n        params);\n        const urlParams = body['_url'];\n        const path = formatMap('{model}:batchGenerateContent', urlParams);\n        const batch = body['batch'];\n        const inputConfig = batch['inputConfig'];\n        const requestsWrapper = inputConfig['requests'];\n        const requests = requestsWrapper['requests'];\n        const newRequests = [];\n        for (const request of requests) {\n            const requestDict = Object.assign({}, request); // Clone\n            if (requestDict['systemInstruction']) {\n                const systemInstructionValue = requestDict['systemInstruction'];\n                delete requestDict['systemInstruction'];\n                const requestContent = requestDict['request'];\n                requestContent['systemInstruction'] = systemInstructionValue;\n                requestDict['request'] = requestContent;\n            }\n            newRequests.push(requestDict);\n        }\n        requestsWrapper['requests'] = newRequests;\n        delete body['config'];\n        delete body['_url'];\n        delete body['_query'];\n        return { path, body };\n    }\n    // Helper function to get the first GCS URI\n    getGcsUri(src) {\n        if (typeof src === 'string') {\n            return src.startsWith('gs://') ? src : undefined;\n        }\n        if (!Array.isArray(src) && src.gcsUri && src.gcsUri.length > 0) {\n            return src.gcsUri[0];\n        }\n        return undefined;\n    }\n    // Helper function to get the BigQuery URI\n    getBigqueryUri(src) {\n        if (typeof src === 'string') {\n            return src.startsWith('bq://') ? src : undefined;\n        }\n        if (!Array.isArray(src)) {\n            return src.bigqueryUri;\n        }\n        return undefined;\n    }\n    // Function to format the destination configuration for Vertex AI\n    formatDestination(src, config) {\n        const newConfig = config ? Object.assign({}, config) : {};\n        const timestampStr = Date.now().toString();\n        if (!newConfig.displayName) {\n            newConfig.displayName = `genaiBatchJob_${timestampStr}`;\n        }\n        if (newConfig.dest === undefined) {\n            const gcsUri = this.getGcsUri(src);\n            const bigqueryUri = this.getBigqueryUri(src);\n            if (gcsUri) {\n                if (gcsUri.endsWith('.jsonl')) {\n                    // For .jsonl files, remove suffix and add /dest\n                    newConfig.dest = `${gcsUri.slice(0, -6)}/dest`;\n                }\n                else {\n                    // Fallback for other GCS URIs\n                    newConfig.dest = `${gcsUri}_dest_${timestampStr}`;\n                }\n            }\n            else if (bigqueryUri) {\n                newConfig.dest = `${bigqueryUri}_dest_${timestampStr}`;\n            }\n            else {\n                throw new Error('Unsupported source for Vertex AI: No GCS or BigQuery URI found.');\n            }\n        }\n        return newConfig;\n    }\n    /**\n     * Internal method to create batch job.\n     *\n     * @param params - The parameters for create batch job request.\n     * @return The created batch job.\n     *\n     */\n    async createInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = createBatchJobParametersToVertex(this.apiClient, params);\n            path = formatMap('batchPredictionJobs', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = batchJobFromVertex(apiResponse);\n                return resp;\n            });\n        }\n        else {\n            const body = createBatchJobParametersToMldev(this.apiClient, params);\n            path = formatMap('{model}:batchGenerateContent', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = batchJobFromMldev(apiResponse);\n                return resp;\n            });\n        }\n    }\n    /**\n     * Internal method to create batch job.\n     *\n     * @param params - The parameters for create batch job request.\n     * @return The created batch job.\n     *\n     */\n    async createEmbeddingsInternal(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('This method is only supported by the Gemini Developer API.');\n        }\n        else {\n            const body = createEmbeddingsBatchJobParametersToMldev(this.apiClient, params);\n            path = formatMap('{model}:asyncBatchEmbedContent', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = batchJobFromMldev(apiResponse);\n                return resp;\n            });\n        }\n    }\n    /**\n     * Gets batch job configurations.\n     *\n     * @param params - The parameters for the get request.\n     * @return The batch job.\n     *\n     * @example\n     * ```ts\n     * await ai.batches.get({name: '...'}); // The server-generated resource name.\n     * ```\n     */\n    async get(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = getBatchJobParametersToVertex(this.apiClient, params);\n            path = formatMap('batchPredictionJobs/{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = batchJobFromVertex(apiResponse);\n                return resp;\n            });\n        }\n        else {\n            const body = getBatchJobParametersToMldev(this.apiClient, params);\n            path = formatMap('batches/{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = batchJobFromMldev(apiResponse);\n                return resp;\n            });\n        }\n    }\n    /**\n     * Cancels a batch job.\n     *\n     * @param params - The parameters for the cancel request.\n     * @return The empty response returned by the API.\n     *\n     * @example\n     * ```ts\n     * await ai.batches.cancel({name: '...'}); // The server-generated resource name.\n     * ```\n     */\n    async cancel(params) {\n        var _a, _b, _c, _d;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = cancelBatchJobParametersToVertex(this.apiClient, params);\n            path = formatMap('batchPredictionJobs/{name}:cancel', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            await this.apiClient.request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            });\n        }\n        else {\n            const body = cancelBatchJobParametersToMldev(this.apiClient, params);\n            path = formatMap('batches/{name}:cancel', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            await this.apiClient.request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            });\n        }\n    }\n    async listInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = listBatchJobsParametersToVertex(params);\n            path = formatMap('batchPredictionJobs', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listBatchJobsResponseFromVertex(apiResponse);\n                const typedResp = new ListBatchJobsResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = listBatchJobsParametersToMldev(params);\n            path = formatMap('batches', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listBatchJobsResponseFromMldev(apiResponse);\n                const typedResp = new ListBatchJobsResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Deletes a batch job.\n     *\n     * @param params - The parameters for the delete request.\n     * @return The empty response returned by the API.\n     *\n     * @example\n     * ```ts\n     * await ai.batches.delete({name: '...'}); // The server-generated resource name.\n     * ```\n     */\n    async delete(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = deleteBatchJobParametersToVertex(this.apiClient, params);\n            path = formatMap('batchPredictionJobs/{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'DELETE',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = deleteResourceJobFromVertex(apiResponse);\n                return resp;\n            });\n        }\n        else {\n            const body = deleteBatchJobParametersToMldev(this.apiClient, params);\n            path = formatMap('batches/{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'DELETE',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = deleteResourceJobFromMldev(apiResponse);\n                return resp;\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction blobToMldev$3(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromData = getValueByPath(fromObject, ['data']);\n    if (fromData != null) {\n        setValueByPath(toObject, ['data'], fromData);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction contentToMldev$3(fromObject) {\n    const toObject = {};\n    const fromParts = getValueByPath(fromObject, ['parts']);\n    if (fromParts != null) {\n        let transformedList = fromParts;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return partToMldev$3(item);\n            });\n        }\n        setValueByPath(toObject, ['parts'], transformedList);\n    }\n    const fromRole = getValueByPath(fromObject, ['role']);\n    if (fromRole != null) {\n        setValueByPath(toObject, ['role'], fromRole);\n    }\n    return toObject;\n}\nfunction createCachedContentConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromTtl = getValueByPath(fromObject, ['ttl']);\n    if (parentObject !== undefined && fromTtl != null) {\n        setValueByPath(parentObject, ['ttl'], fromTtl);\n    }\n    const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n    if (parentObject !== undefined && fromExpireTime != null) {\n        setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n    }\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (parentObject !== undefined && fromDisplayName != null) {\n        setValueByPath(parentObject, ['displayName'], fromDisplayName);\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (parentObject !== undefined && fromContents != null) {\n        let transformedList = tContents(fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return contentToMldev$3(item);\n            });\n        }\n        setValueByPath(parentObject, ['contents'], transformedList);\n    }\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['systemInstruction'], contentToMldev$3(tContent(fromSystemInstruction)));\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = fromTools;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToMldev$3(item);\n            });\n        }\n        setValueByPath(parentObject, ['tools'], transformedList);\n    }\n    const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n    if (parentObject !== undefined && fromToolConfig != null) {\n        setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n    }\n    if (getValueByPath(fromObject, ['kmsKeyName']) !== undefined) {\n        throw new Error('kmsKeyName parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction createCachedContentConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromTtl = getValueByPath(fromObject, ['ttl']);\n    if (parentObject !== undefined && fromTtl != null) {\n        setValueByPath(parentObject, ['ttl'], fromTtl);\n    }\n    const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n    if (parentObject !== undefined && fromExpireTime != null) {\n        setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n    }\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (parentObject !== undefined && fromDisplayName != null) {\n        setValueByPath(parentObject, ['displayName'], fromDisplayName);\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (parentObject !== undefined && fromContents != null) {\n        let transformedList = tContents(fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(parentObject, ['contents'], transformedList);\n    }\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['systemInstruction'], tContent(fromSystemInstruction));\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = fromTools;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToVertex$2(item);\n            });\n        }\n        setValueByPath(parentObject, ['tools'], transformedList);\n    }\n    const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n    if (parentObject !== undefined && fromToolConfig != null) {\n        setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n    }\n    const fromKmsKeyName = getValueByPath(fromObject, ['kmsKeyName']);\n    if (parentObject !== undefined && fromKmsKeyName != null) {\n        setValueByPath(parentObject, ['encryption_spec', 'kmsKeyName'], fromKmsKeyName);\n    }\n    return toObject;\n}\nfunction createCachedContentParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['model'], tCachesModel(apiClient, fromModel));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        createCachedContentConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction createCachedContentParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['model'], tCachesModel(apiClient, fromModel));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        createCachedContentConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction deleteCachedContentParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction deleteCachedContentParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction deleteCachedContentResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    return toObject;\n}\nfunction deleteCachedContentResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    return toObject;\n}\nfunction fileDataToMldev$3(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromFileUri = getValueByPath(fromObject, ['fileUri']);\n    if (fromFileUri != null) {\n        setValueByPath(toObject, ['fileUri'], fromFileUri);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction functionDeclarationToVertex$2(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['behavior']) !== undefined) {\n        throw new Error('behavior parameter is not supported in Vertex AI.');\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (fromDescription != null) {\n        setValueByPath(toObject, ['description'], fromDescription);\n    }\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromParameters = getValueByPath(fromObject, ['parameters']);\n    if (fromParameters != null) {\n        setValueByPath(toObject, ['parameters'], fromParameters);\n    }\n    const fromParametersJsonSchema = getValueByPath(fromObject, [\n        'parametersJsonSchema',\n    ]);\n    if (fromParametersJsonSchema != null) {\n        setValueByPath(toObject, ['parametersJsonSchema'], fromParametersJsonSchema);\n    }\n    const fromResponse = getValueByPath(fromObject, ['response']);\n    if (fromResponse != null) {\n        setValueByPath(toObject, ['response'], fromResponse);\n    }\n    const fromResponseJsonSchema = getValueByPath(fromObject, [\n        'responseJsonSchema',\n    ]);\n    if (fromResponseJsonSchema != null) {\n        setValueByPath(toObject, ['responseJsonSchema'], fromResponseJsonSchema);\n    }\n    return toObject;\n}\nfunction getCachedContentParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction getCachedContentParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n    }\n    return toObject;\n}\nfunction googleMapsToMldev$3(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['authConfig']) !== undefined) {\n        throw new Error('authConfig parameter is not supported in Gemini API.');\n    }\n    const fromEnableWidget = getValueByPath(fromObject, ['enableWidget']);\n    if (fromEnableWidget != null) {\n        setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n    }\n    return toObject;\n}\nfunction googleSearchToMldev$3(fromObject) {\n    const toObject = {};\n    const fromTimeRangeFilter = getValueByPath(fromObject, [\n        'timeRangeFilter',\n    ]);\n    if (fromTimeRangeFilter != null) {\n        setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n    }\n    if (getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n        throw new Error('excludeDomains parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction listCachedContentsConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    return toObject;\n}\nfunction listCachedContentsConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    return toObject;\n}\nfunction listCachedContentsParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listCachedContentsConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listCachedContentsParametersToVertex(fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listCachedContentsConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listCachedContentsResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromCachedContents = getValueByPath(fromObject, [\n        'cachedContents',\n    ]);\n    if (fromCachedContents != null) {\n        let transformedList = fromCachedContents;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['cachedContents'], transformedList);\n    }\n    return toObject;\n}\nfunction listCachedContentsResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromCachedContents = getValueByPath(fromObject, [\n        'cachedContents',\n    ]);\n    if (fromCachedContents != null) {\n        let transformedList = fromCachedContents;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['cachedContents'], transformedList);\n    }\n    return toObject;\n}\nfunction partToMldev$3(fromObject) {\n    const toObject = {};\n    const fromVideoMetadata = getValueByPath(fromObject, [\n        'videoMetadata',\n    ]);\n    if (fromVideoMetadata != null) {\n        setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n    }\n    const fromThought = getValueByPath(fromObject, ['thought']);\n    if (fromThought != null) {\n        setValueByPath(toObject, ['thought'], fromThought);\n    }\n    const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n    if (fromInlineData != null) {\n        setValueByPath(toObject, ['inlineData'], blobToMldev$3(fromInlineData));\n    }\n    const fromFileData = getValueByPath(fromObject, ['fileData']);\n    if (fromFileData != null) {\n        setValueByPath(toObject, ['fileData'], fileDataToMldev$3(fromFileData));\n    }\n    const fromThoughtSignature = getValueByPath(fromObject, [\n        'thoughtSignature',\n    ]);\n    if (fromThoughtSignature != null) {\n        setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n    }\n    const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n    if (fromFunctionCall != null) {\n        setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n    }\n    const fromCodeExecutionResult = getValueByPath(fromObject, [\n        'codeExecutionResult',\n    ]);\n    if (fromCodeExecutionResult != null) {\n        setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n    }\n    const fromExecutableCode = getValueByPath(fromObject, [\n        'executableCode',\n    ]);\n    if (fromExecutableCode != null) {\n        setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n    }\n    const fromFunctionResponse = getValueByPath(fromObject, [\n        'functionResponse',\n    ]);\n    if (fromFunctionResponse != null) {\n        setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n    }\n    const fromText = getValueByPath(fromObject, ['text']);\n    if (fromText != null) {\n        setValueByPath(toObject, ['text'], fromText);\n    }\n    return toObject;\n}\nfunction toolToMldev$3(fromObject) {\n    const toObject = {};\n    const fromFunctionDeclarations = getValueByPath(fromObject, [\n        'functionDeclarations',\n    ]);\n    if (fromFunctionDeclarations != null) {\n        let transformedList = fromFunctionDeclarations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['functionDeclarations'], transformedList);\n    }\n    if (getValueByPath(fromObject, ['retrieval']) !== undefined) {\n        throw new Error('retrieval parameter is not supported in Gemini API.');\n    }\n    const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n    if (fromGoogleSearch != null) {\n        setValueByPath(toObject, ['googleSearch'], googleSearchToMldev$3(fromGoogleSearch));\n    }\n    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [\n        'googleSearchRetrieval',\n    ]);\n    if (fromGoogleSearchRetrieval != null) {\n        setValueByPath(toObject, ['googleSearchRetrieval'], fromGoogleSearchRetrieval);\n    }\n    if (getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined) {\n        throw new Error('enterpriseWebSearch parameter is not supported in Gemini API.');\n    }\n    const fromGoogleMaps = getValueByPath(fromObject, ['googleMaps']);\n    if (fromGoogleMaps != null) {\n        setValueByPath(toObject, ['googleMaps'], googleMapsToMldev$3(fromGoogleMaps));\n    }\n    const fromUrlContext = getValueByPath(fromObject, ['urlContext']);\n    if (fromUrlContext != null) {\n        setValueByPath(toObject, ['urlContext'], fromUrlContext);\n    }\n    const fromComputerUse = getValueByPath(fromObject, ['computerUse']);\n    if (fromComputerUse != null) {\n        setValueByPath(toObject, ['computerUse'], fromComputerUse);\n    }\n    const fromCodeExecution = getValueByPath(fromObject, [\n        'codeExecution',\n    ]);\n    if (fromCodeExecution != null) {\n        setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n    }\n    return toObject;\n}\nfunction toolToVertex$2(fromObject) {\n    const toObject = {};\n    const fromFunctionDeclarations = getValueByPath(fromObject, [\n        'functionDeclarations',\n    ]);\n    if (fromFunctionDeclarations != null) {\n        let transformedList = fromFunctionDeclarations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return functionDeclarationToVertex$2(item);\n            });\n        }\n        setValueByPath(toObject, ['functionDeclarations'], transformedList);\n    }\n    const fromRetrieval = getValueByPath(fromObject, ['retrieval']);\n    if (fromRetrieval != null) {\n        setValueByPath(toObject, ['retrieval'], fromRetrieval);\n    }\n    const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n    if (fromGoogleSearch != null) {\n        setValueByPath(toObject, ['googleSearch'], fromGoogleSearch);\n    }\n    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [\n        'googleSearchRetrieval',\n    ]);\n    if (fromGoogleSearchRetrieval != null) {\n        setValueByPath(toObject, ['googleSearchRetrieval'], fromGoogleSearchRetrieval);\n    }\n    const fromEnterpriseWebSearch = getValueByPath(fromObject, [\n        'enterpriseWebSearch',\n    ]);\n    if (fromEnterpriseWebSearch != null) {\n        setValueByPath(toObject, ['enterpriseWebSearch'], fromEnterpriseWebSearch);\n    }\n    const fromGoogleMaps = getValueByPath(fromObject, ['googleMaps']);\n    if (fromGoogleMaps != null) {\n        setValueByPath(toObject, ['googleMaps'], fromGoogleMaps);\n    }\n    const fromUrlContext = getValueByPath(fromObject, ['urlContext']);\n    if (fromUrlContext != null) {\n        setValueByPath(toObject, ['urlContext'], fromUrlContext);\n    }\n    const fromComputerUse = getValueByPath(fromObject, ['computerUse']);\n    if (fromComputerUse != null) {\n        setValueByPath(toObject, ['computerUse'], fromComputerUse);\n    }\n    const fromCodeExecution = getValueByPath(fromObject, [\n        'codeExecution',\n    ]);\n    if (fromCodeExecution != null) {\n        setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n    }\n    return toObject;\n}\nfunction updateCachedContentConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromTtl = getValueByPath(fromObject, ['ttl']);\n    if (parentObject !== undefined && fromTtl != null) {\n        setValueByPath(parentObject, ['ttl'], fromTtl);\n    }\n    const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n    if (parentObject !== undefined && fromExpireTime != null) {\n        setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n    }\n    return toObject;\n}\nfunction updateCachedContentConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromTtl = getValueByPath(fromObject, ['ttl']);\n    if (parentObject !== undefined && fromTtl != null) {\n        setValueByPath(parentObject, ['ttl'], fromTtl);\n    }\n    const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n    if (parentObject !== undefined && fromExpireTime != null) {\n        setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n    }\n    return toObject;\n}\nfunction updateCachedContentParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        updateCachedContentConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction updateCachedContentParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        updateCachedContentConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Caches extends BaseModule {\n    constructor(apiClient) {\n        super();\n        this.apiClient = apiClient;\n        /**\n         * Lists cached content configurations.\n         *\n         * @param params - The parameters for the list request.\n         * @return The paginated results of the list of cached contents.\n         *\n         * @example\n         * ```ts\n         * const cachedContents = await ai.caches.list({config: {'pageSize': 2}});\n         * for await (const cachedContent of cachedContents) {\n         *   console.log(cachedContent);\n         * }\n         * ```\n         */\n        this.list = async (params = {}) => {\n            return new Pager(PagedItem.PAGED_ITEM_CACHED_CONTENTS, (x) => this.listInternal(x), await this.listInternal(params), params);\n        };\n    }\n    /**\n     * Creates a cached contents resource.\n     *\n     * @remarks\n     * Context caching is only supported for specific models. See [Gemini\n     * Developer API reference](https://ai.google.dev/gemini-api/docs/caching?lang=node/context-cac)\n     * and [Vertex AI reference](https://cloud.google.com/vertex-ai/generative-ai/docs/context-cache/context-cache-overview#supported_models)\n     * for more information.\n     *\n     * @param params - The parameters for the create request.\n     * @return The created cached content.\n     *\n     * @example\n     * ```ts\n     * const contents = ...; // Initialize the content to cache.\n     * const response = await ai.caches.create({\n     *   model: 'gemini-2.0-flash-001',\n     *   config: {\n     *    'contents': contents,\n     *    'displayName': 'test cache',\n     *    'systemInstruction': 'What is the sum of the two pdfs?',\n     *    'ttl': '86400s',\n     *  }\n     * });\n     * ```\n     */\n    async create(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = createCachedContentParametersToVertex(this.apiClient, params);\n            path = formatMap('cachedContents', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((resp) => {\n                return resp;\n            });\n        }\n        else {\n            const body = createCachedContentParametersToMldev(this.apiClient, params);\n            path = formatMap('cachedContents', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((resp) => {\n                return resp;\n            });\n        }\n    }\n    /**\n     * Gets cached content configurations.\n     *\n     * @param params - The parameters for the get request.\n     * @return The cached content.\n     *\n     * @example\n     * ```ts\n     * await ai.caches.get({name: '...'}); // The server-generated resource name.\n     * ```\n     */\n    async get(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = getCachedContentParametersToVertex(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((resp) => {\n                return resp;\n            });\n        }\n        else {\n            const body = getCachedContentParametersToMldev(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((resp) => {\n                return resp;\n            });\n        }\n    }\n    /**\n     * Deletes cached content.\n     *\n     * @param params - The parameters for the delete request.\n     * @return The empty response returned by the API.\n     *\n     * @example\n     * ```ts\n     * await ai.caches.delete({name: '...'}); // The server-generated resource name.\n     * ```\n     */\n    async delete(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = deleteCachedContentParametersToVertex(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'DELETE',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = deleteCachedContentResponseFromVertex(apiResponse);\n                const typedResp = new DeleteCachedContentResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = deleteCachedContentParametersToMldev(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'DELETE',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = deleteCachedContentResponseFromMldev(apiResponse);\n                const typedResp = new DeleteCachedContentResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Updates cached content configurations.\n     *\n     * @param params - The parameters for the update request.\n     * @return The updated cached content.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.caches.update({\n     *   name: '...',  // The server-generated resource name.\n     *   config: {'ttl': '7600s'}\n     * });\n     * ```\n     */\n    async update(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = updateCachedContentParametersToVertex(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'PATCH',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((resp) => {\n                return resp;\n            });\n        }\n        else {\n            const body = updateCachedContentParametersToMldev(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'PATCH',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((resp) => {\n                return resp;\n            });\n        }\n    }\n    async listInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = listCachedContentsParametersToVertex(params);\n            path = formatMap('cachedContents', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listCachedContentsResponseFromVertex(apiResponse);\n                const typedResp = new ListCachedContentsResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = listCachedContentsParametersToMldev(params);\n            path = formatMap('cachedContents', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listCachedContentsResponseFromMldev(apiResponse);\n                const typedResp = new ListCachedContentsResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Returns true if the response is valid, false otherwise.\n */\nfunction isValidResponse(response) {\n    var _a;\n    if (response.candidates == undefined || response.candidates.length === 0) {\n        return false;\n    }\n    const content = (_a = response.candidates[0]) === null || _a === void 0 ? void 0 : _a.content;\n    if (content === undefined) {\n        return false;\n    }\n    return isValidContent(content);\n}\nfunction isValidContent(content) {\n    if (content.parts === undefined || content.parts.length === 0) {\n        return false;\n    }\n    for (const part of content.parts) {\n        if (part === undefined || Object.keys(part).length === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Validates the history contains the correct roles.\n *\n * @throws Error if the history does not start with a user turn.\n * @throws Error if the history contains an invalid role.\n */\nfunction validateHistory(history) {\n    // Empty history is valid.\n    if (history.length === 0) {\n        return;\n    }\n    for (const content of history) {\n        if (content.role !== 'user' && content.role !== 'model') {\n            throw new Error(`Role must be user or model, but got ${content.role}.`);\n        }\n    }\n}\n/**\n * Extracts the curated (valid) history from a comprehensive history.\n *\n * @remarks\n * The model may sometimes generate invalid or empty contents(e.g., due to safty\n * filters or recitation). Extracting valid turns from the history\n * ensures that subsequent requests could be accpeted by the model.\n */\nfunction extractCuratedHistory(comprehensiveHistory) {\n    if (comprehensiveHistory === undefined || comprehensiveHistory.length === 0) {\n        return [];\n    }\n    const curatedHistory = [];\n    const length = comprehensiveHistory.length;\n    let i = 0;\n    while (i < length) {\n        if (comprehensiveHistory[i].role === 'user') {\n            curatedHistory.push(comprehensiveHistory[i]);\n            i++;\n        }\n        else {\n            const modelOutput = [];\n            let isValid = true;\n            while (i < length && comprehensiveHistory[i].role === 'model') {\n                modelOutput.push(comprehensiveHistory[i]);\n                if (isValid && !isValidContent(comprehensiveHistory[i])) {\n                    isValid = false;\n                }\n                i++;\n            }\n            if (isValid) {\n                curatedHistory.push(...modelOutput);\n            }\n            else {\n                // Remove the last user input when model content is invalid.\n                curatedHistory.pop();\n            }\n        }\n    }\n    return curatedHistory;\n}\n/**\n * A utility class to create a chat session.\n */\nclass Chats {\n    constructor(modelsModule, apiClient) {\n        this.modelsModule = modelsModule;\n        this.apiClient = apiClient;\n    }\n    /**\n     * Creates a new chat session.\n     *\n     * @remarks\n     * The config in the params will be used for all requests within the chat\n     * session unless overridden by a per-request `config` in\n     * @see {@link types.SendMessageParameters#config}.\n     *\n     * @param params - Parameters for creating a chat session.\n     * @returns A new chat session.\n     *\n     * @example\n     * ```ts\n     * const chat = ai.chats.create({\n     *   model: 'gemini-2.0-flash'\n     *   config: {\n     *     temperature: 0.5,\n     *     maxOutputTokens: 1024,\n     *   }\n     * });\n     * ```\n     */\n    create(params) {\n        return new Chat(this.apiClient, this.modelsModule, params.model, params.config, \n        // Deep copy the history to avoid mutating the history outside of the\n        // chat session.\n        structuredClone(params.history));\n    }\n}\n/**\n * Chat session that enables sending messages to the model with previous\n * conversation context.\n *\n * @remarks\n * The session maintains all the turns between user and model.\n */\nclass Chat {\n    constructor(apiClient, modelsModule, model, config = {}, history = []) {\n        this.apiClient = apiClient;\n        this.modelsModule = modelsModule;\n        this.model = model;\n        this.config = config;\n        this.history = history;\n        // A promise to represent the current state of the message being sent to the\n        // model.\n        this.sendPromise = Promise.resolve();\n        validateHistory(history);\n    }\n    /**\n     * Sends a message to the model and returns the response.\n     *\n     * @remarks\n     * This method will wait for the previous message to be processed before\n     * sending the next message.\n     *\n     * @see {@link Chat#sendMessageStream} for streaming method.\n     * @param params - parameters for sending messages within a chat session.\n     * @returns The model's response.\n     *\n     * @example\n     * ```ts\n     * const chat = ai.chats.create({model: 'gemini-2.0-flash'});\n     * const response = await chat.sendMessage({\n     *   message: 'Why is the sky blue?'\n     * });\n     * console.log(response.text);\n     * ```\n     */\n    async sendMessage(params) {\n        var _a;\n        await this.sendPromise;\n        const inputContent = tContent(params.message);\n        const responsePromise = this.modelsModule.generateContent({\n            model: this.model,\n            contents: this.getHistory(true).concat(inputContent),\n            config: (_a = params.config) !== null && _a !== void 0 ? _a : this.config,\n        });\n        this.sendPromise = (async () => {\n            var _a, _b, _c;\n            const response = await responsePromise;\n            const outputContent = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content;\n            // Because the AFC input contains the entire curated chat history in\n            // addition to the new user input, we need to truncate the AFC history\n            // to deduplicate the existing chat history.\n            const fullAutomaticFunctionCallingHistory = response.automaticFunctionCallingHistory;\n            const index = this.getHistory(true).length;\n            let automaticFunctionCallingHistory = [];\n            if (fullAutomaticFunctionCallingHistory != null) {\n                automaticFunctionCallingHistory =\n                    (_c = fullAutomaticFunctionCallingHistory.slice(index)) !== null && _c !== void 0 ? _c : [];\n            }\n            const modelOutput = outputContent ? [outputContent] : [];\n            this.recordHistory(inputContent, modelOutput, automaticFunctionCallingHistory);\n            return;\n        })();\n        await this.sendPromise.catch(() => {\n            // Resets sendPromise to avoid subsequent calls failing\n            this.sendPromise = Promise.resolve();\n        });\n        return responsePromise;\n    }\n    /**\n     * Sends a message to the model and returns the response in chunks.\n     *\n     * @remarks\n     * This method will wait for the previous message to be processed before\n     * sending the next message.\n     *\n     * @see {@link Chat#sendMessage} for non-streaming method.\n     * @param params - parameters for sending the message.\n     * @return The model's response.\n     *\n     * @example\n     * ```ts\n     * const chat = ai.chats.create({model: 'gemini-2.0-flash'});\n     * const response = await chat.sendMessageStream({\n     *   message: 'Why is the sky blue?'\n     * });\n     * for await (const chunk of response) {\n     *   console.log(chunk.text);\n     * }\n     * ```\n     */\n    async sendMessageStream(params) {\n        var _a;\n        await this.sendPromise;\n        const inputContent = tContent(params.message);\n        const streamResponse = this.modelsModule.generateContentStream({\n            model: this.model,\n            contents: this.getHistory(true).concat(inputContent),\n            config: (_a = params.config) !== null && _a !== void 0 ? _a : this.config,\n        });\n        // Resolve the internal tracking of send completion promise - `sendPromise`\n        // for both success and failure response. The actual failure is still\n        // propagated by the `await streamResponse`.\n        this.sendPromise = streamResponse\n            .then(() => undefined)\n            .catch(() => undefined);\n        const response = await streamResponse;\n        const result = this.processStreamResponse(response, inputContent);\n        return result;\n    }\n    /**\n     * Returns the chat history.\n     *\n     * @remarks\n     * The history is a list of contents alternating between user and model.\n     *\n     * There are two types of history:\n     * - The `curated history` contains only the valid turns between user and\n     * model, which will be included in the subsequent requests sent to the model.\n     * - The `comprehensive history` contains all turns, including invalid or\n     *   empty model outputs, providing a complete record of the history.\n     *\n     * The history is updated after receiving the response from the model,\n     * for streaming response, it means receiving the last chunk of the response.\n     *\n     * The `comprehensive history` is returned by default. To get the `curated\n     * history`, set the `curated` parameter to `true`.\n     *\n     * @param curated - whether to return the curated history or the comprehensive\n     *     history.\n     * @return History contents alternating between user and model for the entire\n     *     chat session.\n     */\n    getHistory(curated = false) {\n        const history = curated\n            ? extractCuratedHistory(this.history)\n            : this.history;\n        // Deep copy the history to avoid mutating the history outside of the\n        // chat session.\n        return structuredClone(history);\n    }\n    processStreamResponse(streamResponse, inputContent) {\n        var _a, _b;\n        return __asyncGenerator(this, arguments, function* processStreamResponse_1() {\n            var _c, e_1, _d, _e;\n            const outputContent = [];\n            try {\n                for (var _f = true, streamResponse_1 = __asyncValues(streamResponse), streamResponse_1_1; streamResponse_1_1 = yield __await(streamResponse_1.next()), _c = streamResponse_1_1.done, !_c; _f = true) {\n                    _e = streamResponse_1_1.value;\n                    _f = false;\n                    const chunk = _e;\n                    if (isValidResponse(chunk)) {\n                        const content = (_b = (_a = chunk.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content;\n                        if (content !== undefined) {\n                            outputContent.push(content);\n                        }\n                    }\n                    yield yield __await(chunk);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_f && !_c && (_d = streamResponse_1.return)) yield __await(_d.call(streamResponse_1));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this.recordHistory(inputContent, outputContent);\n        });\n    }\n    recordHistory(userInput, modelOutput, automaticFunctionCallingHistory) {\n        let outputContents = [];\n        if (modelOutput.length > 0 &&\n            modelOutput.every((content) => content.role !== undefined)) {\n            outputContents = modelOutput;\n        }\n        else {\n            // Appends an empty content when model returns empty response, so that the\n            // history is always alternating between user and model.\n            outputContents.push({\n                role: 'model',\n                parts: [],\n            });\n        }\n        if (automaticFunctionCallingHistory &&\n            automaticFunctionCallingHistory.length > 0) {\n            this.history.push(...extractCuratedHistory(automaticFunctionCallingHistory));\n        }\n        else {\n            this.history.push(userInput);\n        }\n        this.history.push(...outputContents);\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * API errors raised by the GenAI API.\n */\nclass ApiError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.name = 'ApiError';\n        this.status = options.status;\n        Object.setPrototypeOf(this, ApiError.prototype);\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\nfunction createFileParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromFile = getValueByPath(fromObject, ['file']);\n    if (fromFile != null) {\n        setValueByPath(toObject, ['file'], fromFile);\n    }\n    return toObject;\n}\nfunction createFileResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    return toObject;\n}\nfunction deleteFileParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'file'], tFileName(fromName));\n    }\n    return toObject;\n}\nfunction deleteFileResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    return toObject;\n}\nfunction getFileParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'file'], tFileName(fromName));\n    }\n    return toObject;\n}\nfunction listFilesConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    return toObject;\n}\nfunction listFilesParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listFilesConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listFilesResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromFiles = getValueByPath(fromObject, ['files']);\n    if (fromFiles != null) {\n        let transformedList = fromFiles;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['files'], transformedList);\n    }\n    return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Files extends BaseModule {\n    constructor(apiClient) {\n        super();\n        this.apiClient = apiClient;\n        /**\n         * Lists all current project files from the service.\n         *\n         * @param params - The parameters for the list request\n         * @return The paginated results of the list of files\n         *\n         * @example\n         * The following code prints the names of all files from the service, the\n         * size of each page is 10.\n         *\n         * ```ts\n         * const listResponse = await ai.files.list({config: {'pageSize': 10}});\n         * for await (const file of listResponse) {\n         *   console.log(file.name);\n         * }\n         * ```\n         */\n        this.list = async (params = {}) => {\n            return new Pager(PagedItem.PAGED_ITEM_FILES, (x) => this.listInternal(x), await this.listInternal(params), params);\n        };\n    }\n    /**\n     * Uploads a file asynchronously to the Gemini API.\n     * This method is not available in Vertex AI.\n     * Supported upload sources:\n     * - Node.js: File path (string) or Blob object.\n     * - Browser: Blob object (e.g., File).\n     *\n     * @remarks\n     * The `mimeType` can be specified in the `config` parameter. If omitted:\n     *  - For file path (string) inputs, the `mimeType` will be inferred from the\n     *     file extension.\n     *  - For Blob object inputs, the `mimeType` will be set to the Blob's `type`\n     *     property.\n     * Somex eamples for file extension to mimeType mapping:\n     * .txt -> text/plain\n     * .json -> application/json\n     * .jpg  -> image/jpeg\n     * .png -> image/png\n     * .mp3 -> audio/mpeg\n     * .mp4 -> video/mp4\n     *\n     * This section can contain multiple paragraphs and code examples.\n     *\n     * @param params - Optional parameters specified in the\n     *        `types.UploadFileParameters` interface.\n     *         @see {@link types.UploadFileParameters#config} for the optional\n     *         config in the parameters.\n     * @return A promise that resolves to a `types.File` object.\n     * @throws An error if called on a Vertex AI client.\n     * @throws An error if the `mimeType` is not provided and can not be inferred,\n     * the `mimeType` can be provided in the `params.config` parameter.\n     * @throws An error occurs if a suitable upload location cannot be established.\n     *\n     * @example\n     * The following code uploads a file to Gemini API.\n     *\n     * ```ts\n     * const file = await ai.files.upload({file: 'file.txt', config: {\n     *   mimeType: 'text/plain',\n     * }});\n     * console.log(file.name);\n     * ```\n     */\n    async upload(params) {\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('Vertex AI does not support uploading files. You can share files through a GCS bucket.');\n        }\n        return this.apiClient\n            .uploadFile(params.file, params.config)\n            .then((resp) => {\n            return resp;\n        });\n    }\n    /**\n     * Downloads a remotely stored file asynchronously to a location specified in\n     * the `params` object. This method only works on Node environment, to\n     * download files in the browser, use a browser compliant method like an <a>\n     * tag.\n     *\n     * @param params - The parameters for the download request.\n     *\n     * @example\n     * The following code downloads an example file named \"files/mehozpxf877d\" as\n     * \"file.txt\".\n     *\n     * ```ts\n     * await ai.files.download({file: file.name, downloadPath: 'file.txt'});\n     * ```\n     */\n    async download(params) {\n        await this.apiClient.downloadFile(params);\n    }\n    async listInternal(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('This method is only supported by the Gemini Developer API.');\n        }\n        else {\n            const body = listFilesParametersToMldev(params);\n            path = formatMap('files', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listFilesResponseFromMldev(apiResponse);\n                const typedResp = new ListFilesResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    async createInternal(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('This method is only supported by the Gemini Developer API.');\n        }\n        else {\n            const body = createFileParametersToMldev(params);\n            path = formatMap('upload/v1beta/files', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = createFileResponseFromMldev(apiResponse);\n                const typedResp = new CreateFileResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Retrieves the file information from the service.\n     *\n     * @param params - The parameters for the get request\n     * @return The Promise that resolves to the types.File object requested.\n     *\n     * @example\n     * ```ts\n     * const config: GetFileParameters = {\n     *   name: fileName,\n     * };\n     * file = await ai.files.get(config);\n     * console.log(file.name);\n     * ```\n     */\n    async get(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('This method is only supported by the Gemini Developer API.');\n        }\n        else {\n            const body = getFileParametersToMldev(params);\n            path = formatMap('files/{file}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((resp) => {\n                return resp;\n            });\n        }\n    }\n    /**\n     * Deletes a remotely stored file.\n     *\n     * @param params - The parameters for the delete request.\n     * @return The DeleteFileResponse, the response for the delete method.\n     *\n     * @example\n     * The following code deletes an example file named \"files/mehozpxf877d\".\n     *\n     * ```ts\n     * await ai.files.delete({name: file.name});\n     * ```\n     */\n    async delete(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('This method is only supported by the Gemini Developer API.');\n        }\n        else {\n            const body = deleteFileParametersToMldev(params);\n            path = formatMap('files/{file}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'DELETE',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = deleteFileResponseFromMldev(apiResponse);\n                const typedResp = new DeleteFileResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction blobToMldev$2(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromData = getValueByPath(fromObject, ['data']);\n    if (fromData != null) {\n        setValueByPath(toObject, ['data'], fromData);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction contentToMldev$2(fromObject) {\n    const toObject = {};\n    const fromParts = getValueByPath(fromObject, ['parts']);\n    if (fromParts != null) {\n        let transformedList = fromParts;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return partToMldev$2(item);\n            });\n        }\n        setValueByPath(toObject, ['parts'], transformedList);\n    }\n    const fromRole = getValueByPath(fromObject, ['role']);\n    if (fromRole != null) {\n        setValueByPath(toObject, ['role'], fromRole);\n    }\n    return toObject;\n}\nfunction fileDataToMldev$2(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromFileUri = getValueByPath(fromObject, ['fileUri']);\n    if (fromFileUri != null) {\n        setValueByPath(toObject, ['fileUri'], fromFileUri);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction functionDeclarationToVertex$1(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['behavior']) !== undefined) {\n        throw new Error('behavior parameter is not supported in Vertex AI.');\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (fromDescription != null) {\n        setValueByPath(toObject, ['description'], fromDescription);\n    }\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromParameters = getValueByPath(fromObject, ['parameters']);\n    if (fromParameters != null) {\n        setValueByPath(toObject, ['parameters'], fromParameters);\n    }\n    const fromParametersJsonSchema = getValueByPath(fromObject, [\n        'parametersJsonSchema',\n    ]);\n    if (fromParametersJsonSchema != null) {\n        setValueByPath(toObject, ['parametersJsonSchema'], fromParametersJsonSchema);\n    }\n    const fromResponse = getValueByPath(fromObject, ['response']);\n    if (fromResponse != null) {\n        setValueByPath(toObject, ['response'], fromResponse);\n    }\n    const fromResponseJsonSchema = getValueByPath(fromObject, [\n        'responseJsonSchema',\n    ]);\n    if (fromResponseJsonSchema != null) {\n        setValueByPath(toObject, ['responseJsonSchema'], fromResponseJsonSchema);\n    }\n    return toObject;\n}\nfunction generationConfigToVertex$1(fromObject) {\n    const toObject = {};\n    const fromModelSelectionConfig = getValueByPath(fromObject, [\n        'modelSelectionConfig',\n    ]);\n    if (fromModelSelectionConfig != null) {\n        setValueByPath(toObject, ['modelConfig'], fromModelSelectionConfig);\n    }\n    const fromAudioTimestamp = getValueByPath(fromObject, [\n        'audioTimestamp',\n    ]);\n    if (fromAudioTimestamp != null) {\n        setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);\n    }\n    const fromCandidateCount = getValueByPath(fromObject, [\n        'candidateCount',\n    ]);\n    if (fromCandidateCount != null) {\n        setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n    }\n    const fromEnableAffectiveDialog = getValueByPath(fromObject, [\n        'enableAffectiveDialog',\n    ]);\n    if (fromEnableAffectiveDialog != null) {\n        setValueByPath(toObject, ['enableAffectiveDialog'], fromEnableAffectiveDialog);\n    }\n    const fromFrequencyPenalty = getValueByPath(fromObject, [\n        'frequencyPenalty',\n    ]);\n    if (fromFrequencyPenalty != null) {\n        setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n    }\n    const fromLogprobs = getValueByPath(fromObject, ['logprobs']);\n    if (fromLogprobs != null) {\n        setValueByPath(toObject, ['logprobs'], fromLogprobs);\n    }\n    const fromMaxOutputTokens = getValueByPath(fromObject, [\n        'maxOutputTokens',\n    ]);\n    if (fromMaxOutputTokens != null) {\n        setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n    }\n    const fromMediaResolution = getValueByPath(fromObject, [\n        'mediaResolution',\n    ]);\n    if (fromMediaResolution != null) {\n        setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n    }\n    const fromPresencePenalty = getValueByPath(fromObject, [\n        'presencePenalty',\n    ]);\n    if (fromPresencePenalty != null) {\n        setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n    }\n    const fromResponseJsonSchema = getValueByPath(fromObject, [\n        'responseJsonSchema',\n    ]);\n    if (fromResponseJsonSchema != null) {\n        setValueByPath(toObject, ['responseJsonSchema'], fromResponseJsonSchema);\n    }\n    const fromResponseLogprobs = getValueByPath(fromObject, [\n        'responseLogprobs',\n    ]);\n    if (fromResponseLogprobs != null) {\n        setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n    }\n    const fromResponseMimeType = getValueByPath(fromObject, [\n        'responseMimeType',\n    ]);\n    if (fromResponseMimeType != null) {\n        setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n    }\n    const fromResponseModalities = getValueByPath(fromObject, [\n        'responseModalities',\n    ]);\n    if (fromResponseModalities != null) {\n        setValueByPath(toObject, ['responseModalities'], fromResponseModalities);\n    }\n    const fromResponseSchema = getValueByPath(fromObject, [\n        'responseSchema',\n    ]);\n    if (fromResponseSchema != null) {\n        setValueByPath(toObject, ['responseSchema'], fromResponseSchema);\n    }\n    const fromRoutingConfig = getValueByPath(fromObject, [\n        'routingConfig',\n    ]);\n    if (fromRoutingConfig != null) {\n        setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (fromSeed != null) {\n        setValueByPath(toObject, ['seed'], fromSeed);\n    }\n    const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n    if (fromSpeechConfig != null) {\n        setValueByPath(toObject, ['speechConfig'], speechConfigToVertex$1(fromSpeechConfig));\n    }\n    const fromStopSequences = getValueByPath(fromObject, [\n        'stopSequences',\n    ]);\n    if (fromStopSequences != null) {\n        setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n    }\n    const fromTemperature = getValueByPath(fromObject, ['temperature']);\n    if (fromTemperature != null) {\n        setValueByPath(toObject, ['temperature'], fromTemperature);\n    }\n    const fromThinkingConfig = getValueByPath(fromObject, [\n        'thinkingConfig',\n    ]);\n    if (fromThinkingConfig != null) {\n        setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n    }\n    const fromTopK = getValueByPath(fromObject, ['topK']);\n    if (fromTopK != null) {\n        setValueByPath(toObject, ['topK'], fromTopK);\n    }\n    const fromTopP = getValueByPath(fromObject, ['topP']);\n    if (fromTopP != null) {\n        setValueByPath(toObject, ['topP'], fromTopP);\n    }\n    if (getValueByPath(fromObject, ['enableEnhancedCivicAnswers']) !==\n        undefined) {\n        throw new Error('enableEnhancedCivicAnswers parameter is not supported in Vertex AI.');\n    }\n    return toObject;\n}\nfunction googleMapsToMldev$2(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['authConfig']) !== undefined) {\n        throw new Error('authConfig parameter is not supported in Gemini API.');\n    }\n    const fromEnableWidget = getValueByPath(fromObject, ['enableWidget']);\n    if (fromEnableWidget != null) {\n        setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n    }\n    return toObject;\n}\nfunction googleSearchToMldev$2(fromObject) {\n    const toObject = {};\n    const fromTimeRangeFilter = getValueByPath(fromObject, [\n        'timeRangeFilter',\n    ]);\n    if (fromTimeRangeFilter != null) {\n        setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n    }\n    if (getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n        throw new Error('excludeDomains parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction liveConnectConfigToMldev$1(fromObject, parentObject) {\n    const toObject = {};\n    const fromGenerationConfig = getValueByPath(fromObject, [\n        'generationConfig',\n    ]);\n    if (parentObject !== undefined && fromGenerationConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig'], fromGenerationConfig);\n    }\n    const fromResponseModalities = getValueByPath(fromObject, [\n        'responseModalities',\n    ]);\n    if (parentObject !== undefined && fromResponseModalities != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'responseModalities'], fromResponseModalities);\n    }\n    const fromTemperature = getValueByPath(fromObject, ['temperature']);\n    if (parentObject !== undefined && fromTemperature != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'temperature'], fromTemperature);\n    }\n    const fromTopP = getValueByPath(fromObject, ['topP']);\n    if (parentObject !== undefined && fromTopP != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'topP'], fromTopP);\n    }\n    const fromTopK = getValueByPath(fromObject, ['topK']);\n    if (parentObject !== undefined && fromTopK != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'topK'], fromTopK);\n    }\n    const fromMaxOutputTokens = getValueByPath(fromObject, [\n        'maxOutputTokens',\n    ]);\n    if (parentObject !== undefined && fromMaxOutputTokens != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'maxOutputTokens'], fromMaxOutputTokens);\n    }\n    const fromMediaResolution = getValueByPath(fromObject, [\n        'mediaResolution',\n    ]);\n    if (parentObject !== undefined && fromMediaResolution != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'mediaResolution'], fromMediaResolution);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (parentObject !== undefined && fromSeed != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'seed'], fromSeed);\n    }\n    const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n    if (parentObject !== undefined && fromSpeechConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'speechConfig'], tLiveSpeechConfig(fromSpeechConfig));\n    }\n    const fromThinkingConfig = getValueByPath(fromObject, [\n        'thinkingConfig',\n    ]);\n    if (parentObject !== undefined && fromThinkingConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'thinkingConfig'], fromThinkingConfig);\n    }\n    const fromEnableAffectiveDialog = getValueByPath(fromObject, [\n        'enableAffectiveDialog',\n    ]);\n    if (parentObject !== undefined && fromEnableAffectiveDialog != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'enableAffectiveDialog'], fromEnableAffectiveDialog);\n    }\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['setup', 'systemInstruction'], contentToMldev$2(tContent(fromSystemInstruction)));\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = tTools(fromTools);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToMldev$2(tTool(item));\n            });\n        }\n        setValueByPath(parentObject, ['setup', 'tools'], transformedList);\n    }\n    const fromSessionResumption = getValueByPath(fromObject, [\n        'sessionResumption',\n    ]);\n    if (parentObject !== undefined && fromSessionResumption != null) {\n        setValueByPath(parentObject, ['setup', 'sessionResumption'], sessionResumptionConfigToMldev$1(fromSessionResumption));\n    }\n    const fromInputAudioTranscription = getValueByPath(fromObject, [\n        'inputAudioTranscription',\n    ]);\n    if (parentObject !== undefined && fromInputAudioTranscription != null) {\n        setValueByPath(parentObject, ['setup', 'inputAudioTranscription'], fromInputAudioTranscription);\n    }\n    const fromOutputAudioTranscription = getValueByPath(fromObject, [\n        'outputAudioTranscription',\n    ]);\n    if (parentObject !== undefined && fromOutputAudioTranscription != null) {\n        setValueByPath(parentObject, ['setup', 'outputAudioTranscription'], fromOutputAudioTranscription);\n    }\n    const fromRealtimeInputConfig = getValueByPath(fromObject, [\n        'realtimeInputConfig',\n    ]);\n    if (parentObject !== undefined && fromRealtimeInputConfig != null) {\n        setValueByPath(parentObject, ['setup', 'realtimeInputConfig'], fromRealtimeInputConfig);\n    }\n    const fromContextWindowCompression = getValueByPath(fromObject, [\n        'contextWindowCompression',\n    ]);\n    if (parentObject !== undefined && fromContextWindowCompression != null) {\n        setValueByPath(parentObject, ['setup', 'contextWindowCompression'], fromContextWindowCompression);\n    }\n    const fromProactivity = getValueByPath(fromObject, ['proactivity']);\n    if (parentObject !== undefined && fromProactivity != null) {\n        setValueByPath(parentObject, ['setup', 'proactivity'], fromProactivity);\n    }\n    return toObject;\n}\nfunction liveConnectConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromGenerationConfig = getValueByPath(fromObject, [\n        'generationConfig',\n    ]);\n    if (parentObject !== undefined && fromGenerationConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig'], generationConfigToVertex$1(fromGenerationConfig));\n    }\n    const fromResponseModalities = getValueByPath(fromObject, [\n        'responseModalities',\n    ]);\n    if (parentObject !== undefined && fromResponseModalities != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'responseModalities'], fromResponseModalities);\n    }\n    const fromTemperature = getValueByPath(fromObject, ['temperature']);\n    if (parentObject !== undefined && fromTemperature != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'temperature'], fromTemperature);\n    }\n    const fromTopP = getValueByPath(fromObject, ['topP']);\n    if (parentObject !== undefined && fromTopP != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'topP'], fromTopP);\n    }\n    const fromTopK = getValueByPath(fromObject, ['topK']);\n    if (parentObject !== undefined && fromTopK != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'topK'], fromTopK);\n    }\n    const fromMaxOutputTokens = getValueByPath(fromObject, [\n        'maxOutputTokens',\n    ]);\n    if (parentObject !== undefined && fromMaxOutputTokens != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'maxOutputTokens'], fromMaxOutputTokens);\n    }\n    const fromMediaResolution = getValueByPath(fromObject, [\n        'mediaResolution',\n    ]);\n    if (parentObject !== undefined && fromMediaResolution != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'mediaResolution'], fromMediaResolution);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (parentObject !== undefined && fromSeed != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'seed'], fromSeed);\n    }\n    const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n    if (parentObject !== undefined && fromSpeechConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'speechConfig'], speechConfigToVertex$1(tLiveSpeechConfig(fromSpeechConfig)));\n    }\n    const fromThinkingConfig = getValueByPath(fromObject, [\n        'thinkingConfig',\n    ]);\n    if (parentObject !== undefined && fromThinkingConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'thinkingConfig'], fromThinkingConfig);\n    }\n    const fromEnableAffectiveDialog = getValueByPath(fromObject, [\n        'enableAffectiveDialog',\n    ]);\n    if (parentObject !== undefined && fromEnableAffectiveDialog != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'enableAffectiveDialog'], fromEnableAffectiveDialog);\n    }\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['setup', 'systemInstruction'], tContent(fromSystemInstruction));\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = tTools(fromTools);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToVertex$1(tTool(item));\n            });\n        }\n        setValueByPath(parentObject, ['setup', 'tools'], transformedList);\n    }\n    const fromSessionResumption = getValueByPath(fromObject, [\n        'sessionResumption',\n    ]);\n    if (parentObject !== undefined && fromSessionResumption != null) {\n        setValueByPath(parentObject, ['setup', 'sessionResumption'], fromSessionResumption);\n    }\n    const fromInputAudioTranscription = getValueByPath(fromObject, [\n        'inputAudioTranscription',\n    ]);\n    if (parentObject !== undefined && fromInputAudioTranscription != null) {\n        setValueByPath(parentObject, ['setup', 'inputAudioTranscription'], fromInputAudioTranscription);\n    }\n    const fromOutputAudioTranscription = getValueByPath(fromObject, [\n        'outputAudioTranscription',\n    ]);\n    if (parentObject !== undefined && fromOutputAudioTranscription != null) {\n        setValueByPath(parentObject, ['setup', 'outputAudioTranscription'], fromOutputAudioTranscription);\n    }\n    const fromRealtimeInputConfig = getValueByPath(fromObject, [\n        'realtimeInputConfig',\n    ]);\n    if (parentObject !== undefined && fromRealtimeInputConfig != null) {\n        setValueByPath(parentObject, ['setup', 'realtimeInputConfig'], fromRealtimeInputConfig);\n    }\n    const fromContextWindowCompression = getValueByPath(fromObject, [\n        'contextWindowCompression',\n    ]);\n    if (parentObject !== undefined && fromContextWindowCompression != null) {\n        setValueByPath(parentObject, ['setup', 'contextWindowCompression'], fromContextWindowCompression);\n    }\n    const fromProactivity = getValueByPath(fromObject, ['proactivity']);\n    if (parentObject !== undefined && fromProactivity != null) {\n        setValueByPath(parentObject, ['setup', 'proactivity'], fromProactivity);\n    }\n    return toObject;\n}\nfunction liveConnectParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['setup', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        setValueByPath(toObject, ['config'], liveConnectConfigToMldev$1(fromConfig, toObject));\n    }\n    return toObject;\n}\nfunction liveConnectParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['setup', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        setValueByPath(toObject, ['config'], liveConnectConfigToVertex(fromConfig, toObject));\n    }\n    return toObject;\n}\nfunction liveMusicSetConfigParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromMusicGenerationConfig = getValueByPath(fromObject, [\n        'musicGenerationConfig',\n    ]);\n    if (fromMusicGenerationConfig != null) {\n        setValueByPath(toObject, ['musicGenerationConfig'], fromMusicGenerationConfig);\n    }\n    return toObject;\n}\nfunction liveMusicSetWeightedPromptsParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromWeightedPrompts = getValueByPath(fromObject, [\n        'weightedPrompts',\n    ]);\n    if (fromWeightedPrompts != null) {\n        let transformedList = fromWeightedPrompts;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['weightedPrompts'], transformedList);\n    }\n    return toObject;\n}\nfunction liveSendRealtimeInputParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromMedia = getValueByPath(fromObject, ['media']);\n    if (fromMedia != null) {\n        let transformedList = tBlobs(fromMedia);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return blobToMldev$2(item);\n            });\n        }\n        setValueByPath(toObject, ['mediaChunks'], transformedList);\n    }\n    const fromAudio = getValueByPath(fromObject, ['audio']);\n    if (fromAudio != null) {\n        setValueByPath(toObject, ['audio'], blobToMldev$2(tAudioBlob(fromAudio)));\n    }\n    const fromAudioStreamEnd = getValueByPath(fromObject, [\n        'audioStreamEnd',\n    ]);\n    if (fromAudioStreamEnd != null) {\n        setValueByPath(toObject, ['audioStreamEnd'], fromAudioStreamEnd);\n    }\n    const fromVideo = getValueByPath(fromObject, ['video']);\n    if (fromVideo != null) {\n        setValueByPath(toObject, ['video'], blobToMldev$2(tImageBlob(fromVideo)));\n    }\n    const fromText = getValueByPath(fromObject, ['text']);\n    if (fromText != null) {\n        setValueByPath(toObject, ['text'], fromText);\n    }\n    const fromActivityStart = getValueByPath(fromObject, [\n        'activityStart',\n    ]);\n    if (fromActivityStart != null) {\n        setValueByPath(toObject, ['activityStart'], fromActivityStart);\n    }\n    const fromActivityEnd = getValueByPath(fromObject, ['activityEnd']);\n    if (fromActivityEnd != null) {\n        setValueByPath(toObject, ['activityEnd'], fromActivityEnd);\n    }\n    return toObject;\n}\nfunction liveSendRealtimeInputParametersToVertex(fromObject) {\n    const toObject = {};\n    const fromMedia = getValueByPath(fromObject, ['media']);\n    if (fromMedia != null) {\n        let transformedList = tBlobs(fromMedia);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['mediaChunks'], transformedList);\n    }\n    const fromAudio = getValueByPath(fromObject, ['audio']);\n    if (fromAudio != null) {\n        setValueByPath(toObject, ['audio'], tAudioBlob(fromAudio));\n    }\n    const fromAudioStreamEnd = getValueByPath(fromObject, [\n        'audioStreamEnd',\n    ]);\n    if (fromAudioStreamEnd != null) {\n        setValueByPath(toObject, ['audioStreamEnd'], fromAudioStreamEnd);\n    }\n    const fromVideo = getValueByPath(fromObject, ['video']);\n    if (fromVideo != null) {\n        setValueByPath(toObject, ['video'], tImageBlob(fromVideo));\n    }\n    const fromText = getValueByPath(fromObject, ['text']);\n    if (fromText != null) {\n        setValueByPath(toObject, ['text'], fromText);\n    }\n    const fromActivityStart = getValueByPath(fromObject, [\n        'activityStart',\n    ]);\n    if (fromActivityStart != null) {\n        setValueByPath(toObject, ['activityStart'], fromActivityStart);\n    }\n    const fromActivityEnd = getValueByPath(fromObject, ['activityEnd']);\n    if (fromActivityEnd != null) {\n        setValueByPath(toObject, ['activityEnd'], fromActivityEnd);\n    }\n    return toObject;\n}\nfunction liveServerMessageFromVertex(fromObject) {\n    const toObject = {};\n    const fromSetupComplete = getValueByPath(fromObject, [\n        'setupComplete',\n    ]);\n    if (fromSetupComplete != null) {\n        setValueByPath(toObject, ['setupComplete'], fromSetupComplete);\n    }\n    const fromServerContent = getValueByPath(fromObject, [\n        'serverContent',\n    ]);\n    if (fromServerContent != null) {\n        setValueByPath(toObject, ['serverContent'], fromServerContent);\n    }\n    const fromToolCall = getValueByPath(fromObject, ['toolCall']);\n    if (fromToolCall != null) {\n        setValueByPath(toObject, ['toolCall'], fromToolCall);\n    }\n    const fromToolCallCancellation = getValueByPath(fromObject, [\n        'toolCallCancellation',\n    ]);\n    if (fromToolCallCancellation != null) {\n        setValueByPath(toObject, ['toolCallCancellation'], fromToolCallCancellation);\n    }\n    const fromUsageMetadata = getValueByPath(fromObject, [\n        'usageMetadata',\n    ]);\n    if (fromUsageMetadata != null) {\n        setValueByPath(toObject, ['usageMetadata'], usageMetadataFromVertex(fromUsageMetadata));\n    }\n    const fromGoAway = getValueByPath(fromObject, ['goAway']);\n    if (fromGoAway != null) {\n        setValueByPath(toObject, ['goAway'], fromGoAway);\n    }\n    const fromSessionResumptionUpdate = getValueByPath(fromObject, [\n        'sessionResumptionUpdate',\n    ]);\n    if (fromSessionResumptionUpdate != null) {\n        setValueByPath(toObject, ['sessionResumptionUpdate'], fromSessionResumptionUpdate);\n    }\n    return toObject;\n}\nfunction partToMldev$2(fromObject) {\n    const toObject = {};\n    const fromVideoMetadata = getValueByPath(fromObject, [\n        'videoMetadata',\n    ]);\n    if (fromVideoMetadata != null) {\n        setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n    }\n    const fromThought = getValueByPath(fromObject, ['thought']);\n    if (fromThought != null) {\n        setValueByPath(toObject, ['thought'], fromThought);\n    }\n    const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n    if (fromInlineData != null) {\n        setValueByPath(toObject, ['inlineData'], blobToMldev$2(fromInlineData));\n    }\n    const fromFileData = getValueByPath(fromObject, ['fileData']);\n    if (fromFileData != null) {\n        setValueByPath(toObject, ['fileData'], fileDataToMldev$2(fromFileData));\n    }\n    const fromThoughtSignature = getValueByPath(fromObject, [\n        'thoughtSignature',\n    ]);\n    if (fromThoughtSignature != null) {\n        setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n    }\n    const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n    if (fromFunctionCall != null) {\n        setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n    }\n    const fromCodeExecutionResult = getValueByPath(fromObject, [\n        'codeExecutionResult',\n    ]);\n    if (fromCodeExecutionResult != null) {\n        setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n    }\n    const fromExecutableCode = getValueByPath(fromObject, [\n        'executableCode',\n    ]);\n    if (fromExecutableCode != null) {\n        setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n    }\n    const fromFunctionResponse = getValueByPath(fromObject, [\n        'functionResponse',\n    ]);\n    if (fromFunctionResponse != null) {\n        setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n    }\n    const fromText = getValueByPath(fromObject, ['text']);\n    if (fromText != null) {\n        setValueByPath(toObject, ['text'], fromText);\n    }\n    return toObject;\n}\nfunction sessionResumptionConfigToMldev$1(fromObject) {\n    const toObject = {};\n    const fromHandle = getValueByPath(fromObject, ['handle']);\n    if (fromHandle != null) {\n        setValueByPath(toObject, ['handle'], fromHandle);\n    }\n    if (getValueByPath(fromObject, ['transparent']) !== undefined) {\n        throw new Error('transparent parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction speechConfigToVertex$1(fromObject) {\n    const toObject = {};\n    const fromVoiceConfig = getValueByPath(fromObject, ['voiceConfig']);\n    if (fromVoiceConfig != null) {\n        setValueByPath(toObject, ['voiceConfig'], fromVoiceConfig);\n    }\n    if (getValueByPath(fromObject, ['multiSpeakerVoiceConfig']) !== undefined) {\n        throw new Error('multiSpeakerVoiceConfig parameter is not supported in Vertex AI.');\n    }\n    const fromLanguageCode = getValueByPath(fromObject, ['languageCode']);\n    if (fromLanguageCode != null) {\n        setValueByPath(toObject, ['languageCode'], fromLanguageCode);\n    }\n    return toObject;\n}\nfunction toolToMldev$2(fromObject) {\n    const toObject = {};\n    const fromFunctionDeclarations = getValueByPath(fromObject, [\n        'functionDeclarations',\n    ]);\n    if (fromFunctionDeclarations != null) {\n        let transformedList = fromFunctionDeclarations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['functionDeclarations'], transformedList);\n    }\n    if (getValueByPath(fromObject, ['retrieval']) !== undefined) {\n        throw new Error('retrieval parameter is not supported in Gemini API.');\n    }\n    const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n    if (fromGoogleSearch != null) {\n        setValueByPath(toObject, ['googleSearch'], googleSearchToMldev$2(fromGoogleSearch));\n    }\n    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [\n        'googleSearchRetrieval',\n    ]);\n    if (fromGoogleSearchRetrieval != null) {\n        setValueByPath(toObject, ['googleSearchRetrieval'], fromGoogleSearchRetrieval);\n    }\n    if (getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined) {\n        throw new Error('enterpriseWebSearch parameter is not supported in Gemini API.');\n    }\n    const fromGoogleMaps = getValueByPath(fromObject, ['googleMaps']);\n    if (fromGoogleMaps != null) {\n        setValueByPath(toObject, ['googleMaps'], googleMapsToMldev$2(fromGoogleMaps));\n    }\n    const fromUrlContext = getValueByPath(fromObject, ['urlContext']);\n    if (fromUrlContext != null) {\n        setValueByPath(toObject, ['urlContext'], fromUrlContext);\n    }\n    const fromComputerUse = getValueByPath(fromObject, ['computerUse']);\n    if (fromComputerUse != null) {\n        setValueByPath(toObject, ['computerUse'], fromComputerUse);\n    }\n    const fromCodeExecution = getValueByPath(fromObject, [\n        'codeExecution',\n    ]);\n    if (fromCodeExecution != null) {\n        setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n    }\n    return toObject;\n}\nfunction toolToVertex$1(fromObject) {\n    const toObject = {};\n    const fromFunctionDeclarations = getValueByPath(fromObject, [\n        'functionDeclarations',\n    ]);\n    if (fromFunctionDeclarations != null) {\n        let transformedList = fromFunctionDeclarations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return functionDeclarationToVertex$1(item);\n            });\n        }\n        setValueByPath(toObject, ['functionDeclarations'], transformedList);\n    }\n    const fromRetrieval = getValueByPath(fromObject, ['retrieval']);\n    if (fromRetrieval != null) {\n        setValueByPath(toObject, ['retrieval'], fromRetrieval);\n    }\n    const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n    if (fromGoogleSearch != null) {\n        setValueByPath(toObject, ['googleSearch'], fromGoogleSearch);\n    }\n    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [\n        'googleSearchRetrieval',\n    ]);\n    if (fromGoogleSearchRetrieval != null) {\n        setValueByPath(toObject, ['googleSearchRetrieval'], fromGoogleSearchRetrieval);\n    }\n    const fromEnterpriseWebSearch = getValueByPath(fromObject, [\n        'enterpriseWebSearch',\n    ]);\n    if (fromEnterpriseWebSearch != null) {\n        setValueByPath(toObject, ['enterpriseWebSearch'], fromEnterpriseWebSearch);\n    }\n    const fromGoogleMaps = getValueByPath(fromObject, ['googleMaps']);\n    if (fromGoogleMaps != null) {\n        setValueByPath(toObject, ['googleMaps'], fromGoogleMaps);\n    }\n    const fromUrlContext = getValueByPath(fromObject, ['urlContext']);\n    if (fromUrlContext != null) {\n        setValueByPath(toObject, ['urlContext'], fromUrlContext);\n    }\n    const fromComputerUse = getValueByPath(fromObject, ['computerUse']);\n    if (fromComputerUse != null) {\n        setValueByPath(toObject, ['computerUse'], fromComputerUse);\n    }\n    const fromCodeExecution = getValueByPath(fromObject, [\n        'codeExecution',\n    ]);\n    if (fromCodeExecution != null) {\n        setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n    }\n    return toObject;\n}\nfunction usageMetadataFromVertex(fromObject) {\n    const toObject = {};\n    const fromPromptTokenCount = getValueByPath(fromObject, [\n        'promptTokenCount',\n    ]);\n    if (fromPromptTokenCount != null) {\n        setValueByPath(toObject, ['promptTokenCount'], fromPromptTokenCount);\n    }\n    const fromCachedContentTokenCount = getValueByPath(fromObject, [\n        'cachedContentTokenCount',\n    ]);\n    if (fromCachedContentTokenCount != null) {\n        setValueByPath(toObject, ['cachedContentTokenCount'], fromCachedContentTokenCount);\n    }\n    const fromResponseTokenCount = getValueByPath(fromObject, [\n        'candidatesTokenCount',\n    ]);\n    if (fromResponseTokenCount != null) {\n        setValueByPath(toObject, ['responseTokenCount'], fromResponseTokenCount);\n    }\n    const fromToolUsePromptTokenCount = getValueByPath(fromObject, [\n        'toolUsePromptTokenCount',\n    ]);\n    if (fromToolUsePromptTokenCount != null) {\n        setValueByPath(toObject, ['toolUsePromptTokenCount'], fromToolUsePromptTokenCount);\n    }\n    const fromThoughtsTokenCount = getValueByPath(fromObject, [\n        'thoughtsTokenCount',\n    ]);\n    if (fromThoughtsTokenCount != null) {\n        setValueByPath(toObject, ['thoughtsTokenCount'], fromThoughtsTokenCount);\n    }\n    const fromTotalTokenCount = getValueByPath(fromObject, [\n        'totalTokenCount',\n    ]);\n    if (fromTotalTokenCount != null) {\n        setValueByPath(toObject, ['totalTokenCount'], fromTotalTokenCount);\n    }\n    const fromPromptTokensDetails = getValueByPath(fromObject, [\n        'promptTokensDetails',\n    ]);\n    if (fromPromptTokensDetails != null) {\n        let transformedList = fromPromptTokensDetails;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['promptTokensDetails'], transformedList);\n    }\n    const fromCacheTokensDetails = getValueByPath(fromObject, [\n        'cacheTokensDetails',\n    ]);\n    if (fromCacheTokensDetails != null) {\n        let transformedList = fromCacheTokensDetails;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['cacheTokensDetails'], transformedList);\n    }\n    const fromResponseTokensDetails = getValueByPath(fromObject, [\n        'candidatesTokensDetails',\n    ]);\n    if (fromResponseTokensDetails != null) {\n        let transformedList = fromResponseTokensDetails;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['responseTokensDetails'], transformedList);\n    }\n    const fromToolUsePromptTokensDetails = getValueByPath(fromObject, [\n        'toolUsePromptTokensDetails',\n    ]);\n    if (fromToolUsePromptTokensDetails != null) {\n        let transformedList = fromToolUsePromptTokensDetails;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['toolUsePromptTokensDetails'], transformedList);\n    }\n    const fromTrafficType = getValueByPath(fromObject, ['trafficType']);\n    if (fromTrafficType != null) {\n        setValueByPath(toObject, ['trafficType'], fromTrafficType);\n    }\n    return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction blobToMldev$1(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromData = getValueByPath(fromObject, ['data']);\n    if (fromData != null) {\n        setValueByPath(toObject, ['data'], fromData);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction candidateFromMldev(fromObject) {\n    const toObject = {};\n    const fromContent = getValueByPath(fromObject, ['content']);\n    if (fromContent != null) {\n        setValueByPath(toObject, ['content'], fromContent);\n    }\n    const fromCitationMetadata = getValueByPath(fromObject, [\n        'citationMetadata',\n    ]);\n    if (fromCitationMetadata != null) {\n        setValueByPath(toObject, ['citationMetadata'], citationMetadataFromMldev(fromCitationMetadata));\n    }\n    const fromTokenCount = getValueByPath(fromObject, ['tokenCount']);\n    if (fromTokenCount != null) {\n        setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n    }\n    const fromFinishReason = getValueByPath(fromObject, ['finishReason']);\n    if (fromFinishReason != null) {\n        setValueByPath(toObject, ['finishReason'], fromFinishReason);\n    }\n    const fromUrlContextMetadata = getValueByPath(fromObject, [\n        'urlContextMetadata',\n    ]);\n    if (fromUrlContextMetadata != null) {\n        setValueByPath(toObject, ['urlContextMetadata'], fromUrlContextMetadata);\n    }\n    const fromAvgLogprobs = getValueByPath(fromObject, ['avgLogprobs']);\n    if (fromAvgLogprobs != null) {\n        setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);\n    }\n    const fromGroundingMetadata = getValueByPath(fromObject, [\n        'groundingMetadata',\n    ]);\n    if (fromGroundingMetadata != null) {\n        setValueByPath(toObject, ['groundingMetadata'], fromGroundingMetadata);\n    }\n    const fromIndex = getValueByPath(fromObject, ['index']);\n    if (fromIndex != null) {\n        setValueByPath(toObject, ['index'], fromIndex);\n    }\n    const fromLogprobsResult = getValueByPath(fromObject, [\n        'logprobsResult',\n    ]);\n    if (fromLogprobsResult != null) {\n        setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);\n    }\n    const fromSafetyRatings = getValueByPath(fromObject, [\n        'safetyRatings',\n    ]);\n    if (fromSafetyRatings != null) {\n        let transformedList = fromSafetyRatings;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['safetyRatings'], transformedList);\n    }\n    return toObject;\n}\nfunction citationMetadataFromMldev(fromObject) {\n    const toObject = {};\n    const fromCitations = getValueByPath(fromObject, ['citationSources']);\n    if (fromCitations != null) {\n        let transformedList = fromCitations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['citations'], transformedList);\n    }\n    return toObject;\n}\nfunction computeTokensParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContents(fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['contents'], transformedList);\n    }\n    return toObject;\n}\nfunction computeTokensResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromTokensInfo = getValueByPath(fromObject, ['tokensInfo']);\n    if (fromTokensInfo != null) {\n        let transformedList = fromTokensInfo;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['tokensInfo'], transformedList);\n    }\n    return toObject;\n}\nfunction contentEmbeddingFromVertex(fromObject) {\n    const toObject = {};\n    const fromValues = getValueByPath(fromObject, ['values']);\n    if (fromValues != null) {\n        setValueByPath(toObject, ['values'], fromValues);\n    }\n    const fromStatistics = getValueByPath(fromObject, ['statistics']);\n    if (fromStatistics != null) {\n        setValueByPath(toObject, ['statistics'], contentEmbeddingStatisticsFromVertex(fromStatistics));\n    }\n    return toObject;\n}\nfunction contentEmbeddingStatisticsFromVertex(fromObject) {\n    const toObject = {};\n    const fromTruncated = getValueByPath(fromObject, ['truncated']);\n    if (fromTruncated != null) {\n        setValueByPath(toObject, ['truncated'], fromTruncated);\n    }\n    const fromTokenCount = getValueByPath(fromObject, ['token_count']);\n    if (fromTokenCount != null) {\n        setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n    }\n    return toObject;\n}\nfunction contentToMldev$1(fromObject) {\n    const toObject = {};\n    const fromParts = getValueByPath(fromObject, ['parts']);\n    if (fromParts != null) {\n        let transformedList = fromParts;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return partToMldev$1(item);\n            });\n        }\n        setValueByPath(toObject, ['parts'], transformedList);\n    }\n    const fromRole = getValueByPath(fromObject, ['role']);\n    if (fromRole != null) {\n        setValueByPath(toObject, ['role'], fromRole);\n    }\n    return toObject;\n}\nfunction controlReferenceConfigToVertex(fromObject) {\n    const toObject = {};\n    const fromControlType = getValueByPath(fromObject, ['controlType']);\n    if (fromControlType != null) {\n        setValueByPath(toObject, ['controlType'], fromControlType);\n    }\n    const fromEnableControlImageComputation = getValueByPath(fromObject, [\n        'enableControlImageComputation',\n    ]);\n    if (fromEnableControlImageComputation != null) {\n        setValueByPath(toObject, ['computeControl'], fromEnableControlImageComputation);\n    }\n    return toObject;\n}\nfunction countTokensConfigToMldev(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['systemInstruction']) !== undefined) {\n        throw new Error('systemInstruction parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['tools']) !== undefined) {\n        throw new Error('tools parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['generationConfig']) !== undefined) {\n        throw new Error('generationConfig parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction countTokensConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['systemInstruction'], tContent(fromSystemInstruction));\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = fromTools;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToVertex(item);\n            });\n        }\n        setValueByPath(parentObject, ['tools'], transformedList);\n    }\n    const fromGenerationConfig = getValueByPath(fromObject, [\n        'generationConfig',\n    ]);\n    if (parentObject !== undefined && fromGenerationConfig != null) {\n        setValueByPath(parentObject, ['generationConfig'], generationConfigToVertex(fromGenerationConfig));\n    }\n    return toObject;\n}\nfunction countTokensParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContents(fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return contentToMldev$1(item);\n            });\n        }\n        setValueByPath(toObject, ['contents'], transformedList);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        countTokensConfigToMldev(fromConfig);\n    }\n    return toObject;\n}\nfunction countTokensParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContents(fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['contents'], transformedList);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        countTokensConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction countTokensResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromTotalTokens = getValueByPath(fromObject, ['totalTokens']);\n    if (fromTotalTokens != null) {\n        setValueByPath(toObject, ['totalTokens'], fromTotalTokens);\n    }\n    const fromCachedContentTokenCount = getValueByPath(fromObject, [\n        'cachedContentTokenCount',\n    ]);\n    if (fromCachedContentTokenCount != null) {\n        setValueByPath(toObject, ['cachedContentTokenCount'], fromCachedContentTokenCount);\n    }\n    return toObject;\n}\nfunction countTokensResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromTotalTokens = getValueByPath(fromObject, ['totalTokens']);\n    if (fromTotalTokens != null) {\n        setValueByPath(toObject, ['totalTokens'], fromTotalTokens);\n    }\n    return toObject;\n}\nfunction deleteModelParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'name'], tModel(apiClient, fromModel));\n    }\n    return toObject;\n}\nfunction deleteModelParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'name'], tModel(apiClient, fromModel));\n    }\n    return toObject;\n}\nfunction deleteModelResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    return toObject;\n}\nfunction deleteModelResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    return toObject;\n}\nfunction editImageConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromOutputGcsUri = getValueByPath(fromObject, ['outputGcsUri']);\n    if (parentObject !== undefined && fromOutputGcsUri != null) {\n        setValueByPath(parentObject, ['parameters', 'storageUri'], fromOutputGcsUri);\n    }\n    const fromNegativePrompt = getValueByPath(fromObject, [\n        'negativePrompt',\n    ]);\n    if (parentObject !== undefined && fromNegativePrompt != null) {\n        setValueByPath(parentObject, ['parameters', 'negativePrompt'], fromNegativePrompt);\n    }\n    const fromNumberOfImages = getValueByPath(fromObject, [\n        'numberOfImages',\n    ]);\n    if (parentObject !== undefined && fromNumberOfImages != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfImages);\n    }\n    const fromAspectRatio = getValueByPath(fromObject, ['aspectRatio']);\n    if (parentObject !== undefined && fromAspectRatio != null) {\n        setValueByPath(parentObject, ['parameters', 'aspectRatio'], fromAspectRatio);\n    }\n    const fromGuidanceScale = getValueByPath(fromObject, [\n        'guidanceScale',\n    ]);\n    if (parentObject !== undefined && fromGuidanceScale != null) {\n        setValueByPath(parentObject, ['parameters', 'guidanceScale'], fromGuidanceScale);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (parentObject !== undefined && fromSeed != null) {\n        setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n    }\n    const fromSafetyFilterLevel = getValueByPath(fromObject, [\n        'safetyFilterLevel',\n    ]);\n    if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n        setValueByPath(parentObject, ['parameters', 'safetySetting'], fromSafetyFilterLevel);\n    }\n    const fromPersonGeneration = getValueByPath(fromObject, [\n        'personGeneration',\n    ]);\n    if (parentObject !== undefined && fromPersonGeneration != null) {\n        setValueByPath(parentObject, ['parameters', 'personGeneration'], fromPersonGeneration);\n    }\n    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [\n        'includeSafetyAttributes',\n    ]);\n    if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n        setValueByPath(parentObject, ['parameters', 'includeSafetyAttributes'], fromIncludeSafetyAttributes);\n    }\n    const fromIncludeRaiReason = getValueByPath(fromObject, [\n        'includeRaiReason',\n    ]);\n    if (parentObject !== undefined && fromIncludeRaiReason != null) {\n        setValueByPath(parentObject, ['parameters', 'includeRaiReason'], fromIncludeRaiReason);\n    }\n    const fromLanguage = getValueByPath(fromObject, ['language']);\n    if (parentObject !== undefined && fromLanguage != null) {\n        setValueByPath(parentObject, ['parameters', 'language'], fromLanguage);\n    }\n    const fromOutputMimeType = getValueByPath(fromObject, [\n        'outputMimeType',\n    ]);\n    if (parentObject !== undefined && fromOutputMimeType != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'mimeType'], fromOutputMimeType);\n    }\n    const fromOutputCompressionQuality = getValueByPath(fromObject, [\n        'outputCompressionQuality',\n    ]);\n    if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'compressionQuality'], fromOutputCompressionQuality);\n    }\n    const fromAddWatermark = getValueByPath(fromObject, ['addWatermark']);\n    if (parentObject !== undefined && fromAddWatermark != null) {\n        setValueByPath(parentObject, ['parameters', 'addWatermark'], fromAddWatermark);\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (parentObject !== undefined && fromLabels != null) {\n        setValueByPath(parentObject, ['labels'], fromLabels);\n    }\n    const fromEditMode = getValueByPath(fromObject, ['editMode']);\n    if (parentObject !== undefined && fromEditMode != null) {\n        setValueByPath(parentObject, ['parameters', 'editMode'], fromEditMode);\n    }\n    const fromBaseSteps = getValueByPath(fromObject, ['baseSteps']);\n    if (parentObject !== undefined && fromBaseSteps != null) {\n        setValueByPath(parentObject, ['parameters', 'editConfig', 'baseSteps'], fromBaseSteps);\n    }\n    return toObject;\n}\nfunction editImageParametersInternalToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (fromPrompt != null) {\n        setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromReferenceImages = getValueByPath(fromObject, [\n        'referenceImages',\n    ]);\n    if (fromReferenceImages != null) {\n        let transformedList = fromReferenceImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return referenceImageAPIInternalToVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['instances[0]', 'referenceImages'], transformedList);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        editImageConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction editImageResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromGeneratedImages = getValueByPath(fromObject, [\n        'predictions',\n    ]);\n    if (fromGeneratedImages != null) {\n        let transformedList = fromGeneratedImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedImageFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedImages'], transformedList);\n    }\n    return toObject;\n}\nfunction embedContentConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromTaskType = getValueByPath(fromObject, ['taskType']);\n    if (parentObject !== undefined && fromTaskType != null) {\n        setValueByPath(parentObject, ['requests[]', 'taskType'], fromTaskType);\n    }\n    const fromTitle = getValueByPath(fromObject, ['title']);\n    if (parentObject !== undefined && fromTitle != null) {\n        setValueByPath(parentObject, ['requests[]', 'title'], fromTitle);\n    }\n    const fromOutputDimensionality = getValueByPath(fromObject, [\n        'outputDimensionality',\n    ]);\n    if (parentObject !== undefined && fromOutputDimensionality != null) {\n        setValueByPath(parentObject, ['requests[]', 'outputDimensionality'], fromOutputDimensionality);\n    }\n    if (getValueByPath(fromObject, ['mimeType']) !== undefined) {\n        throw new Error('mimeType parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['autoTruncate']) !== undefined) {\n        throw new Error('autoTruncate parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction embedContentConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromTaskType = getValueByPath(fromObject, ['taskType']);\n    if (parentObject !== undefined && fromTaskType != null) {\n        setValueByPath(parentObject, ['instances[]', 'task_type'], fromTaskType);\n    }\n    const fromTitle = getValueByPath(fromObject, ['title']);\n    if (parentObject !== undefined && fromTitle != null) {\n        setValueByPath(parentObject, ['instances[]', 'title'], fromTitle);\n    }\n    const fromOutputDimensionality = getValueByPath(fromObject, [\n        'outputDimensionality',\n    ]);\n    if (parentObject !== undefined && fromOutputDimensionality != null) {\n        setValueByPath(parentObject, ['parameters', 'outputDimensionality'], fromOutputDimensionality);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (parentObject !== undefined && fromMimeType != null) {\n        setValueByPath(parentObject, ['instances[]', 'mimeType'], fromMimeType);\n    }\n    const fromAutoTruncate = getValueByPath(fromObject, ['autoTruncate']);\n    if (parentObject !== undefined && fromAutoTruncate != null) {\n        setValueByPath(parentObject, ['parameters', 'autoTruncate'], fromAutoTruncate);\n    }\n    return toObject;\n}\nfunction embedContentParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContentsForEmbed(apiClient, fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['requests[]', 'content'], transformedList);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        embedContentConfigToMldev(fromConfig, toObject);\n    }\n    const fromModelForEmbedContent = getValueByPath(fromObject, ['model']);\n    if (fromModelForEmbedContent !== undefined) {\n        setValueByPath(toObject, ['requests[]', 'model'], tModel(apiClient, fromModelForEmbedContent));\n    }\n    return toObject;\n}\nfunction embedContentParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContentsForEmbed(apiClient, fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['instances[]', 'content'], transformedList);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        embedContentConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction embedContentResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromEmbeddings = getValueByPath(fromObject, ['embeddings']);\n    if (fromEmbeddings != null) {\n        let transformedList = fromEmbeddings;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['embeddings'], transformedList);\n    }\n    const fromMetadata = getValueByPath(fromObject, ['metadata']);\n    if (fromMetadata != null) {\n        setValueByPath(toObject, ['metadata'], fromMetadata);\n    }\n    return toObject;\n}\nfunction embedContentResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromEmbeddings = getValueByPath(fromObject, [\n        'predictions[]',\n        'embeddings',\n    ]);\n    if (fromEmbeddings != null) {\n        let transformedList = fromEmbeddings;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return contentEmbeddingFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['embeddings'], transformedList);\n    }\n    const fromMetadata = getValueByPath(fromObject, ['metadata']);\n    if (fromMetadata != null) {\n        setValueByPath(toObject, ['metadata'], fromMetadata);\n    }\n    return toObject;\n}\nfunction endpointFromVertex(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['endpoint']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromDeployedModelId = getValueByPath(fromObject, [\n        'deployedModelId',\n    ]);\n    if (fromDeployedModelId != null) {\n        setValueByPath(toObject, ['deployedModelId'], fromDeployedModelId);\n    }\n    return toObject;\n}\nfunction fileDataToMldev$1(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromFileUri = getValueByPath(fromObject, ['fileUri']);\n    if (fromFileUri != null) {\n        setValueByPath(toObject, ['fileUri'], fromFileUri);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction functionDeclarationToVertex(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['behavior']) !== undefined) {\n        throw new Error('behavior parameter is not supported in Vertex AI.');\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (fromDescription != null) {\n        setValueByPath(toObject, ['description'], fromDescription);\n    }\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromParameters = getValueByPath(fromObject, ['parameters']);\n    if (fromParameters != null) {\n        setValueByPath(toObject, ['parameters'], fromParameters);\n    }\n    const fromParametersJsonSchema = getValueByPath(fromObject, [\n        'parametersJsonSchema',\n    ]);\n    if (fromParametersJsonSchema != null) {\n        setValueByPath(toObject, ['parametersJsonSchema'], fromParametersJsonSchema);\n    }\n    const fromResponse = getValueByPath(fromObject, ['response']);\n    if (fromResponse != null) {\n        setValueByPath(toObject, ['response'], fromResponse);\n    }\n    const fromResponseJsonSchema = getValueByPath(fromObject, [\n        'responseJsonSchema',\n    ]);\n    if (fromResponseJsonSchema != null) {\n        setValueByPath(toObject, ['responseJsonSchema'], fromResponseJsonSchema);\n    }\n    return toObject;\n}\nfunction generateContentConfigToMldev(apiClient, fromObject, parentObject) {\n    const toObject = {};\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['systemInstruction'], contentToMldev$1(tContent(fromSystemInstruction)));\n    }\n    const fromTemperature = getValueByPath(fromObject, ['temperature']);\n    if (fromTemperature != null) {\n        setValueByPath(toObject, ['temperature'], fromTemperature);\n    }\n    const fromTopP = getValueByPath(fromObject, ['topP']);\n    if (fromTopP != null) {\n        setValueByPath(toObject, ['topP'], fromTopP);\n    }\n    const fromTopK = getValueByPath(fromObject, ['topK']);\n    if (fromTopK != null) {\n        setValueByPath(toObject, ['topK'], fromTopK);\n    }\n    const fromCandidateCount = getValueByPath(fromObject, [\n        'candidateCount',\n    ]);\n    if (fromCandidateCount != null) {\n        setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n    }\n    const fromMaxOutputTokens = getValueByPath(fromObject, [\n        'maxOutputTokens',\n    ]);\n    if (fromMaxOutputTokens != null) {\n        setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n    }\n    const fromStopSequences = getValueByPath(fromObject, [\n        'stopSequences',\n    ]);\n    if (fromStopSequences != null) {\n        setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n    }\n    const fromResponseLogprobs = getValueByPath(fromObject, [\n        'responseLogprobs',\n    ]);\n    if (fromResponseLogprobs != null) {\n        setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n    }\n    const fromLogprobs = getValueByPath(fromObject, ['logprobs']);\n    if (fromLogprobs != null) {\n        setValueByPath(toObject, ['logprobs'], fromLogprobs);\n    }\n    const fromPresencePenalty = getValueByPath(fromObject, [\n        'presencePenalty',\n    ]);\n    if (fromPresencePenalty != null) {\n        setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n    }\n    const fromFrequencyPenalty = getValueByPath(fromObject, [\n        'frequencyPenalty',\n    ]);\n    if (fromFrequencyPenalty != null) {\n        setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (fromSeed != null) {\n        setValueByPath(toObject, ['seed'], fromSeed);\n    }\n    const fromResponseMimeType = getValueByPath(fromObject, [\n        'responseMimeType',\n    ]);\n    if (fromResponseMimeType != null) {\n        setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n    }\n    const fromResponseSchema = getValueByPath(fromObject, [\n        'responseSchema',\n    ]);\n    if (fromResponseSchema != null) {\n        setValueByPath(toObject, ['responseSchema'], tSchema(fromResponseSchema));\n    }\n    const fromResponseJsonSchema = getValueByPath(fromObject, [\n        'responseJsonSchema',\n    ]);\n    if (fromResponseJsonSchema != null) {\n        setValueByPath(toObject, ['responseJsonSchema'], fromResponseJsonSchema);\n    }\n    if (getValueByPath(fromObject, ['routingConfig']) !== undefined) {\n        throw new Error('routingConfig parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['modelSelectionConfig']) !== undefined) {\n        throw new Error('modelSelectionConfig parameter is not supported in Gemini API.');\n    }\n    const fromSafetySettings = getValueByPath(fromObject, [\n        'safetySettings',\n    ]);\n    if (parentObject !== undefined && fromSafetySettings != null) {\n        let transformedList = fromSafetySettings;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return safetySettingToMldev(item);\n            });\n        }\n        setValueByPath(parentObject, ['safetySettings'], transformedList);\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = tTools(fromTools);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToMldev$1(tTool(item));\n            });\n        }\n        setValueByPath(parentObject, ['tools'], transformedList);\n    }\n    const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n    if (parentObject !== undefined && fromToolConfig != null) {\n        setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n    }\n    if (getValueByPath(fromObject, ['labels']) !== undefined) {\n        throw new Error('labels parameter is not supported in Gemini API.');\n    }\n    const fromCachedContent = getValueByPath(fromObject, [\n        'cachedContent',\n    ]);\n    if (parentObject !== undefined && fromCachedContent != null) {\n        setValueByPath(parentObject, ['cachedContent'], tCachedContentName(apiClient, fromCachedContent));\n    }\n    const fromResponseModalities = getValueByPath(fromObject, [\n        'responseModalities',\n    ]);\n    if (fromResponseModalities != null) {\n        setValueByPath(toObject, ['responseModalities'], fromResponseModalities);\n    }\n    const fromMediaResolution = getValueByPath(fromObject, [\n        'mediaResolution',\n    ]);\n    if (fromMediaResolution != null) {\n        setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n    }\n    const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n    if (fromSpeechConfig != null) {\n        setValueByPath(toObject, ['speechConfig'], tSpeechConfig(fromSpeechConfig));\n    }\n    if (getValueByPath(fromObject, ['audioTimestamp']) !== undefined) {\n        throw new Error('audioTimestamp parameter is not supported in Gemini API.');\n    }\n    const fromThinkingConfig = getValueByPath(fromObject, [\n        'thinkingConfig',\n    ]);\n    if (fromThinkingConfig != null) {\n        setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n    }\n    const fromImageConfig = getValueByPath(fromObject, ['imageConfig']);\n    if (fromImageConfig != null) {\n        setValueByPath(toObject, ['imageConfig'], fromImageConfig);\n    }\n    return toObject;\n}\nfunction generateContentConfigToVertex(apiClient, fromObject, parentObject) {\n    const toObject = {};\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['systemInstruction'], tContent(fromSystemInstruction));\n    }\n    const fromTemperature = getValueByPath(fromObject, ['temperature']);\n    if (fromTemperature != null) {\n        setValueByPath(toObject, ['temperature'], fromTemperature);\n    }\n    const fromTopP = getValueByPath(fromObject, ['topP']);\n    if (fromTopP != null) {\n        setValueByPath(toObject, ['topP'], fromTopP);\n    }\n    const fromTopK = getValueByPath(fromObject, ['topK']);\n    if (fromTopK != null) {\n        setValueByPath(toObject, ['topK'], fromTopK);\n    }\n    const fromCandidateCount = getValueByPath(fromObject, [\n        'candidateCount',\n    ]);\n    if (fromCandidateCount != null) {\n        setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n    }\n    const fromMaxOutputTokens = getValueByPath(fromObject, [\n        'maxOutputTokens',\n    ]);\n    if (fromMaxOutputTokens != null) {\n        setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n    }\n    const fromStopSequences = getValueByPath(fromObject, [\n        'stopSequences',\n    ]);\n    if (fromStopSequences != null) {\n        setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n    }\n    const fromResponseLogprobs = getValueByPath(fromObject, [\n        'responseLogprobs',\n    ]);\n    if (fromResponseLogprobs != null) {\n        setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n    }\n    const fromLogprobs = getValueByPath(fromObject, ['logprobs']);\n    if (fromLogprobs != null) {\n        setValueByPath(toObject, ['logprobs'], fromLogprobs);\n    }\n    const fromPresencePenalty = getValueByPath(fromObject, [\n        'presencePenalty',\n    ]);\n    if (fromPresencePenalty != null) {\n        setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n    }\n    const fromFrequencyPenalty = getValueByPath(fromObject, [\n        'frequencyPenalty',\n    ]);\n    if (fromFrequencyPenalty != null) {\n        setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (fromSeed != null) {\n        setValueByPath(toObject, ['seed'], fromSeed);\n    }\n    const fromResponseMimeType = getValueByPath(fromObject, [\n        'responseMimeType',\n    ]);\n    if (fromResponseMimeType != null) {\n        setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n    }\n    const fromResponseSchema = getValueByPath(fromObject, [\n        'responseSchema',\n    ]);\n    if (fromResponseSchema != null) {\n        setValueByPath(toObject, ['responseSchema'], tSchema(fromResponseSchema));\n    }\n    const fromResponseJsonSchema = getValueByPath(fromObject, [\n        'responseJsonSchema',\n    ]);\n    if (fromResponseJsonSchema != null) {\n        setValueByPath(toObject, ['responseJsonSchema'], fromResponseJsonSchema);\n    }\n    const fromRoutingConfig = getValueByPath(fromObject, [\n        'routingConfig',\n    ]);\n    if (fromRoutingConfig != null) {\n        setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);\n    }\n    const fromModelSelectionConfig = getValueByPath(fromObject, [\n        'modelSelectionConfig',\n    ]);\n    if (fromModelSelectionConfig != null) {\n        setValueByPath(toObject, ['modelConfig'], fromModelSelectionConfig);\n    }\n    const fromSafetySettings = getValueByPath(fromObject, [\n        'safetySettings',\n    ]);\n    if (parentObject !== undefined && fromSafetySettings != null) {\n        let transformedList = fromSafetySettings;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(parentObject, ['safetySettings'], transformedList);\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = tTools(fromTools);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToVertex(tTool(item));\n            });\n        }\n        setValueByPath(parentObject, ['tools'], transformedList);\n    }\n    const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n    if (parentObject !== undefined && fromToolConfig != null) {\n        setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (parentObject !== undefined && fromLabels != null) {\n        setValueByPath(parentObject, ['labels'], fromLabels);\n    }\n    const fromCachedContent = getValueByPath(fromObject, [\n        'cachedContent',\n    ]);\n    if (parentObject !== undefined && fromCachedContent != null) {\n        setValueByPath(parentObject, ['cachedContent'], tCachedContentName(apiClient, fromCachedContent));\n    }\n    const fromResponseModalities = getValueByPath(fromObject, [\n        'responseModalities',\n    ]);\n    if (fromResponseModalities != null) {\n        setValueByPath(toObject, ['responseModalities'], fromResponseModalities);\n    }\n    const fromMediaResolution = getValueByPath(fromObject, [\n        'mediaResolution',\n    ]);\n    if (fromMediaResolution != null) {\n        setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n    }\n    const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n    if (fromSpeechConfig != null) {\n        setValueByPath(toObject, ['speechConfig'], speechConfigToVertex(tSpeechConfig(fromSpeechConfig)));\n    }\n    const fromAudioTimestamp = getValueByPath(fromObject, [\n        'audioTimestamp',\n    ]);\n    if (fromAudioTimestamp != null) {\n        setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);\n    }\n    const fromThinkingConfig = getValueByPath(fromObject, [\n        'thinkingConfig',\n    ]);\n    if (fromThinkingConfig != null) {\n        setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n    }\n    const fromImageConfig = getValueByPath(fromObject, ['imageConfig']);\n    if (fromImageConfig != null) {\n        setValueByPath(toObject, ['imageConfig'], fromImageConfig);\n    }\n    return toObject;\n}\nfunction generateContentParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContents(fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return contentToMldev$1(item);\n            });\n        }\n        setValueByPath(toObject, ['contents'], transformedList);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        setValueByPath(toObject, ['generationConfig'], generateContentConfigToMldev(apiClient, fromConfig, toObject));\n    }\n    return toObject;\n}\nfunction generateContentParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromContents = getValueByPath(fromObject, ['contents']);\n    if (fromContents != null) {\n        let transformedList = tContents(fromContents);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['contents'], transformedList);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        setValueByPath(toObject, ['generationConfig'], generateContentConfigToVertex(apiClient, fromConfig, toObject));\n    }\n    return toObject;\n}\nfunction generateContentResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromCandidates = getValueByPath(fromObject, ['candidates']);\n    if (fromCandidates != null) {\n        let transformedList = fromCandidates;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return candidateFromMldev(item);\n            });\n        }\n        setValueByPath(toObject, ['candidates'], transformedList);\n    }\n    const fromModelVersion = getValueByPath(fromObject, ['modelVersion']);\n    if (fromModelVersion != null) {\n        setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n    }\n    const fromPromptFeedback = getValueByPath(fromObject, [\n        'promptFeedback',\n    ]);\n    if (fromPromptFeedback != null) {\n        setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n    }\n    const fromResponseId = getValueByPath(fromObject, ['responseId']);\n    if (fromResponseId != null) {\n        setValueByPath(toObject, ['responseId'], fromResponseId);\n    }\n    const fromUsageMetadata = getValueByPath(fromObject, [\n        'usageMetadata',\n    ]);\n    if (fromUsageMetadata != null) {\n        setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n    }\n    return toObject;\n}\nfunction generateContentResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromCandidates = getValueByPath(fromObject, ['candidates']);\n    if (fromCandidates != null) {\n        let transformedList = fromCandidates;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['candidates'], transformedList);\n    }\n    const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n    if (fromCreateTime != null) {\n        setValueByPath(toObject, ['createTime'], fromCreateTime);\n    }\n    const fromModelVersion = getValueByPath(fromObject, ['modelVersion']);\n    if (fromModelVersion != null) {\n        setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n    }\n    const fromPromptFeedback = getValueByPath(fromObject, [\n        'promptFeedback',\n    ]);\n    if (fromPromptFeedback != null) {\n        setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n    }\n    const fromResponseId = getValueByPath(fromObject, ['responseId']);\n    if (fromResponseId != null) {\n        setValueByPath(toObject, ['responseId'], fromResponseId);\n    }\n    const fromUsageMetadata = getValueByPath(fromObject, [\n        'usageMetadata',\n    ]);\n    if (fromUsageMetadata != null) {\n        setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n    }\n    return toObject;\n}\nfunction generateImagesConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {\n        throw new Error('outputGcsUri parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['negativePrompt']) !== undefined) {\n        throw new Error('negativePrompt parameter is not supported in Gemini API.');\n    }\n    const fromNumberOfImages = getValueByPath(fromObject, [\n        'numberOfImages',\n    ]);\n    if (parentObject !== undefined && fromNumberOfImages != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfImages);\n    }\n    const fromAspectRatio = getValueByPath(fromObject, ['aspectRatio']);\n    if (parentObject !== undefined && fromAspectRatio != null) {\n        setValueByPath(parentObject, ['parameters', 'aspectRatio'], fromAspectRatio);\n    }\n    const fromGuidanceScale = getValueByPath(fromObject, [\n        'guidanceScale',\n    ]);\n    if (parentObject !== undefined && fromGuidanceScale != null) {\n        setValueByPath(parentObject, ['parameters', 'guidanceScale'], fromGuidanceScale);\n    }\n    if (getValueByPath(fromObject, ['seed']) !== undefined) {\n        throw new Error('seed parameter is not supported in Gemini API.');\n    }\n    const fromSafetyFilterLevel = getValueByPath(fromObject, [\n        'safetyFilterLevel',\n    ]);\n    if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n        setValueByPath(parentObject, ['parameters', 'safetySetting'], fromSafetyFilterLevel);\n    }\n    const fromPersonGeneration = getValueByPath(fromObject, [\n        'personGeneration',\n    ]);\n    if (parentObject !== undefined && fromPersonGeneration != null) {\n        setValueByPath(parentObject, ['parameters', 'personGeneration'], fromPersonGeneration);\n    }\n    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [\n        'includeSafetyAttributes',\n    ]);\n    if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n        setValueByPath(parentObject, ['parameters', 'includeSafetyAttributes'], fromIncludeSafetyAttributes);\n    }\n    const fromIncludeRaiReason = getValueByPath(fromObject, [\n        'includeRaiReason',\n    ]);\n    if (parentObject !== undefined && fromIncludeRaiReason != null) {\n        setValueByPath(parentObject, ['parameters', 'includeRaiReason'], fromIncludeRaiReason);\n    }\n    const fromLanguage = getValueByPath(fromObject, ['language']);\n    if (parentObject !== undefined && fromLanguage != null) {\n        setValueByPath(parentObject, ['parameters', 'language'], fromLanguage);\n    }\n    const fromOutputMimeType = getValueByPath(fromObject, [\n        'outputMimeType',\n    ]);\n    if (parentObject !== undefined && fromOutputMimeType != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'mimeType'], fromOutputMimeType);\n    }\n    const fromOutputCompressionQuality = getValueByPath(fromObject, [\n        'outputCompressionQuality',\n    ]);\n    if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'compressionQuality'], fromOutputCompressionQuality);\n    }\n    if (getValueByPath(fromObject, ['addWatermark']) !== undefined) {\n        throw new Error('addWatermark parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['labels']) !== undefined) {\n        throw new Error('labels parameter is not supported in Gemini API.');\n    }\n    const fromImageSize = getValueByPath(fromObject, ['imageSize']);\n    if (parentObject !== undefined && fromImageSize != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleImageSize'], fromImageSize);\n    }\n    if (getValueByPath(fromObject, ['enhancePrompt']) !== undefined) {\n        throw new Error('enhancePrompt parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction generateImagesConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromOutputGcsUri = getValueByPath(fromObject, ['outputGcsUri']);\n    if (parentObject !== undefined && fromOutputGcsUri != null) {\n        setValueByPath(parentObject, ['parameters', 'storageUri'], fromOutputGcsUri);\n    }\n    const fromNegativePrompt = getValueByPath(fromObject, [\n        'negativePrompt',\n    ]);\n    if (parentObject !== undefined && fromNegativePrompt != null) {\n        setValueByPath(parentObject, ['parameters', 'negativePrompt'], fromNegativePrompt);\n    }\n    const fromNumberOfImages = getValueByPath(fromObject, [\n        'numberOfImages',\n    ]);\n    if (parentObject !== undefined && fromNumberOfImages != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfImages);\n    }\n    const fromAspectRatio = getValueByPath(fromObject, ['aspectRatio']);\n    if (parentObject !== undefined && fromAspectRatio != null) {\n        setValueByPath(parentObject, ['parameters', 'aspectRatio'], fromAspectRatio);\n    }\n    const fromGuidanceScale = getValueByPath(fromObject, [\n        'guidanceScale',\n    ]);\n    if (parentObject !== undefined && fromGuidanceScale != null) {\n        setValueByPath(parentObject, ['parameters', 'guidanceScale'], fromGuidanceScale);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (parentObject !== undefined && fromSeed != null) {\n        setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n    }\n    const fromSafetyFilterLevel = getValueByPath(fromObject, [\n        'safetyFilterLevel',\n    ]);\n    if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n        setValueByPath(parentObject, ['parameters', 'safetySetting'], fromSafetyFilterLevel);\n    }\n    const fromPersonGeneration = getValueByPath(fromObject, [\n        'personGeneration',\n    ]);\n    if (parentObject !== undefined && fromPersonGeneration != null) {\n        setValueByPath(parentObject, ['parameters', 'personGeneration'], fromPersonGeneration);\n    }\n    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [\n        'includeSafetyAttributes',\n    ]);\n    if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n        setValueByPath(parentObject, ['parameters', 'includeSafetyAttributes'], fromIncludeSafetyAttributes);\n    }\n    const fromIncludeRaiReason = getValueByPath(fromObject, [\n        'includeRaiReason',\n    ]);\n    if (parentObject !== undefined && fromIncludeRaiReason != null) {\n        setValueByPath(parentObject, ['parameters', 'includeRaiReason'], fromIncludeRaiReason);\n    }\n    const fromLanguage = getValueByPath(fromObject, ['language']);\n    if (parentObject !== undefined && fromLanguage != null) {\n        setValueByPath(parentObject, ['parameters', 'language'], fromLanguage);\n    }\n    const fromOutputMimeType = getValueByPath(fromObject, [\n        'outputMimeType',\n    ]);\n    if (parentObject !== undefined && fromOutputMimeType != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'mimeType'], fromOutputMimeType);\n    }\n    const fromOutputCompressionQuality = getValueByPath(fromObject, [\n        'outputCompressionQuality',\n    ]);\n    if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'compressionQuality'], fromOutputCompressionQuality);\n    }\n    const fromAddWatermark = getValueByPath(fromObject, ['addWatermark']);\n    if (parentObject !== undefined && fromAddWatermark != null) {\n        setValueByPath(parentObject, ['parameters', 'addWatermark'], fromAddWatermark);\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (parentObject !== undefined && fromLabels != null) {\n        setValueByPath(parentObject, ['labels'], fromLabels);\n    }\n    const fromImageSize = getValueByPath(fromObject, ['imageSize']);\n    if (parentObject !== undefined && fromImageSize != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleImageSize'], fromImageSize);\n    }\n    const fromEnhancePrompt = getValueByPath(fromObject, [\n        'enhancePrompt',\n    ]);\n    if (parentObject !== undefined && fromEnhancePrompt != null) {\n        setValueByPath(parentObject, ['parameters', 'enhancePrompt'], fromEnhancePrompt);\n    }\n    return toObject;\n}\nfunction generateImagesParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (fromPrompt != null) {\n        setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        generateImagesConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction generateImagesParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (fromPrompt != null) {\n        setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        generateImagesConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction generateImagesResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromGeneratedImages = getValueByPath(fromObject, [\n        'predictions',\n    ]);\n    if (fromGeneratedImages != null) {\n        let transformedList = fromGeneratedImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedImageFromMldev(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedImages'], transformedList);\n    }\n    const fromPositivePromptSafetyAttributes = getValueByPath(fromObject, [\n        'positivePromptSafetyAttributes',\n    ]);\n    if (fromPositivePromptSafetyAttributes != null) {\n        setValueByPath(toObject, ['positivePromptSafetyAttributes'], safetyAttributesFromMldev(fromPositivePromptSafetyAttributes));\n    }\n    return toObject;\n}\nfunction generateImagesResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromGeneratedImages = getValueByPath(fromObject, [\n        'predictions',\n    ]);\n    if (fromGeneratedImages != null) {\n        let transformedList = fromGeneratedImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedImageFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedImages'], transformedList);\n    }\n    const fromPositivePromptSafetyAttributes = getValueByPath(fromObject, [\n        'positivePromptSafetyAttributes',\n    ]);\n    if (fromPositivePromptSafetyAttributes != null) {\n        setValueByPath(toObject, ['positivePromptSafetyAttributes'], safetyAttributesFromVertex(fromPositivePromptSafetyAttributes));\n    }\n    return toObject;\n}\nfunction generateVideosConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromNumberOfVideos = getValueByPath(fromObject, [\n        'numberOfVideos',\n    ]);\n    if (parentObject !== undefined && fromNumberOfVideos != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfVideos);\n    }\n    if (getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {\n        throw new Error('outputGcsUri parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['fps']) !== undefined) {\n        throw new Error('fps parameter is not supported in Gemini API.');\n    }\n    const fromDurationSeconds = getValueByPath(fromObject, [\n        'durationSeconds',\n    ]);\n    if (parentObject !== undefined && fromDurationSeconds != null) {\n        setValueByPath(parentObject, ['parameters', 'durationSeconds'], fromDurationSeconds);\n    }\n    if (getValueByPath(fromObject, ['seed']) !== undefined) {\n        throw new Error('seed parameter is not supported in Gemini API.');\n    }\n    const fromAspectRatio = getValueByPath(fromObject, ['aspectRatio']);\n    if (parentObject !== undefined && fromAspectRatio != null) {\n        setValueByPath(parentObject, ['parameters', 'aspectRatio'], fromAspectRatio);\n    }\n    const fromResolution = getValueByPath(fromObject, ['resolution']);\n    if (parentObject !== undefined && fromResolution != null) {\n        setValueByPath(parentObject, ['parameters', 'resolution'], fromResolution);\n    }\n    const fromPersonGeneration = getValueByPath(fromObject, [\n        'personGeneration',\n    ]);\n    if (parentObject !== undefined && fromPersonGeneration != null) {\n        setValueByPath(parentObject, ['parameters', 'personGeneration'], fromPersonGeneration);\n    }\n    if (getValueByPath(fromObject, ['pubsubTopic']) !== undefined) {\n        throw new Error('pubsubTopic parameter is not supported in Gemini API.');\n    }\n    const fromNegativePrompt = getValueByPath(fromObject, [\n        'negativePrompt',\n    ]);\n    if (parentObject !== undefined && fromNegativePrompt != null) {\n        setValueByPath(parentObject, ['parameters', 'negativePrompt'], fromNegativePrompt);\n    }\n    const fromEnhancePrompt = getValueByPath(fromObject, [\n        'enhancePrompt',\n    ]);\n    if (parentObject !== undefined && fromEnhancePrompt != null) {\n        setValueByPath(parentObject, ['parameters', 'enhancePrompt'], fromEnhancePrompt);\n    }\n    if (getValueByPath(fromObject, ['generateAudio']) !== undefined) {\n        throw new Error('generateAudio parameter is not supported in Gemini API.');\n    }\n    const fromLastFrame = getValueByPath(fromObject, ['lastFrame']);\n    if (parentObject !== undefined && fromLastFrame != null) {\n        setValueByPath(parentObject, ['instances[0]', 'lastFrame'], imageToMldev(fromLastFrame));\n    }\n    const fromReferenceImages = getValueByPath(fromObject, [\n        'referenceImages',\n    ]);\n    if (parentObject !== undefined && fromReferenceImages != null) {\n        let transformedList = fromReferenceImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return videoGenerationReferenceImageToMldev(item);\n            });\n        }\n        setValueByPath(parentObject, ['instances[0]', 'referenceImages'], transformedList);\n    }\n    if (getValueByPath(fromObject, ['mask']) !== undefined) {\n        throw new Error('mask parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['compressionQuality']) !== undefined) {\n        throw new Error('compressionQuality parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction generateVideosConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromNumberOfVideos = getValueByPath(fromObject, [\n        'numberOfVideos',\n    ]);\n    if (parentObject !== undefined && fromNumberOfVideos != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfVideos);\n    }\n    const fromOutputGcsUri = getValueByPath(fromObject, ['outputGcsUri']);\n    if (parentObject !== undefined && fromOutputGcsUri != null) {\n        setValueByPath(parentObject, ['parameters', 'storageUri'], fromOutputGcsUri);\n    }\n    const fromFps = getValueByPath(fromObject, ['fps']);\n    if (parentObject !== undefined && fromFps != null) {\n        setValueByPath(parentObject, ['parameters', 'fps'], fromFps);\n    }\n    const fromDurationSeconds = getValueByPath(fromObject, [\n        'durationSeconds',\n    ]);\n    if (parentObject !== undefined && fromDurationSeconds != null) {\n        setValueByPath(parentObject, ['parameters', 'durationSeconds'], fromDurationSeconds);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (parentObject !== undefined && fromSeed != null) {\n        setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n    }\n    const fromAspectRatio = getValueByPath(fromObject, ['aspectRatio']);\n    if (parentObject !== undefined && fromAspectRatio != null) {\n        setValueByPath(parentObject, ['parameters', 'aspectRatio'], fromAspectRatio);\n    }\n    const fromResolution = getValueByPath(fromObject, ['resolution']);\n    if (parentObject !== undefined && fromResolution != null) {\n        setValueByPath(parentObject, ['parameters', 'resolution'], fromResolution);\n    }\n    const fromPersonGeneration = getValueByPath(fromObject, [\n        'personGeneration',\n    ]);\n    if (parentObject !== undefined && fromPersonGeneration != null) {\n        setValueByPath(parentObject, ['parameters', 'personGeneration'], fromPersonGeneration);\n    }\n    const fromPubsubTopic = getValueByPath(fromObject, ['pubsubTopic']);\n    if (parentObject !== undefined && fromPubsubTopic != null) {\n        setValueByPath(parentObject, ['parameters', 'pubsubTopic'], fromPubsubTopic);\n    }\n    const fromNegativePrompt = getValueByPath(fromObject, [\n        'negativePrompt',\n    ]);\n    if (parentObject !== undefined && fromNegativePrompt != null) {\n        setValueByPath(parentObject, ['parameters', 'negativePrompt'], fromNegativePrompt);\n    }\n    const fromEnhancePrompt = getValueByPath(fromObject, [\n        'enhancePrompt',\n    ]);\n    if (parentObject !== undefined && fromEnhancePrompt != null) {\n        setValueByPath(parentObject, ['parameters', 'enhancePrompt'], fromEnhancePrompt);\n    }\n    const fromGenerateAudio = getValueByPath(fromObject, [\n        'generateAudio',\n    ]);\n    if (parentObject !== undefined && fromGenerateAudio != null) {\n        setValueByPath(parentObject, ['parameters', 'generateAudio'], fromGenerateAudio);\n    }\n    const fromLastFrame = getValueByPath(fromObject, ['lastFrame']);\n    if (parentObject !== undefined && fromLastFrame != null) {\n        setValueByPath(parentObject, ['instances[0]', 'lastFrame'], imageToVertex(fromLastFrame));\n    }\n    const fromReferenceImages = getValueByPath(fromObject, [\n        'referenceImages',\n    ]);\n    if (parentObject !== undefined && fromReferenceImages != null) {\n        let transformedList = fromReferenceImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return videoGenerationReferenceImageToVertex(item);\n            });\n        }\n        setValueByPath(parentObject, ['instances[0]', 'referenceImages'], transformedList);\n    }\n    const fromMask = getValueByPath(fromObject, ['mask']);\n    if (parentObject !== undefined && fromMask != null) {\n        setValueByPath(parentObject, ['instances[0]', 'mask'], videoGenerationMaskToVertex(fromMask));\n    }\n    const fromCompressionQuality = getValueByPath(fromObject, [\n        'compressionQuality',\n    ]);\n    if (parentObject !== undefined && fromCompressionQuality != null) {\n        setValueByPath(parentObject, ['parameters', 'compressionQuality'], fromCompressionQuality);\n    }\n    return toObject;\n}\nfunction generateVideosOperationFromMldev(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromMetadata = getValueByPath(fromObject, ['metadata']);\n    if (fromMetadata != null) {\n        setValueByPath(toObject, ['metadata'], fromMetadata);\n    }\n    const fromDone = getValueByPath(fromObject, ['done']);\n    if (fromDone != null) {\n        setValueByPath(toObject, ['done'], fromDone);\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    const fromResponse = getValueByPath(fromObject, [\n        'response',\n        'generateVideoResponse',\n    ]);\n    if (fromResponse != null) {\n        setValueByPath(toObject, ['response'], generateVideosResponseFromMldev(fromResponse));\n    }\n    return toObject;\n}\nfunction generateVideosOperationFromVertex(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromMetadata = getValueByPath(fromObject, ['metadata']);\n    if (fromMetadata != null) {\n        setValueByPath(toObject, ['metadata'], fromMetadata);\n    }\n    const fromDone = getValueByPath(fromObject, ['done']);\n    if (fromDone != null) {\n        setValueByPath(toObject, ['done'], fromDone);\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    const fromResponse = getValueByPath(fromObject, ['response']);\n    if (fromResponse != null) {\n        setValueByPath(toObject, ['response'], generateVideosResponseFromVertex(fromResponse));\n    }\n    return toObject;\n}\nfunction generateVideosParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (fromPrompt != null) {\n        setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['instances[0]', 'image'], imageToMldev(fromImage));\n    }\n    const fromVideo = getValueByPath(fromObject, ['video']);\n    if (fromVideo != null) {\n        setValueByPath(toObject, ['instances[0]', 'video'], videoToMldev(fromVideo));\n    }\n    const fromSource = getValueByPath(fromObject, ['source']);\n    if (fromSource != null) {\n        generateVideosSourceToMldev(fromSource, toObject);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        generateVideosConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction generateVideosParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (fromPrompt != null) {\n        setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['instances[0]', 'image'], imageToVertex(fromImage));\n    }\n    const fromVideo = getValueByPath(fromObject, ['video']);\n    if (fromVideo != null) {\n        setValueByPath(toObject, ['instances[0]', 'video'], videoToVertex(fromVideo));\n    }\n    const fromSource = getValueByPath(fromObject, ['source']);\n    if (fromSource != null) {\n        generateVideosSourceToVertex(fromSource, toObject);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        generateVideosConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction generateVideosResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromGeneratedVideos = getValueByPath(fromObject, [\n        'generatedSamples',\n    ]);\n    if (fromGeneratedVideos != null) {\n        let transformedList = fromGeneratedVideos;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedVideoFromMldev(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedVideos'], transformedList);\n    }\n    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [\n        'raiMediaFilteredCount',\n    ]);\n    if (fromRaiMediaFilteredCount != null) {\n        setValueByPath(toObject, ['raiMediaFilteredCount'], fromRaiMediaFilteredCount);\n    }\n    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [\n        'raiMediaFilteredReasons',\n    ]);\n    if (fromRaiMediaFilteredReasons != null) {\n        setValueByPath(toObject, ['raiMediaFilteredReasons'], fromRaiMediaFilteredReasons);\n    }\n    return toObject;\n}\nfunction generateVideosResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromGeneratedVideos = getValueByPath(fromObject, ['videos']);\n    if (fromGeneratedVideos != null) {\n        let transformedList = fromGeneratedVideos;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedVideoFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedVideos'], transformedList);\n    }\n    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [\n        'raiMediaFilteredCount',\n    ]);\n    if (fromRaiMediaFilteredCount != null) {\n        setValueByPath(toObject, ['raiMediaFilteredCount'], fromRaiMediaFilteredCount);\n    }\n    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [\n        'raiMediaFilteredReasons',\n    ]);\n    if (fromRaiMediaFilteredReasons != null) {\n        setValueByPath(toObject, ['raiMediaFilteredReasons'], fromRaiMediaFilteredReasons);\n    }\n    return toObject;\n}\nfunction generateVideosSourceToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (parentObject !== undefined && fromPrompt != null) {\n        setValueByPath(parentObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (parentObject !== undefined && fromImage != null) {\n        setValueByPath(parentObject, ['instances[0]', 'image'], imageToMldev(fromImage));\n    }\n    const fromVideo = getValueByPath(fromObject, ['video']);\n    if (parentObject !== undefined && fromVideo != null) {\n        setValueByPath(parentObject, ['instances[0]', 'video'], videoToMldev(fromVideo));\n    }\n    return toObject;\n}\nfunction generateVideosSourceToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (parentObject !== undefined && fromPrompt != null) {\n        setValueByPath(parentObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (parentObject !== undefined && fromImage != null) {\n        setValueByPath(parentObject, ['instances[0]', 'image'], imageToVertex(fromImage));\n    }\n    const fromVideo = getValueByPath(fromObject, ['video']);\n    if (parentObject !== undefined && fromVideo != null) {\n        setValueByPath(parentObject, ['instances[0]', 'video'], videoToVertex(fromVideo));\n    }\n    return toObject;\n}\nfunction generatedImageFromMldev(fromObject) {\n    const toObject = {};\n    const fromImage = getValueByPath(fromObject, ['_self']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['image'], imageFromMldev(fromImage));\n    }\n    const fromRaiFilteredReason = getValueByPath(fromObject, [\n        'raiFilteredReason',\n    ]);\n    if (fromRaiFilteredReason != null) {\n        setValueByPath(toObject, ['raiFilteredReason'], fromRaiFilteredReason);\n    }\n    const fromSafetyAttributes = getValueByPath(fromObject, ['_self']);\n    if (fromSafetyAttributes != null) {\n        setValueByPath(toObject, ['safetyAttributes'], safetyAttributesFromMldev(fromSafetyAttributes));\n    }\n    return toObject;\n}\nfunction generatedImageFromVertex(fromObject) {\n    const toObject = {};\n    const fromImage = getValueByPath(fromObject, ['_self']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['image'], imageFromVertex(fromImage));\n    }\n    const fromRaiFilteredReason = getValueByPath(fromObject, [\n        'raiFilteredReason',\n    ]);\n    if (fromRaiFilteredReason != null) {\n        setValueByPath(toObject, ['raiFilteredReason'], fromRaiFilteredReason);\n    }\n    const fromSafetyAttributes = getValueByPath(fromObject, ['_self']);\n    if (fromSafetyAttributes != null) {\n        setValueByPath(toObject, ['safetyAttributes'], safetyAttributesFromVertex(fromSafetyAttributes));\n    }\n    const fromEnhancedPrompt = getValueByPath(fromObject, ['prompt']);\n    if (fromEnhancedPrompt != null) {\n        setValueByPath(toObject, ['enhancedPrompt'], fromEnhancedPrompt);\n    }\n    return toObject;\n}\nfunction generatedImageMaskFromVertex(fromObject) {\n    const toObject = {};\n    const fromMask = getValueByPath(fromObject, ['_self']);\n    if (fromMask != null) {\n        setValueByPath(toObject, ['mask'], imageFromVertex(fromMask));\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (fromLabels != null) {\n        let transformedList = fromLabels;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['labels'], transformedList);\n    }\n    return toObject;\n}\nfunction generatedVideoFromMldev(fromObject) {\n    const toObject = {};\n    const fromVideo = getValueByPath(fromObject, ['video']);\n    if (fromVideo != null) {\n        setValueByPath(toObject, ['video'], videoFromMldev(fromVideo));\n    }\n    return toObject;\n}\nfunction generatedVideoFromVertex(fromObject) {\n    const toObject = {};\n    const fromVideo = getValueByPath(fromObject, ['_self']);\n    if (fromVideo != null) {\n        setValueByPath(toObject, ['video'], videoFromVertex(fromVideo));\n    }\n    return toObject;\n}\nfunction generationConfigToVertex(fromObject) {\n    const toObject = {};\n    const fromModelSelectionConfig = getValueByPath(fromObject, [\n        'modelSelectionConfig',\n    ]);\n    if (fromModelSelectionConfig != null) {\n        setValueByPath(toObject, ['modelConfig'], fromModelSelectionConfig);\n    }\n    const fromAudioTimestamp = getValueByPath(fromObject, [\n        'audioTimestamp',\n    ]);\n    if (fromAudioTimestamp != null) {\n        setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);\n    }\n    const fromCandidateCount = getValueByPath(fromObject, [\n        'candidateCount',\n    ]);\n    if (fromCandidateCount != null) {\n        setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n    }\n    const fromEnableAffectiveDialog = getValueByPath(fromObject, [\n        'enableAffectiveDialog',\n    ]);\n    if (fromEnableAffectiveDialog != null) {\n        setValueByPath(toObject, ['enableAffectiveDialog'], fromEnableAffectiveDialog);\n    }\n    const fromFrequencyPenalty = getValueByPath(fromObject, [\n        'frequencyPenalty',\n    ]);\n    if (fromFrequencyPenalty != null) {\n        setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n    }\n    const fromLogprobs = getValueByPath(fromObject, ['logprobs']);\n    if (fromLogprobs != null) {\n        setValueByPath(toObject, ['logprobs'], fromLogprobs);\n    }\n    const fromMaxOutputTokens = getValueByPath(fromObject, [\n        'maxOutputTokens',\n    ]);\n    if (fromMaxOutputTokens != null) {\n        setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n    }\n    const fromMediaResolution = getValueByPath(fromObject, [\n        'mediaResolution',\n    ]);\n    if (fromMediaResolution != null) {\n        setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n    }\n    const fromPresencePenalty = getValueByPath(fromObject, [\n        'presencePenalty',\n    ]);\n    if (fromPresencePenalty != null) {\n        setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n    }\n    const fromResponseJsonSchema = getValueByPath(fromObject, [\n        'responseJsonSchema',\n    ]);\n    if (fromResponseJsonSchema != null) {\n        setValueByPath(toObject, ['responseJsonSchema'], fromResponseJsonSchema);\n    }\n    const fromResponseLogprobs = getValueByPath(fromObject, [\n        'responseLogprobs',\n    ]);\n    if (fromResponseLogprobs != null) {\n        setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n    }\n    const fromResponseMimeType = getValueByPath(fromObject, [\n        'responseMimeType',\n    ]);\n    if (fromResponseMimeType != null) {\n        setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n    }\n    const fromResponseModalities = getValueByPath(fromObject, [\n        'responseModalities',\n    ]);\n    if (fromResponseModalities != null) {\n        setValueByPath(toObject, ['responseModalities'], fromResponseModalities);\n    }\n    const fromResponseSchema = getValueByPath(fromObject, [\n        'responseSchema',\n    ]);\n    if (fromResponseSchema != null) {\n        setValueByPath(toObject, ['responseSchema'], fromResponseSchema);\n    }\n    const fromRoutingConfig = getValueByPath(fromObject, [\n        'routingConfig',\n    ]);\n    if (fromRoutingConfig != null) {\n        setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (fromSeed != null) {\n        setValueByPath(toObject, ['seed'], fromSeed);\n    }\n    const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n    if (fromSpeechConfig != null) {\n        setValueByPath(toObject, ['speechConfig'], speechConfigToVertex(fromSpeechConfig));\n    }\n    const fromStopSequences = getValueByPath(fromObject, [\n        'stopSequences',\n    ]);\n    if (fromStopSequences != null) {\n        setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n    }\n    const fromTemperature = getValueByPath(fromObject, ['temperature']);\n    if (fromTemperature != null) {\n        setValueByPath(toObject, ['temperature'], fromTemperature);\n    }\n    const fromThinkingConfig = getValueByPath(fromObject, [\n        'thinkingConfig',\n    ]);\n    if (fromThinkingConfig != null) {\n        setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n    }\n    const fromTopK = getValueByPath(fromObject, ['topK']);\n    if (fromTopK != null) {\n        setValueByPath(toObject, ['topK'], fromTopK);\n    }\n    const fromTopP = getValueByPath(fromObject, ['topP']);\n    if (fromTopP != null) {\n        setValueByPath(toObject, ['topP'], fromTopP);\n    }\n    if (getValueByPath(fromObject, ['enableEnhancedCivicAnswers']) !==\n        undefined) {\n        throw new Error('enableEnhancedCivicAnswers parameter is not supported in Vertex AI.');\n    }\n    return toObject;\n}\nfunction getModelParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'name'], tModel(apiClient, fromModel));\n    }\n    return toObject;\n}\nfunction getModelParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'name'], tModel(apiClient, fromModel));\n    }\n    return toObject;\n}\nfunction googleMapsToMldev$1(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['authConfig']) !== undefined) {\n        throw new Error('authConfig parameter is not supported in Gemini API.');\n    }\n    const fromEnableWidget = getValueByPath(fromObject, ['enableWidget']);\n    if (fromEnableWidget != null) {\n        setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n    }\n    return toObject;\n}\nfunction googleSearchToMldev$1(fromObject) {\n    const toObject = {};\n    const fromTimeRangeFilter = getValueByPath(fromObject, [\n        'timeRangeFilter',\n    ]);\n    if (fromTimeRangeFilter != null) {\n        setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n    }\n    if (getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n        throw new Error('excludeDomains parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction imageFromMldev(fromObject) {\n    const toObject = {};\n    const fromImageBytes = getValueByPath(fromObject, [\n        'bytesBase64Encoded',\n    ]);\n    if (fromImageBytes != null) {\n        setValueByPath(toObject, ['imageBytes'], tBytes(fromImageBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction imageFromVertex(fromObject) {\n    const toObject = {};\n    const fromGcsUri = getValueByPath(fromObject, ['gcsUri']);\n    if (fromGcsUri != null) {\n        setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n    }\n    const fromImageBytes = getValueByPath(fromObject, [\n        'bytesBase64Encoded',\n    ]);\n    if (fromImageBytes != null) {\n        setValueByPath(toObject, ['imageBytes'], tBytes(fromImageBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction imageToMldev(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['gcsUri']) !== undefined) {\n        throw new Error('gcsUri parameter is not supported in Gemini API.');\n    }\n    const fromImageBytes = getValueByPath(fromObject, ['imageBytes']);\n    if (fromImageBytes != null) {\n        setValueByPath(toObject, ['bytesBase64Encoded'], tBytes(fromImageBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction imageToVertex(fromObject) {\n    const toObject = {};\n    const fromGcsUri = getValueByPath(fromObject, ['gcsUri']);\n    if (fromGcsUri != null) {\n        setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n    }\n    const fromImageBytes = getValueByPath(fromObject, ['imageBytes']);\n    if (fromImageBytes != null) {\n        setValueByPath(toObject, ['bytesBase64Encoded'], tBytes(fromImageBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction listModelsConfigToMldev(apiClient, fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    const fromFilter = getValueByPath(fromObject, ['filter']);\n    if (parentObject !== undefined && fromFilter != null) {\n        setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n    }\n    const fromQueryBase = getValueByPath(fromObject, ['queryBase']);\n    if (parentObject !== undefined && fromQueryBase != null) {\n        setValueByPath(parentObject, ['_url', 'models_url'], tModelsUrl(apiClient, fromQueryBase));\n    }\n    return toObject;\n}\nfunction listModelsConfigToVertex(apiClient, fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    const fromFilter = getValueByPath(fromObject, ['filter']);\n    if (parentObject !== undefined && fromFilter != null) {\n        setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n    }\n    const fromQueryBase = getValueByPath(fromObject, ['queryBase']);\n    if (parentObject !== undefined && fromQueryBase != null) {\n        setValueByPath(parentObject, ['_url', 'models_url'], tModelsUrl(apiClient, fromQueryBase));\n    }\n    return toObject;\n}\nfunction listModelsParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listModelsConfigToMldev(apiClient, fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listModelsParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listModelsConfigToVertex(apiClient, fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listModelsResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromModels = getValueByPath(fromObject, ['_self']);\n    if (fromModels != null) {\n        let transformedList = tExtractModels(fromModels);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return modelFromMldev(item);\n            });\n        }\n        setValueByPath(toObject, ['models'], transformedList);\n    }\n    return toObject;\n}\nfunction listModelsResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromModels = getValueByPath(fromObject, ['_self']);\n    if (fromModels != null) {\n        let transformedList = tExtractModels(fromModels);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return modelFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['models'], transformedList);\n    }\n    return toObject;\n}\nfunction maskReferenceConfigToVertex(fromObject) {\n    const toObject = {};\n    const fromMaskMode = getValueByPath(fromObject, ['maskMode']);\n    if (fromMaskMode != null) {\n        setValueByPath(toObject, ['maskMode'], fromMaskMode);\n    }\n    const fromSegmentationClasses = getValueByPath(fromObject, [\n        'segmentationClasses',\n    ]);\n    if (fromSegmentationClasses != null) {\n        setValueByPath(toObject, ['maskClasses'], fromSegmentationClasses);\n    }\n    const fromMaskDilation = getValueByPath(fromObject, ['maskDilation']);\n    if (fromMaskDilation != null) {\n        setValueByPath(toObject, ['dilation'], fromMaskDilation);\n    }\n    return toObject;\n}\nfunction modelFromMldev(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (fromDisplayName != null) {\n        setValueByPath(toObject, ['displayName'], fromDisplayName);\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (fromDescription != null) {\n        setValueByPath(toObject, ['description'], fromDescription);\n    }\n    const fromVersion = getValueByPath(fromObject, ['version']);\n    if (fromVersion != null) {\n        setValueByPath(toObject, ['version'], fromVersion);\n    }\n    const fromTunedModelInfo = getValueByPath(fromObject, ['_self']);\n    if (fromTunedModelInfo != null) {\n        setValueByPath(toObject, ['tunedModelInfo'], tunedModelInfoFromMldev(fromTunedModelInfo));\n    }\n    const fromInputTokenLimit = getValueByPath(fromObject, [\n        'inputTokenLimit',\n    ]);\n    if (fromInputTokenLimit != null) {\n        setValueByPath(toObject, ['inputTokenLimit'], fromInputTokenLimit);\n    }\n    const fromOutputTokenLimit = getValueByPath(fromObject, [\n        'outputTokenLimit',\n    ]);\n    if (fromOutputTokenLimit != null) {\n        setValueByPath(toObject, ['outputTokenLimit'], fromOutputTokenLimit);\n    }\n    const fromSupportedActions = getValueByPath(fromObject, [\n        'supportedGenerationMethods',\n    ]);\n    if (fromSupportedActions != null) {\n        setValueByPath(toObject, ['supportedActions'], fromSupportedActions);\n    }\n    return toObject;\n}\nfunction modelFromVertex(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (fromDisplayName != null) {\n        setValueByPath(toObject, ['displayName'], fromDisplayName);\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (fromDescription != null) {\n        setValueByPath(toObject, ['description'], fromDescription);\n    }\n    const fromVersion = getValueByPath(fromObject, ['versionId']);\n    if (fromVersion != null) {\n        setValueByPath(toObject, ['version'], fromVersion);\n    }\n    const fromEndpoints = getValueByPath(fromObject, ['deployedModels']);\n    if (fromEndpoints != null) {\n        let transformedList = fromEndpoints;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return endpointFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['endpoints'], transformedList);\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (fromLabels != null) {\n        setValueByPath(toObject, ['labels'], fromLabels);\n    }\n    const fromTunedModelInfo = getValueByPath(fromObject, ['_self']);\n    if (fromTunedModelInfo != null) {\n        setValueByPath(toObject, ['tunedModelInfo'], tunedModelInfoFromVertex(fromTunedModelInfo));\n    }\n    const fromDefaultCheckpointId = getValueByPath(fromObject, [\n        'defaultCheckpointId',\n    ]);\n    if (fromDefaultCheckpointId != null) {\n        setValueByPath(toObject, ['defaultCheckpointId'], fromDefaultCheckpointId);\n    }\n    const fromCheckpoints = getValueByPath(fromObject, ['checkpoints']);\n    if (fromCheckpoints != null) {\n        let transformedList = fromCheckpoints;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['checkpoints'], transformedList);\n    }\n    return toObject;\n}\nfunction partToMldev$1(fromObject) {\n    const toObject = {};\n    const fromVideoMetadata = getValueByPath(fromObject, [\n        'videoMetadata',\n    ]);\n    if (fromVideoMetadata != null) {\n        setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n    }\n    const fromThought = getValueByPath(fromObject, ['thought']);\n    if (fromThought != null) {\n        setValueByPath(toObject, ['thought'], fromThought);\n    }\n    const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n    if (fromInlineData != null) {\n        setValueByPath(toObject, ['inlineData'], blobToMldev$1(fromInlineData));\n    }\n    const fromFileData = getValueByPath(fromObject, ['fileData']);\n    if (fromFileData != null) {\n        setValueByPath(toObject, ['fileData'], fileDataToMldev$1(fromFileData));\n    }\n    const fromThoughtSignature = getValueByPath(fromObject, [\n        'thoughtSignature',\n    ]);\n    if (fromThoughtSignature != null) {\n        setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n    }\n    const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n    if (fromFunctionCall != null) {\n        setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n    }\n    const fromCodeExecutionResult = getValueByPath(fromObject, [\n        'codeExecutionResult',\n    ]);\n    if (fromCodeExecutionResult != null) {\n        setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n    }\n    const fromExecutableCode = getValueByPath(fromObject, [\n        'executableCode',\n    ]);\n    if (fromExecutableCode != null) {\n        setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n    }\n    const fromFunctionResponse = getValueByPath(fromObject, [\n        'functionResponse',\n    ]);\n    if (fromFunctionResponse != null) {\n        setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n    }\n    const fromText = getValueByPath(fromObject, ['text']);\n    if (fromText != null) {\n        setValueByPath(toObject, ['text'], fromText);\n    }\n    return toObject;\n}\nfunction productImageToVertex(fromObject) {\n    const toObject = {};\n    const fromProductImage = getValueByPath(fromObject, ['productImage']);\n    if (fromProductImage != null) {\n        setValueByPath(toObject, ['image'], imageToVertex(fromProductImage));\n    }\n    return toObject;\n}\nfunction recontextImageConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromNumberOfImages = getValueByPath(fromObject, [\n        'numberOfImages',\n    ]);\n    if (parentObject !== undefined && fromNumberOfImages != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfImages);\n    }\n    const fromBaseSteps = getValueByPath(fromObject, ['baseSteps']);\n    if (parentObject !== undefined && fromBaseSteps != null) {\n        setValueByPath(parentObject, ['parameters', 'editConfig', 'baseSteps'], fromBaseSteps);\n    }\n    const fromOutputGcsUri = getValueByPath(fromObject, ['outputGcsUri']);\n    if (parentObject !== undefined && fromOutputGcsUri != null) {\n        setValueByPath(parentObject, ['parameters', 'storageUri'], fromOutputGcsUri);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (parentObject !== undefined && fromSeed != null) {\n        setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n    }\n    const fromSafetyFilterLevel = getValueByPath(fromObject, [\n        'safetyFilterLevel',\n    ]);\n    if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n        setValueByPath(parentObject, ['parameters', 'safetySetting'], fromSafetyFilterLevel);\n    }\n    const fromPersonGeneration = getValueByPath(fromObject, [\n        'personGeneration',\n    ]);\n    if (parentObject !== undefined && fromPersonGeneration != null) {\n        setValueByPath(parentObject, ['parameters', 'personGeneration'], fromPersonGeneration);\n    }\n    const fromAddWatermark = getValueByPath(fromObject, ['addWatermark']);\n    if (parentObject !== undefined && fromAddWatermark != null) {\n        setValueByPath(parentObject, ['parameters', 'addWatermark'], fromAddWatermark);\n    }\n    const fromOutputMimeType = getValueByPath(fromObject, [\n        'outputMimeType',\n    ]);\n    if (parentObject !== undefined && fromOutputMimeType != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'mimeType'], fromOutputMimeType);\n    }\n    const fromOutputCompressionQuality = getValueByPath(fromObject, [\n        'outputCompressionQuality',\n    ]);\n    if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'compressionQuality'], fromOutputCompressionQuality);\n    }\n    const fromEnhancePrompt = getValueByPath(fromObject, [\n        'enhancePrompt',\n    ]);\n    if (parentObject !== undefined && fromEnhancePrompt != null) {\n        setValueByPath(parentObject, ['parameters', 'enhancePrompt'], fromEnhancePrompt);\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (parentObject !== undefined && fromLabels != null) {\n        setValueByPath(parentObject, ['labels'], fromLabels);\n    }\n    return toObject;\n}\nfunction recontextImageParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromSource = getValueByPath(fromObject, ['source']);\n    if (fromSource != null) {\n        recontextImageSourceToVertex(fromSource, toObject);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        recontextImageConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction recontextImageResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromGeneratedImages = getValueByPath(fromObject, [\n        'predictions',\n    ]);\n    if (fromGeneratedImages != null) {\n        let transformedList = fromGeneratedImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedImageFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedImages'], transformedList);\n    }\n    return toObject;\n}\nfunction recontextImageSourceToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (parentObject !== undefined && fromPrompt != null) {\n        setValueByPath(parentObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromPersonImage = getValueByPath(fromObject, ['personImage']);\n    if (parentObject !== undefined && fromPersonImage != null) {\n        setValueByPath(parentObject, ['instances[0]', 'personImage', 'image'], imageToVertex(fromPersonImage));\n    }\n    const fromProductImages = getValueByPath(fromObject, [\n        'productImages',\n    ]);\n    if (parentObject !== undefined && fromProductImages != null) {\n        let transformedList = fromProductImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return productImageToVertex(item);\n            });\n        }\n        setValueByPath(parentObject, ['instances[0]', 'productImages'], transformedList);\n    }\n    return toObject;\n}\nfunction referenceImageAPIInternalToVertex(fromObject) {\n    const toObject = {};\n    const fromReferenceImage = getValueByPath(fromObject, [\n        'referenceImage',\n    ]);\n    if (fromReferenceImage != null) {\n        setValueByPath(toObject, ['referenceImage'], imageToVertex(fromReferenceImage));\n    }\n    const fromReferenceId = getValueByPath(fromObject, ['referenceId']);\n    if (fromReferenceId != null) {\n        setValueByPath(toObject, ['referenceId'], fromReferenceId);\n    }\n    const fromReferenceType = getValueByPath(fromObject, [\n        'referenceType',\n    ]);\n    if (fromReferenceType != null) {\n        setValueByPath(toObject, ['referenceType'], fromReferenceType);\n    }\n    const fromMaskImageConfig = getValueByPath(fromObject, [\n        'maskImageConfig',\n    ]);\n    if (fromMaskImageConfig != null) {\n        setValueByPath(toObject, ['maskImageConfig'], maskReferenceConfigToVertex(fromMaskImageConfig));\n    }\n    const fromControlImageConfig = getValueByPath(fromObject, [\n        'controlImageConfig',\n    ]);\n    if (fromControlImageConfig != null) {\n        setValueByPath(toObject, ['controlImageConfig'], controlReferenceConfigToVertex(fromControlImageConfig));\n    }\n    const fromStyleImageConfig = getValueByPath(fromObject, [\n        'styleImageConfig',\n    ]);\n    if (fromStyleImageConfig != null) {\n        setValueByPath(toObject, ['styleImageConfig'], fromStyleImageConfig);\n    }\n    const fromSubjectImageConfig = getValueByPath(fromObject, [\n        'subjectImageConfig',\n    ]);\n    if (fromSubjectImageConfig != null) {\n        setValueByPath(toObject, ['subjectImageConfig'], fromSubjectImageConfig);\n    }\n    return toObject;\n}\nfunction safetyAttributesFromMldev(fromObject) {\n    const toObject = {};\n    const fromCategories = getValueByPath(fromObject, [\n        'safetyAttributes',\n        'categories',\n    ]);\n    if (fromCategories != null) {\n        setValueByPath(toObject, ['categories'], fromCategories);\n    }\n    const fromScores = getValueByPath(fromObject, [\n        'safetyAttributes',\n        'scores',\n    ]);\n    if (fromScores != null) {\n        setValueByPath(toObject, ['scores'], fromScores);\n    }\n    const fromContentType = getValueByPath(fromObject, ['contentType']);\n    if (fromContentType != null) {\n        setValueByPath(toObject, ['contentType'], fromContentType);\n    }\n    return toObject;\n}\nfunction safetyAttributesFromVertex(fromObject) {\n    const toObject = {};\n    const fromCategories = getValueByPath(fromObject, [\n        'safetyAttributes',\n        'categories',\n    ]);\n    if (fromCategories != null) {\n        setValueByPath(toObject, ['categories'], fromCategories);\n    }\n    const fromScores = getValueByPath(fromObject, [\n        'safetyAttributes',\n        'scores',\n    ]);\n    if (fromScores != null) {\n        setValueByPath(toObject, ['scores'], fromScores);\n    }\n    const fromContentType = getValueByPath(fromObject, ['contentType']);\n    if (fromContentType != null) {\n        setValueByPath(toObject, ['contentType'], fromContentType);\n    }\n    return toObject;\n}\nfunction safetySettingToMldev(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['method']) !== undefined) {\n        throw new Error('method parameter is not supported in Gemini API.');\n    }\n    const fromCategory = getValueByPath(fromObject, ['category']);\n    if (fromCategory != null) {\n        setValueByPath(toObject, ['category'], fromCategory);\n    }\n    const fromThreshold = getValueByPath(fromObject, ['threshold']);\n    if (fromThreshold != null) {\n        setValueByPath(toObject, ['threshold'], fromThreshold);\n    }\n    return toObject;\n}\nfunction scribbleImageToVertex(fromObject) {\n    const toObject = {};\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['image'], imageToVertex(fromImage));\n    }\n    return toObject;\n}\nfunction segmentImageConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromMode = getValueByPath(fromObject, ['mode']);\n    if (parentObject !== undefined && fromMode != null) {\n        setValueByPath(parentObject, ['parameters', 'mode'], fromMode);\n    }\n    const fromMaxPredictions = getValueByPath(fromObject, [\n        'maxPredictions',\n    ]);\n    if (parentObject !== undefined && fromMaxPredictions != null) {\n        setValueByPath(parentObject, ['parameters', 'maxPredictions'], fromMaxPredictions);\n    }\n    const fromConfidenceThreshold = getValueByPath(fromObject, [\n        'confidenceThreshold',\n    ]);\n    if (parentObject !== undefined && fromConfidenceThreshold != null) {\n        setValueByPath(parentObject, ['parameters', 'confidenceThreshold'], fromConfidenceThreshold);\n    }\n    const fromMaskDilation = getValueByPath(fromObject, ['maskDilation']);\n    if (parentObject !== undefined && fromMaskDilation != null) {\n        setValueByPath(parentObject, ['parameters', 'maskDilation'], fromMaskDilation);\n    }\n    const fromBinaryColorThreshold = getValueByPath(fromObject, [\n        'binaryColorThreshold',\n    ]);\n    if (parentObject !== undefined && fromBinaryColorThreshold != null) {\n        setValueByPath(parentObject, ['parameters', 'binaryColorThreshold'], fromBinaryColorThreshold);\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (parentObject !== undefined && fromLabels != null) {\n        setValueByPath(parentObject, ['labels'], fromLabels);\n    }\n    return toObject;\n}\nfunction segmentImageParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromSource = getValueByPath(fromObject, ['source']);\n    if (fromSource != null) {\n        segmentImageSourceToVertex(fromSource, toObject);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        segmentImageConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction segmentImageResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromGeneratedMasks = getValueByPath(fromObject, ['predictions']);\n    if (fromGeneratedMasks != null) {\n        let transformedList = fromGeneratedMasks;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedImageMaskFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedMasks'], transformedList);\n    }\n    return toObject;\n}\nfunction segmentImageSourceToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromPrompt = getValueByPath(fromObject, ['prompt']);\n    if (parentObject !== undefined && fromPrompt != null) {\n        setValueByPath(parentObject, ['instances[0]', 'prompt'], fromPrompt);\n    }\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (parentObject !== undefined && fromImage != null) {\n        setValueByPath(parentObject, ['instances[0]', 'image'], imageToVertex(fromImage));\n    }\n    const fromScribbleImage = getValueByPath(fromObject, [\n        'scribbleImage',\n    ]);\n    if (parentObject !== undefined && fromScribbleImage != null) {\n        setValueByPath(parentObject, ['instances[0]', 'scribble'], scribbleImageToVertex(fromScribbleImage));\n    }\n    return toObject;\n}\nfunction speechConfigToVertex(fromObject) {\n    const toObject = {};\n    const fromVoiceConfig = getValueByPath(fromObject, ['voiceConfig']);\n    if (fromVoiceConfig != null) {\n        setValueByPath(toObject, ['voiceConfig'], fromVoiceConfig);\n    }\n    if (getValueByPath(fromObject, ['multiSpeakerVoiceConfig']) !== undefined) {\n        throw new Error('multiSpeakerVoiceConfig parameter is not supported in Vertex AI.');\n    }\n    const fromLanguageCode = getValueByPath(fromObject, ['languageCode']);\n    if (fromLanguageCode != null) {\n        setValueByPath(toObject, ['languageCode'], fromLanguageCode);\n    }\n    return toObject;\n}\nfunction toolToMldev$1(fromObject) {\n    const toObject = {};\n    const fromFunctionDeclarations = getValueByPath(fromObject, [\n        'functionDeclarations',\n    ]);\n    if (fromFunctionDeclarations != null) {\n        let transformedList = fromFunctionDeclarations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['functionDeclarations'], transformedList);\n    }\n    if (getValueByPath(fromObject, ['retrieval']) !== undefined) {\n        throw new Error('retrieval parameter is not supported in Gemini API.');\n    }\n    const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n    if (fromGoogleSearch != null) {\n        setValueByPath(toObject, ['googleSearch'], googleSearchToMldev$1(fromGoogleSearch));\n    }\n    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [\n        'googleSearchRetrieval',\n    ]);\n    if (fromGoogleSearchRetrieval != null) {\n        setValueByPath(toObject, ['googleSearchRetrieval'], fromGoogleSearchRetrieval);\n    }\n    if (getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined) {\n        throw new Error('enterpriseWebSearch parameter is not supported in Gemini API.');\n    }\n    const fromGoogleMaps = getValueByPath(fromObject, ['googleMaps']);\n    if (fromGoogleMaps != null) {\n        setValueByPath(toObject, ['googleMaps'], googleMapsToMldev$1(fromGoogleMaps));\n    }\n    const fromUrlContext = getValueByPath(fromObject, ['urlContext']);\n    if (fromUrlContext != null) {\n        setValueByPath(toObject, ['urlContext'], fromUrlContext);\n    }\n    const fromComputerUse = getValueByPath(fromObject, ['computerUse']);\n    if (fromComputerUse != null) {\n        setValueByPath(toObject, ['computerUse'], fromComputerUse);\n    }\n    const fromCodeExecution = getValueByPath(fromObject, [\n        'codeExecution',\n    ]);\n    if (fromCodeExecution != null) {\n        setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n    }\n    return toObject;\n}\nfunction toolToVertex(fromObject) {\n    const toObject = {};\n    const fromFunctionDeclarations = getValueByPath(fromObject, [\n        'functionDeclarations',\n    ]);\n    if (fromFunctionDeclarations != null) {\n        let transformedList = fromFunctionDeclarations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return functionDeclarationToVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['functionDeclarations'], transformedList);\n    }\n    const fromRetrieval = getValueByPath(fromObject, ['retrieval']);\n    if (fromRetrieval != null) {\n        setValueByPath(toObject, ['retrieval'], fromRetrieval);\n    }\n    const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n    if (fromGoogleSearch != null) {\n        setValueByPath(toObject, ['googleSearch'], fromGoogleSearch);\n    }\n    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [\n        'googleSearchRetrieval',\n    ]);\n    if (fromGoogleSearchRetrieval != null) {\n        setValueByPath(toObject, ['googleSearchRetrieval'], fromGoogleSearchRetrieval);\n    }\n    const fromEnterpriseWebSearch = getValueByPath(fromObject, [\n        'enterpriseWebSearch',\n    ]);\n    if (fromEnterpriseWebSearch != null) {\n        setValueByPath(toObject, ['enterpriseWebSearch'], fromEnterpriseWebSearch);\n    }\n    const fromGoogleMaps = getValueByPath(fromObject, ['googleMaps']);\n    if (fromGoogleMaps != null) {\n        setValueByPath(toObject, ['googleMaps'], fromGoogleMaps);\n    }\n    const fromUrlContext = getValueByPath(fromObject, ['urlContext']);\n    if (fromUrlContext != null) {\n        setValueByPath(toObject, ['urlContext'], fromUrlContext);\n    }\n    const fromComputerUse = getValueByPath(fromObject, ['computerUse']);\n    if (fromComputerUse != null) {\n        setValueByPath(toObject, ['computerUse'], fromComputerUse);\n    }\n    const fromCodeExecution = getValueByPath(fromObject, [\n        'codeExecution',\n    ]);\n    if (fromCodeExecution != null) {\n        setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n    }\n    return toObject;\n}\nfunction tunedModelInfoFromMldev(fromObject) {\n    const toObject = {};\n    const fromBaseModel = getValueByPath(fromObject, ['baseModel']);\n    if (fromBaseModel != null) {\n        setValueByPath(toObject, ['baseModel'], fromBaseModel);\n    }\n    const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n    if (fromCreateTime != null) {\n        setValueByPath(toObject, ['createTime'], fromCreateTime);\n    }\n    const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n    if (fromUpdateTime != null) {\n        setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n    }\n    return toObject;\n}\nfunction tunedModelInfoFromVertex(fromObject) {\n    const toObject = {};\n    const fromBaseModel = getValueByPath(fromObject, [\n        'labels',\n        'google-vertex-llm-tuning-base-model-id',\n    ]);\n    if (fromBaseModel != null) {\n        setValueByPath(toObject, ['baseModel'], fromBaseModel);\n    }\n    const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n    if (fromCreateTime != null) {\n        setValueByPath(toObject, ['createTime'], fromCreateTime);\n    }\n    const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n    if (fromUpdateTime != null) {\n        setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n    }\n    return toObject;\n}\nfunction updateModelConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (parentObject !== undefined && fromDisplayName != null) {\n        setValueByPath(parentObject, ['displayName'], fromDisplayName);\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (parentObject !== undefined && fromDescription != null) {\n        setValueByPath(parentObject, ['description'], fromDescription);\n    }\n    const fromDefaultCheckpointId = getValueByPath(fromObject, [\n        'defaultCheckpointId',\n    ]);\n    if (parentObject !== undefined && fromDefaultCheckpointId != null) {\n        setValueByPath(parentObject, ['defaultCheckpointId'], fromDefaultCheckpointId);\n    }\n    return toObject;\n}\nfunction updateModelConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n    if (parentObject !== undefined && fromDisplayName != null) {\n        setValueByPath(parentObject, ['displayName'], fromDisplayName);\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (parentObject !== undefined && fromDescription != null) {\n        setValueByPath(parentObject, ['description'], fromDescription);\n    }\n    const fromDefaultCheckpointId = getValueByPath(fromObject, [\n        'defaultCheckpointId',\n    ]);\n    if (parentObject !== undefined && fromDefaultCheckpointId != null) {\n        setValueByPath(parentObject, ['defaultCheckpointId'], fromDefaultCheckpointId);\n    }\n    return toObject;\n}\nfunction updateModelParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'name'], tModel(apiClient, fromModel));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        updateModelConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction updateModelParametersToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        updateModelConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction upscaleImageAPIConfigInternalToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromOutputGcsUri = getValueByPath(fromObject, ['outputGcsUri']);\n    if (parentObject !== undefined && fromOutputGcsUri != null) {\n        setValueByPath(parentObject, ['parameters', 'storageUri'], fromOutputGcsUri);\n    }\n    const fromIncludeRaiReason = getValueByPath(fromObject, [\n        'includeRaiReason',\n    ]);\n    if (parentObject !== undefined && fromIncludeRaiReason != null) {\n        setValueByPath(parentObject, ['parameters', 'includeRaiReason'], fromIncludeRaiReason);\n    }\n    const fromOutputMimeType = getValueByPath(fromObject, [\n        'outputMimeType',\n    ]);\n    if (parentObject !== undefined && fromOutputMimeType != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'mimeType'], fromOutputMimeType);\n    }\n    const fromOutputCompressionQuality = getValueByPath(fromObject, [\n        'outputCompressionQuality',\n    ]);\n    if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n        setValueByPath(parentObject, ['parameters', 'outputOptions', 'compressionQuality'], fromOutputCompressionQuality);\n    }\n    const fromEnhanceInputImage = getValueByPath(fromObject, [\n        'enhanceInputImage',\n    ]);\n    if (parentObject !== undefined && fromEnhanceInputImage != null) {\n        setValueByPath(parentObject, ['parameters', 'upscaleConfig', 'enhanceInputImage'], fromEnhanceInputImage);\n    }\n    const fromImagePreservationFactor = getValueByPath(fromObject, [\n        'imagePreservationFactor',\n    ]);\n    if (parentObject !== undefined && fromImagePreservationFactor != null) {\n        setValueByPath(parentObject, ['parameters', 'upscaleConfig', 'imagePreservationFactor'], fromImagePreservationFactor);\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (parentObject !== undefined && fromLabels != null) {\n        setValueByPath(parentObject, ['labels'], fromLabels);\n    }\n    const fromNumberOfImages = getValueByPath(fromObject, [\n        'numberOfImages',\n    ]);\n    if (parentObject !== undefined && fromNumberOfImages != null) {\n        setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfImages);\n    }\n    const fromMode = getValueByPath(fromObject, ['mode']);\n    if (parentObject !== undefined && fromMode != null) {\n        setValueByPath(parentObject, ['parameters', 'mode'], fromMode);\n    }\n    return toObject;\n}\nfunction upscaleImageAPIParametersInternalToVertex(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['instances[0]', 'image'], imageToVertex(fromImage));\n    }\n    const fromUpscaleFactor = getValueByPath(fromObject, [\n        'upscaleFactor',\n    ]);\n    if (fromUpscaleFactor != null) {\n        setValueByPath(toObject, ['parameters', 'upscaleConfig', 'upscaleFactor'], fromUpscaleFactor);\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        upscaleImageAPIConfigInternalToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction upscaleImageResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromGeneratedImages = getValueByPath(fromObject, [\n        'predictions',\n    ]);\n    if (fromGeneratedImages != null) {\n        let transformedList = fromGeneratedImages;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return generatedImageFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['generatedImages'], transformedList);\n    }\n    return toObject;\n}\nfunction videoFromMldev(fromObject) {\n    const toObject = {};\n    const fromUri = getValueByPath(fromObject, ['uri']);\n    if (fromUri != null) {\n        setValueByPath(toObject, ['uri'], fromUri);\n    }\n    const fromVideoBytes = getValueByPath(fromObject, ['encodedVideo']);\n    if (fromVideoBytes != null) {\n        setValueByPath(toObject, ['videoBytes'], tBytes(fromVideoBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['encoding']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction videoFromVertex(fromObject) {\n    const toObject = {};\n    const fromUri = getValueByPath(fromObject, ['gcsUri']);\n    if (fromUri != null) {\n        setValueByPath(toObject, ['uri'], fromUri);\n    }\n    const fromVideoBytes = getValueByPath(fromObject, [\n        'bytesBase64Encoded',\n    ]);\n    if (fromVideoBytes != null) {\n        setValueByPath(toObject, ['videoBytes'], tBytes(fromVideoBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction videoGenerationMaskToVertex(fromObject) {\n    const toObject = {};\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['_self'], imageToVertex(fromImage));\n    }\n    const fromMaskMode = getValueByPath(fromObject, ['maskMode']);\n    if (fromMaskMode != null) {\n        setValueByPath(toObject, ['maskMode'], fromMaskMode);\n    }\n    return toObject;\n}\nfunction videoGenerationReferenceImageToMldev(fromObject) {\n    const toObject = {};\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['image'], imageToMldev(fromImage));\n    }\n    const fromReferenceType = getValueByPath(fromObject, [\n        'referenceType',\n    ]);\n    if (fromReferenceType != null) {\n        setValueByPath(toObject, ['referenceType'], fromReferenceType);\n    }\n    return toObject;\n}\nfunction videoGenerationReferenceImageToVertex(fromObject) {\n    const toObject = {};\n    const fromImage = getValueByPath(fromObject, ['image']);\n    if (fromImage != null) {\n        setValueByPath(toObject, ['image'], imageToVertex(fromImage));\n    }\n    const fromReferenceType = getValueByPath(fromObject, [\n        'referenceType',\n    ]);\n    if (fromReferenceType != null) {\n        setValueByPath(toObject, ['referenceType'], fromReferenceType);\n    }\n    return toObject;\n}\nfunction videoToMldev(fromObject) {\n    const toObject = {};\n    const fromUri = getValueByPath(fromObject, ['uri']);\n    if (fromUri != null) {\n        setValueByPath(toObject, ['uri'], fromUri);\n    }\n    const fromVideoBytes = getValueByPath(fromObject, ['videoBytes']);\n    if (fromVideoBytes != null) {\n        setValueByPath(toObject, ['encodedVideo'], tBytes(fromVideoBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['encoding'], fromMimeType);\n    }\n    return toObject;\n}\nfunction videoToVertex(fromObject) {\n    const toObject = {};\n    const fromUri = getValueByPath(fromObject, ['uri']);\n    if (fromUri != null) {\n        setValueByPath(toObject, ['gcsUri'], fromUri);\n    }\n    const fromVideoBytes = getValueByPath(fromObject, ['videoBytes']);\n    if (fromVideoBytes != null) {\n        setValueByPath(toObject, ['bytesBase64Encoded'], tBytes(fromVideoBytes));\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst SERVER_TIMEOUT_HEADER = 'X-Server-Timeout';\nconst USER_AGENT_HEADER = 'User-Agent';\nconst GOOGLE_API_CLIENT_HEADER = 'x-goog-api-client';\nconst SDK_VERSION = '1.26.0'; // x-release-please-version\nconst LIBRARY_LABEL = `google-genai-sdk/${SDK_VERSION}`;\nconst VERTEX_AI_API_DEFAULT_VERSION = 'v1beta1';\nconst GOOGLE_AI_API_DEFAULT_VERSION = 'v1beta';\nconst responseLineRE = /^\\s*data: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n/**\n * The ApiClient class is used to send requests to the Gemini API or Vertex AI\n * endpoints.\n */\nclass ApiClient {\n    constructor(opts) {\n        var _a, _b;\n        this.clientOptions = Object.assign(Object.assign({}, opts), { project: opts.project, location: opts.location, apiKey: opts.apiKey, vertexai: opts.vertexai });\n        const initHttpOptions = {};\n        if (this.clientOptions.vertexai) {\n            initHttpOptions.apiVersion =\n                (_a = this.clientOptions.apiVersion) !== null && _a !== void 0 ? _a : VERTEX_AI_API_DEFAULT_VERSION;\n            initHttpOptions.baseUrl = this.baseUrlFromProjectLocation();\n            this.normalizeAuthParameters();\n        }\n        else {\n            // Gemini API\n            initHttpOptions.apiVersion =\n                (_b = this.clientOptions.apiVersion) !== null && _b !== void 0 ? _b : GOOGLE_AI_API_DEFAULT_VERSION;\n            initHttpOptions.baseUrl = `https://generativelanguage.googleapis.com/`;\n        }\n        initHttpOptions.headers = this.getDefaultHeaders();\n        this.clientOptions.httpOptions = initHttpOptions;\n        if (opts.httpOptions) {\n            this.clientOptions.httpOptions = this.patchHttpOptions(initHttpOptions, opts.httpOptions);\n        }\n    }\n    /**\n     * Determines the base URL for Vertex AI based on project and location.\n     * Uses the global endpoint if location is 'global' or if project/location\n     * are not specified (implying API key usage).\n     * @private\n     */\n    baseUrlFromProjectLocation() {\n        if (this.clientOptions.project &&\n            this.clientOptions.location &&\n            this.clientOptions.location !== 'global') {\n            // Regional endpoint\n            return `https://${this.clientOptions.location}-aiplatform.googleapis.com/`;\n        }\n        // Global endpoint (covers 'global' location and API key usage)\n        return `https://aiplatform.googleapis.com/`;\n    }\n    /**\n     * Normalizes authentication parameters for Vertex AI.\n     * If project and location are provided, API key is cleared.\n     * If project and location are not provided (implying API key usage),\n     * project and location are cleared.\n     * @private\n     */\n    normalizeAuthParameters() {\n        if (this.clientOptions.project && this.clientOptions.location) {\n            // Using project/location for auth, clear potential API key\n            this.clientOptions.apiKey = undefined;\n            return;\n        }\n        // Using API key for auth (or no auth provided yet), clear project/location\n        this.clientOptions.project = undefined;\n        this.clientOptions.location = undefined;\n    }\n    isVertexAI() {\n        var _a;\n        return (_a = this.clientOptions.vertexai) !== null && _a !== void 0 ? _a : false;\n    }\n    getProject() {\n        return this.clientOptions.project;\n    }\n    getLocation() {\n        return this.clientOptions.location;\n    }\n    getApiVersion() {\n        if (this.clientOptions.httpOptions &&\n            this.clientOptions.httpOptions.apiVersion !== undefined) {\n            return this.clientOptions.httpOptions.apiVersion;\n        }\n        throw new Error('API version is not set.');\n    }\n    getBaseUrl() {\n        if (this.clientOptions.httpOptions &&\n            this.clientOptions.httpOptions.baseUrl !== undefined) {\n            return this.clientOptions.httpOptions.baseUrl;\n        }\n        throw new Error('Base URL is not set.');\n    }\n    getRequestUrl() {\n        return this.getRequestUrlInternal(this.clientOptions.httpOptions);\n    }\n    getHeaders() {\n        if (this.clientOptions.httpOptions &&\n            this.clientOptions.httpOptions.headers !== undefined) {\n            return this.clientOptions.httpOptions.headers;\n        }\n        else {\n            throw new Error('Headers are not set.');\n        }\n    }\n    getRequestUrlInternal(httpOptions) {\n        if (!httpOptions ||\n            httpOptions.baseUrl === undefined ||\n            httpOptions.apiVersion === undefined) {\n            throw new Error('HTTP options are not correctly set.');\n        }\n        const baseUrl = httpOptions.baseUrl.endsWith('/')\n            ? httpOptions.baseUrl.slice(0, -1)\n            : httpOptions.baseUrl;\n        const urlElement = [baseUrl];\n        if (httpOptions.apiVersion && httpOptions.apiVersion !== '') {\n            urlElement.push(httpOptions.apiVersion);\n        }\n        return urlElement.join('/');\n    }\n    getBaseResourcePath() {\n        return `projects/${this.clientOptions.project}/locations/${this.clientOptions.location}`;\n    }\n    getApiKey() {\n        return this.clientOptions.apiKey;\n    }\n    getWebsocketBaseUrl() {\n        const baseUrl = this.getBaseUrl();\n        const urlParts = new URL(baseUrl);\n        urlParts.protocol = urlParts.protocol == 'http:' ? 'ws' : 'wss';\n        return urlParts.toString();\n    }\n    setBaseUrl(url) {\n        if (this.clientOptions.httpOptions) {\n            this.clientOptions.httpOptions.baseUrl = url;\n        }\n        else {\n            throw new Error('HTTP options are not correctly set.');\n        }\n    }\n    constructUrl(path, httpOptions, prependProjectLocation) {\n        const urlElement = [this.getRequestUrlInternal(httpOptions)];\n        if (prependProjectLocation) {\n            urlElement.push(this.getBaseResourcePath());\n        }\n        if (path !== '') {\n            urlElement.push(path);\n        }\n        const url = new URL(`${urlElement.join('/')}`);\n        return url;\n    }\n    shouldPrependVertexProjectPath(request) {\n        if (this.clientOptions.apiKey) {\n            return false;\n        }\n        if (!this.clientOptions.vertexai) {\n            return false;\n        }\n        if (request.path.startsWith('projects/')) {\n            // Assume the path already starts with\n            // `projects/<project>/location/<location>`.\n            return false;\n        }\n        if (request.httpMethod === 'GET' &&\n            request.path.startsWith('publishers/google/models')) {\n            // These paths are used by Vertex's models.get and models.list\n            // calls. For base models Vertex does not accept a project/location\n            // prefix (for tuned model the prefix is required).\n            return false;\n        }\n        return true;\n    }\n    async request(request) {\n        let patchedHttpOptions = this.clientOptions.httpOptions;\n        if (request.httpOptions) {\n            patchedHttpOptions = this.patchHttpOptions(this.clientOptions.httpOptions, request.httpOptions);\n        }\n        const prependProjectLocation = this.shouldPrependVertexProjectPath(request);\n        const url = this.constructUrl(request.path, patchedHttpOptions, prependProjectLocation);\n        if (request.queryParams) {\n            for (const [key, value] of Object.entries(request.queryParams)) {\n                url.searchParams.append(key, String(value));\n            }\n        }\n        let requestInit = {};\n        if (request.httpMethod === 'GET') {\n            if (request.body && request.body !== '{}') {\n                throw new Error('Request body should be empty for GET request, but got non empty request body');\n            }\n        }\n        else {\n            requestInit.body = request.body;\n        }\n        requestInit = await this.includeExtraHttpOptionsToRequestInit(requestInit, patchedHttpOptions, request.abortSignal);\n        return this.unaryApiCall(url, requestInit, request.httpMethod);\n    }\n    patchHttpOptions(baseHttpOptions, requestHttpOptions) {\n        const patchedHttpOptions = JSON.parse(JSON.stringify(baseHttpOptions));\n        for (const [key, value] of Object.entries(requestHttpOptions)) {\n            // Records compile to objects.\n            if (typeof value === 'object') {\n                // @ts-expect-error TS2345TS7053: Element implicitly has an 'any' type\n                // because expression of type 'string' can't be used to index type\n                // 'HttpOptions'.\n                patchedHttpOptions[key] = Object.assign(Object.assign({}, patchedHttpOptions[key]), value);\n            }\n            else if (value !== undefined) {\n                // @ts-expect-error TS2345TS7053: Element implicitly has an 'any' type\n                // because expression of type 'string' can't be used to index type\n                // 'HttpOptions'.\n                patchedHttpOptions[key] = value;\n            }\n        }\n        return patchedHttpOptions;\n    }\n    async requestStream(request) {\n        let patchedHttpOptions = this.clientOptions.httpOptions;\n        if (request.httpOptions) {\n            patchedHttpOptions = this.patchHttpOptions(this.clientOptions.httpOptions, request.httpOptions);\n        }\n        const prependProjectLocation = this.shouldPrependVertexProjectPath(request);\n        const url = this.constructUrl(request.path, patchedHttpOptions, prependProjectLocation);\n        if (!url.searchParams.has('alt') || url.searchParams.get('alt') !== 'sse') {\n            url.searchParams.set('alt', 'sse');\n        }\n        let requestInit = {};\n        requestInit.body = request.body;\n        requestInit = await this.includeExtraHttpOptionsToRequestInit(requestInit, patchedHttpOptions, request.abortSignal);\n        return this.streamApiCall(url, requestInit, request.httpMethod);\n    }\n    async includeExtraHttpOptionsToRequestInit(requestInit, httpOptions, abortSignal) {\n        if ((httpOptions && httpOptions.timeout) || abortSignal) {\n            const abortController = new AbortController();\n            const signal = abortController.signal;\n            if (httpOptions.timeout && (httpOptions === null || httpOptions === void 0 ? void 0 : httpOptions.timeout) > 0) {\n                const timeoutHandle = setTimeout(() => abortController.abort(), httpOptions.timeout);\n                if (timeoutHandle &&\n                    typeof timeoutHandle.unref ===\n                        'function') {\n                    // call unref to prevent nodejs process from hanging, see\n                    // https://nodejs.org/api/timers.html#timeoutunref\n                    timeoutHandle.unref();\n                }\n            }\n            if (abortSignal) {\n                abortSignal.addEventListener('abort', () => {\n                    abortController.abort();\n                });\n            }\n            requestInit.signal = signal;\n        }\n        if (httpOptions && httpOptions.extraBody !== null) {\n            includeExtraBodyToRequestInit(requestInit, httpOptions.extraBody);\n        }\n        requestInit.headers = await this.getHeadersInternal(httpOptions);\n        return requestInit;\n    }\n    async unaryApiCall(url, requestInit, httpMethod) {\n        return this.apiCall(url.toString(), Object.assign(Object.assign({}, requestInit), { method: httpMethod }))\n            .then(async (response) => {\n            await throwErrorIfNotOK(response);\n            return new HttpResponse(response);\n        })\n            .catch((e) => {\n            if (e instanceof Error) {\n                throw e;\n            }\n            else {\n                throw new Error(JSON.stringify(e));\n            }\n        });\n    }\n    async streamApiCall(url, requestInit, httpMethod) {\n        return this.apiCall(url.toString(), Object.assign(Object.assign({}, requestInit), { method: httpMethod }))\n            .then(async (response) => {\n            await throwErrorIfNotOK(response);\n            return this.processStreamResponse(response);\n        })\n            .catch((e) => {\n            if (e instanceof Error) {\n                throw e;\n            }\n            else {\n                throw new Error(JSON.stringify(e));\n            }\n        });\n    }\n    processStreamResponse(response) {\n        var _a;\n        return __asyncGenerator(this, arguments, function* processStreamResponse_1() {\n            const reader = (_a = response === null || response === void 0 ? void 0 : response.body) === null || _a === void 0 ? void 0 : _a.getReader();\n            const decoder = new TextDecoder('utf-8');\n            if (!reader) {\n                throw new Error('Response body is empty');\n            }\n            try {\n                let buffer = '';\n                while (true) {\n                    const { done, value } = yield __await(reader.read());\n                    if (done) {\n                        if (buffer.trim().length > 0) {\n                            throw new Error('Incomplete JSON segment at the end');\n                        }\n                        break;\n                    }\n                    const chunkString = decoder.decode(value, { stream: true });\n                    // Parse and throw an error if the chunk contains an error.\n                    try {\n                        const chunkJson = JSON.parse(chunkString);\n                        if ('error' in chunkJson) {\n                            const errorJson = JSON.parse(JSON.stringify(chunkJson['error']));\n                            const status = errorJson['status'];\n                            const code = errorJson['code'];\n                            const errorMessage = `got status: ${status}. ${JSON.stringify(chunkJson)}`;\n                            if (code >= 400 && code < 600) {\n                                const apiError = new ApiError({\n                                    message: errorMessage,\n                                    status: code,\n                                });\n                                throw apiError;\n                            }\n                        }\n                    }\n                    catch (e) {\n                        const error = e;\n                        if (error.name === 'ApiError') {\n                            throw e;\n                        }\n                    }\n                    buffer += chunkString;\n                    let match = buffer.match(responseLineRE);\n                    while (match) {\n                        const processedChunkString = match[1];\n                        try {\n                            const partialResponse = new Response(processedChunkString, {\n                                headers: response === null || response === void 0 ? void 0 : response.headers,\n                                status: response === null || response === void 0 ? void 0 : response.status,\n                                statusText: response === null || response === void 0 ? void 0 : response.statusText,\n                            });\n                            yield yield __await(new HttpResponse(partialResponse));\n                            buffer = buffer.slice(match[0].length);\n                            match = buffer.match(responseLineRE);\n                        }\n                        catch (e) {\n                            throw new Error(`exception parsing stream chunk ${processedChunkString}. ${e}`);\n                        }\n                    }\n                }\n            }\n            finally {\n                reader.releaseLock();\n            }\n        });\n    }\n    async apiCall(url, requestInit) {\n        return fetch(url, requestInit).catch((e) => {\n            throw new Error(`exception ${e} sending request`);\n        });\n    }\n    getDefaultHeaders() {\n        const headers = {};\n        const versionHeaderValue = LIBRARY_LABEL + ' ' + this.clientOptions.userAgentExtra;\n        headers[USER_AGENT_HEADER] = versionHeaderValue;\n        headers[GOOGLE_API_CLIENT_HEADER] = versionHeaderValue;\n        headers[CONTENT_TYPE_HEADER] = 'application/json';\n        return headers;\n    }\n    async getHeadersInternal(httpOptions) {\n        const headers = new Headers();\n        if (httpOptions && httpOptions.headers) {\n            for (const [key, value] of Object.entries(httpOptions.headers)) {\n                headers.append(key, value);\n            }\n            // Append a timeout header if it is set, note that the timeout option is\n            // in milliseconds but the header is in seconds.\n            if (httpOptions.timeout && httpOptions.timeout > 0) {\n                headers.append(SERVER_TIMEOUT_HEADER, String(Math.ceil(httpOptions.timeout / 1000)));\n            }\n        }\n        await this.clientOptions.auth.addAuthHeaders(headers);\n        return headers;\n    }\n    /**\n     * Uploads a file asynchronously using Gemini API only, this is not supported\n     * in Vertex AI.\n     *\n     * @param file The string path to the file to be uploaded or a Blob object.\n     * @param config Optional parameters specified in the `UploadFileConfig`\n     *     interface. @see {@link UploadFileConfig}\n     * @return A promise that resolves to a `File` object.\n     * @throws An error if called on a Vertex AI client.\n     * @throws An error if the `mimeType` is not provided and can not be inferred,\n     */\n    async uploadFile(file, config) {\n        var _a;\n        const fileToUpload = {};\n        if (config != null) {\n            fileToUpload.mimeType = config.mimeType;\n            fileToUpload.name = config.name;\n            fileToUpload.displayName = config.displayName;\n        }\n        if (fileToUpload.name && !fileToUpload.name.startsWith('files/')) {\n            fileToUpload.name = `files/${fileToUpload.name}`;\n        }\n        const uploader = this.clientOptions.uploader;\n        const fileStat = await uploader.stat(file);\n        fileToUpload.sizeBytes = String(fileStat.size);\n        const mimeType = (_a = config === null || config === void 0 ? void 0 : config.mimeType) !== null && _a !== void 0 ? _a : fileStat.type;\n        if (mimeType === undefined || mimeType === '') {\n            throw new Error('Can not determine mimeType. Please provide mimeType in the config.');\n        }\n        fileToUpload.mimeType = mimeType;\n        const uploadUrl = await this.fetchUploadUrl(fileToUpload, config);\n        return uploader.upload(file, uploadUrl, this);\n    }\n    /**\n     * Downloads a file asynchronously to the specified path.\n     *\n     * @params params - The parameters for the download request, see {@link\n     * DownloadFileParameters}\n     */\n    async downloadFile(params) {\n        const downloader = this.clientOptions.downloader;\n        await downloader.download(params, this);\n    }\n    async fetchUploadUrl(file, config) {\n        var _a;\n        let httpOptions = {};\n        if (config === null || config === void 0 ? void 0 : config.httpOptions) {\n            httpOptions = config.httpOptions;\n        }\n        else {\n            httpOptions = {\n                apiVersion: '',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Goog-Upload-Protocol': 'resumable',\n                    'X-Goog-Upload-Command': 'start',\n                    'X-Goog-Upload-Header-Content-Length': `${file.sizeBytes}`,\n                    'X-Goog-Upload-Header-Content-Type': `${file.mimeType}`,\n                },\n            };\n        }\n        const body = {\n            'file': file,\n        };\n        const httpResponse = await this.request({\n            path: formatMap('upload/v1beta/files', body['_url']),\n            body: JSON.stringify(body),\n            httpMethod: 'POST',\n            httpOptions,\n        });\n        if (!httpResponse || !(httpResponse === null || httpResponse === void 0 ? void 0 : httpResponse.headers)) {\n            throw new Error('Server did not return an HttpResponse or the returned HttpResponse did not have headers.');\n        }\n        const uploadUrl = (_a = httpResponse === null || httpResponse === void 0 ? void 0 : httpResponse.headers) === null || _a === void 0 ? void 0 : _a['x-goog-upload-url'];\n        if (uploadUrl === undefined) {\n            throw new Error('Failed to get upload url. Server did not return the x-google-upload-url in the headers');\n        }\n        return uploadUrl;\n    }\n}\nasync function throwErrorIfNotOK(response) {\n    var _a;\n    if (response === undefined) {\n        throw new Error('response is undefined');\n    }\n    if (!response.ok) {\n        const status = response.status;\n        let errorBody;\n        if ((_a = response.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('application/json')) {\n            errorBody = await response.json();\n        }\n        else {\n            errorBody = {\n                error: {\n                    message: await response.text(),\n                    code: response.status,\n                    status: response.statusText,\n                },\n            };\n        }\n        const errorMessage = JSON.stringify(errorBody);\n        if (status >= 400 && status < 600) {\n            const apiError = new ApiError({\n                message: errorMessage,\n                status: status,\n            });\n            throw apiError;\n        }\n        throw new Error(errorMessage);\n    }\n}\n/**\n * Recursively updates the `requestInit.body` with values from an `extraBody` object.\n *\n * If `requestInit.body` is a string, it's assumed to be JSON and will be parsed.\n * The `extraBody` is then deeply merged into this parsed object.\n * If `requestInit.body` is a Blob, `extraBody` will be ignored, and a warning logged,\n * as merging structured data into an opaque Blob is not supported.\n *\n * The function does not enforce that updated values from `extraBody` have the\n * same type as existing values in `requestInit.body`. Type mismatches during\n * the merge will result in a warning, but the value from `extraBody` will overwrite\n * the original. `extraBody` users are responsible for ensuring `extraBody` has the correct structure.\n *\n * @param requestInit The RequestInit object whose body will be updated.\n * @param extraBody The object containing updates to be merged into `requestInit.body`.\n */\nfunction includeExtraBodyToRequestInit(requestInit, extraBody) {\n    if (!extraBody || Object.keys(extraBody).length === 0) {\n        return;\n    }\n    if (requestInit.body instanceof Blob) {\n        console.warn('includeExtraBodyToRequestInit: extraBody provided but current request body is a Blob. extraBody will be ignored as merging is not supported for Blob bodies.');\n        return;\n    }\n    let currentBodyObject = {};\n    // If adding new type to HttpRequest.body, please check the code below to\n    // see if we need to update the logic.\n    if (typeof requestInit.body === 'string' && requestInit.body.length > 0) {\n        try {\n            const parsedBody = JSON.parse(requestInit.body);\n            if (typeof parsedBody === 'object' &&\n                parsedBody !== null &&\n                !Array.isArray(parsedBody)) {\n                currentBodyObject = parsedBody;\n            }\n            else {\n                console.warn('includeExtraBodyToRequestInit: Original request body is valid JSON but not a non-array object. Skip applying extraBody to the request body.');\n                return;\n            }\n            /*  eslint-disable-next-line @typescript-eslint/no-unused-vars */\n        }\n        catch (e) {\n            console.warn('includeExtraBodyToRequestInit: Original request body is not valid JSON. Skip applying extraBody to the request body.');\n            return;\n        }\n    }\n    function deepMerge(target, source) {\n        const output = Object.assign({}, target);\n        for (const key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                const sourceValue = source[key];\n                const targetValue = output[key];\n                if (sourceValue &&\n                    typeof sourceValue === 'object' &&\n                    !Array.isArray(sourceValue) &&\n                    targetValue &&\n                    typeof targetValue === 'object' &&\n                    !Array.isArray(targetValue)) {\n                    output[key] = deepMerge(targetValue, sourceValue);\n                }\n                else {\n                    if (targetValue &&\n                        sourceValue &&\n                        typeof targetValue !== typeof sourceValue) {\n                        console.warn(`includeExtraBodyToRequestInit:deepMerge: Type mismatch for key \"${key}\". Original type: ${typeof targetValue}, New type: ${typeof sourceValue}. Overwriting.`);\n                    }\n                    output[key] = sourceValue;\n                }\n            }\n        }\n        return output;\n    }\n    const mergedBody = deepMerge(currentBodyObject, extraBody);\n    requestInit.body = JSON.stringify(mergedBody);\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// TODO: b/416041229 - Determine how to retrieve the MCP package version.\nconst MCP_LABEL = 'mcp_used/unknown';\n// Whether MCP tool usage is detected from mcpToTool. This is used for\n// telemetry.\nlet hasMcpToolUsageFromMcpToTool = false;\n// Checks whether the list of tools contains any MCP tools.\nfunction hasMcpToolUsage(tools) {\n    for (const tool of tools) {\n        if (isMcpCallableTool(tool)) {\n            return true;\n        }\n        if (typeof tool === 'object' && 'inputSchema' in tool) {\n            return true;\n        }\n    }\n    return hasMcpToolUsageFromMcpToTool;\n}\n// Sets the MCP version label in the Google API client header.\nfunction setMcpUsageHeader(headers) {\n    var _a;\n    const existingHeader = (_a = headers[GOOGLE_API_CLIENT_HEADER]) !== null && _a !== void 0 ? _a : '';\n    headers[GOOGLE_API_CLIENT_HEADER] = (existingHeader + ` ${MCP_LABEL}`).trimStart();\n}\n// Returns true if the object is a MCP CallableTool, otherwise false.\nfunction isMcpCallableTool(object) {\n    return (object !== null &&\n        typeof object === 'object' &&\n        object instanceof McpCallableTool);\n}\n// List all tools from the MCP client.\nfunction listAllTools(mcpClient, maxTools = 100) {\n    return __asyncGenerator(this, arguments, function* listAllTools_1() {\n        let cursor = undefined;\n        let numTools = 0;\n        while (numTools < maxTools) {\n            const t = yield __await(mcpClient.listTools({ cursor }));\n            for (const tool of t.tools) {\n                yield yield __await(tool);\n                numTools++;\n            }\n            if (!t.nextCursor) {\n                break;\n            }\n            cursor = t.nextCursor;\n        }\n    });\n}\n/**\n * McpCallableTool can be used for model inference and invoking MCP clients with\n * given function call arguments.\n *\n * @experimental Built-in MCP support is an experimental feature, may change in future\n * versions.\n */\nclass McpCallableTool {\n    constructor(mcpClients = [], config) {\n        this.mcpTools = [];\n        this.functionNameToMcpClient = {};\n        this.mcpClients = mcpClients;\n        this.config = config;\n    }\n    /**\n     * Creates a McpCallableTool.\n     */\n    static create(mcpClients, config) {\n        return new McpCallableTool(mcpClients, config);\n    }\n    /**\n     * Validates the function names are not duplicate and initialize the function\n     * name to MCP client mapping.\n     *\n     * @throws {Error} if the MCP tools from the MCP clients have duplicate tool\n     *     names.\n     */\n    async initialize() {\n        var _a, e_1, _b, _c;\n        if (this.mcpTools.length > 0) {\n            return;\n        }\n        const functionMap = {};\n        const mcpTools = [];\n        for (const mcpClient of this.mcpClients) {\n            try {\n                for (var _d = true, _e = (e_1 = void 0, __asyncValues(listAllTools(mcpClient))), _f; _f = await _e.next(), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const mcpTool = _c;\n                    mcpTools.push(mcpTool);\n                    const mcpToolName = mcpTool.name;\n                    if (functionMap[mcpToolName]) {\n                        throw new Error(`Duplicate function name ${mcpToolName} found in MCP tools. Please ensure function names are unique.`);\n                    }\n                    functionMap[mcpToolName] = mcpClient;\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) await _b.call(_e);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        this.mcpTools = mcpTools;\n        this.functionNameToMcpClient = functionMap;\n    }\n    async tool() {\n        await this.initialize();\n        return mcpToolsToGeminiTool(this.mcpTools, this.config);\n    }\n    async callTool(functionCalls) {\n        await this.initialize();\n        const functionCallResponseParts = [];\n        for (const functionCall of functionCalls) {\n            if (functionCall.name in this.functionNameToMcpClient) {\n                const mcpClient = this.functionNameToMcpClient[functionCall.name];\n                let requestOptions = undefined;\n                // TODO: b/424238654 - Add support for finer grained timeout control.\n                if (this.config.timeout) {\n                    requestOptions = {\n                        timeout: this.config.timeout,\n                    };\n                }\n                const callToolResponse = await mcpClient.callTool({\n                    name: functionCall.name,\n                    arguments: functionCall.args,\n                }, \n                // Set the result schema to undefined to allow MCP to rely on the\n                // default schema.\n                undefined, requestOptions);\n                functionCallResponseParts.push({\n                    functionResponse: {\n                        name: functionCall.name,\n                        response: callToolResponse.isError\n                            ? { error: callToolResponse }\n                            : callToolResponse,\n                    },\n                });\n            }\n        }\n        return functionCallResponseParts;\n    }\n}\nfunction isMcpClient(client) {\n    return (client !== null &&\n        typeof client === 'object' &&\n        'listTools' in client &&\n        typeof client.listTools === 'function');\n}\n/**\n * Creates a McpCallableTool from MCP clients and an optional config.\n *\n * The callable tool can invoke the MCP clients with given function call\n * arguments. (often for automatic function calling).\n * Use the config to modify tool parameters such as behavior.\n *\n * @experimental Built-in MCP support is an experimental feature, may change in future\n * versions.\n */\nfunction mcpToTool(...args) {\n    // Set MCP usage for telemetry.\n    hasMcpToolUsageFromMcpToTool = true;\n    if (args.length === 0) {\n        throw new Error('No MCP clients provided');\n    }\n    const maybeConfig = args[args.length - 1];\n    if (isMcpClient(maybeConfig)) {\n        return McpCallableTool.create(args, {});\n    }\n    return McpCallableTool.create(args.slice(0, args.length - 1), maybeConfig);\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Handles incoming messages from the WebSocket.\n *\n * @remarks\n * This function is responsible for parsing incoming messages, transforming them\n * into LiveMusicServerMessage, and then calling the onmessage callback.\n * Note that the first message which is received from the server is a\n * setupComplete message.\n *\n * @param apiClient The ApiClient instance.\n * @param onmessage The user-provided onmessage callback (if any).\n * @param event The MessageEvent from the WebSocket.\n */\nasync function handleWebSocketMessage$1(apiClient, onmessage, event) {\n    const serverMessage = new LiveMusicServerMessage();\n    let data;\n    if (event.data instanceof Blob) {\n        data = JSON.parse(await event.data.text());\n    }\n    else {\n        data = JSON.parse(event.data);\n    }\n    Object.assign(serverMessage, data);\n    onmessage(serverMessage);\n}\n/**\n   LiveMusic class encapsulates the configuration for live music\n   generation via Lyria Live models.\n\n   @experimental\n  */\nclass LiveMusic {\n    constructor(apiClient, auth, webSocketFactory) {\n        this.apiClient = apiClient;\n        this.auth = auth;\n        this.webSocketFactory = webSocketFactory;\n    }\n    /**\n       Establishes a connection to the specified model and returns a\n       LiveMusicSession object representing that connection.\n  \n       @experimental\n  \n       @remarks\n  \n       @param params - The parameters for establishing a connection to the model.\n       @return A live session.\n  \n       @example\n       ```ts\n       let model = 'models/lyria-realtime-exp';\n       const session = await ai.live.music.connect({\n         model: model,\n         callbacks: {\n           onmessage: (e: MessageEvent) => {\n             console.log('Received message from the server: %s\\n', debug(e.data));\n           },\n           onerror: (e: ErrorEvent) => {\n             console.log('Error occurred: %s\\n', debug(e.error));\n           },\n           onclose: (e: CloseEvent) => {\n             console.log('Connection closed.');\n           },\n         },\n       });\n       ```\n      */\n    async connect(params) {\n        var _a, _b;\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('Live music is not supported for Vertex AI.');\n        }\n        console.warn('Live music generation is experimental and may change in future versions.');\n        const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();\n        const apiVersion = this.apiClient.getApiVersion();\n        const headers = mapToHeaders$1(this.apiClient.getDefaultHeaders());\n        const apiKey = this.apiClient.getApiKey();\n        const url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${apiVersion}.GenerativeService.BidiGenerateMusic?key=${apiKey}`;\n        let onopenResolve = () => { };\n        const onopenPromise = new Promise((resolve) => {\n            onopenResolve = resolve;\n        });\n        const callbacks = params.callbacks;\n        const onopenAwaitedCallback = function () {\n            onopenResolve({});\n        };\n        const apiClient = this.apiClient;\n        const websocketCallbacks = {\n            onopen: onopenAwaitedCallback,\n            onmessage: (event) => {\n                void handleWebSocketMessage$1(apiClient, callbacks.onmessage, event);\n            },\n            onerror: (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onerror) !== null && _a !== void 0 ? _a : function (e) {\n            },\n            onclose: (_b = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onclose) !== null && _b !== void 0 ? _b : function (e) {\n            },\n        };\n        const conn = this.webSocketFactory.create(url, headersToMap$1(headers), websocketCallbacks);\n        conn.connect();\n        // Wait for the websocket to open before sending requests.\n        await onopenPromise;\n        const model = tModel(this.apiClient, params.model);\n        const setup = { model };\n        const clientMessage = { setup };\n        conn.send(JSON.stringify(clientMessage));\n        return new LiveMusicSession(conn, this.apiClient);\n    }\n}\n/**\n   Represents a connection to the API.\n\n   @experimental\n  */\nclass LiveMusicSession {\n    constructor(conn, apiClient) {\n        this.conn = conn;\n        this.apiClient = apiClient;\n    }\n    /**\n      Sets inputs to steer music generation. Updates the session's current\n      weighted prompts.\n  \n      @param params - Contains one property, `weightedPrompts`.\n  \n        - `weightedPrompts` to send to the model; weights are normalized to\n          sum to 1.0.\n  \n      @experimental\n     */\n    async setWeightedPrompts(params) {\n        if (!params.weightedPrompts ||\n            Object.keys(params.weightedPrompts).length === 0) {\n            throw new Error('Weighted prompts must be set and contain at least one entry.');\n        }\n        const clientContent = liveMusicSetWeightedPromptsParametersToMldev(params);\n        this.conn.send(JSON.stringify({ clientContent }));\n    }\n    /**\n      Sets a configuration to the model. Updates the session's current\n      music generation config.\n  \n      @param params - Contains one property, `musicGenerationConfig`.\n  \n        - `musicGenerationConfig` to set in the model. Passing an empty or\n      undefined config to the model will reset the config to defaults.\n  \n      @experimental\n     */\n    async setMusicGenerationConfig(params) {\n        if (!params.musicGenerationConfig) {\n            params.musicGenerationConfig = {};\n        }\n        const setConfigParameters = liveMusicSetConfigParametersToMldev(params);\n        this.conn.send(JSON.stringify(setConfigParameters));\n    }\n    sendPlaybackControl(playbackControl) {\n        const clientMessage = { playbackControl };\n        this.conn.send(JSON.stringify(clientMessage));\n    }\n    /**\n     * Start the music stream.\n     *\n     * @experimental\n     */\n    play() {\n        this.sendPlaybackControl(LiveMusicPlaybackControl.PLAY);\n    }\n    /**\n     * Temporarily halt the music stream. Use `play` to resume from the current\n     * position.\n     *\n     * @experimental\n     */\n    pause() {\n        this.sendPlaybackControl(LiveMusicPlaybackControl.PAUSE);\n    }\n    /**\n     * Stop the music stream and reset the state. Retains the current prompts\n     * and config.\n     *\n     * @experimental\n     */\n    stop() {\n        this.sendPlaybackControl(LiveMusicPlaybackControl.STOP);\n    }\n    /**\n     * Resets the context of the music generation without stopping it.\n     * Retains the current prompts and config.\n     *\n     * @experimental\n     */\n    resetContext() {\n        this.sendPlaybackControl(LiveMusicPlaybackControl.RESET_CONTEXT);\n    }\n    /**\n       Terminates the WebSocket connection.\n  \n       @experimental\n     */\n    close() {\n        this.conn.close();\n    }\n}\n// Converts an headers object to a \"map\" object as expected by the WebSocket\n// constructor. We use this as the Auth interface works with Headers objects\n// while the WebSocket constructor takes a map.\nfunction headersToMap$1(headers) {\n    const headerMap = {};\n    headers.forEach((value, key) => {\n        headerMap[key] = value;\n    });\n    return headerMap;\n}\n// Converts a \"map\" object to a headers object. We use this as the Auth\n// interface works with Headers objects while the API client default headers\n// returns a map.\nfunction mapToHeaders$1(map) {\n    const headers = new Headers();\n    for (const [key, value] of Object.entries(map)) {\n        headers.append(key, value);\n    }\n    return headers;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst FUNCTION_RESPONSE_REQUIRES_ID = 'FunctionResponse request must have an `id` field from the response of a ToolCall.FunctionalCalls in Google AI.';\n/**\n * Handles incoming messages from the WebSocket.\n *\n * @remarks\n * This function is responsible for parsing incoming messages, transforming them\n * into LiveServerMessages, and then calling the onmessage callback. Note that\n * the first message which is received from the server is a setupComplete\n * message.\n *\n * @param apiClient The ApiClient instance.\n * @param onmessage The user-provided onmessage callback (if any).\n * @param event The MessageEvent from the WebSocket.\n */\nasync function handleWebSocketMessage(apiClient, onmessage, event) {\n    const serverMessage = new LiveServerMessage();\n    let jsonData;\n    if (event.data instanceof Blob) {\n        jsonData = await event.data.text();\n    }\n    else if (event.data instanceof ArrayBuffer) {\n        jsonData = new TextDecoder().decode(event.data);\n    }\n    else {\n        jsonData = event.data;\n    }\n    const data = JSON.parse(jsonData);\n    if (apiClient.isVertexAI()) {\n        const resp = liveServerMessageFromVertex(data);\n        Object.assign(serverMessage, resp);\n    }\n    else {\n        const resp = data;\n        Object.assign(serverMessage, resp);\n    }\n    onmessage(serverMessage);\n}\n/**\n   Live class encapsulates the configuration for live interaction with the\n   Generative Language API. It embeds ApiClient for general API settings.\n\n   @experimental\n  */\nclass Live {\n    constructor(apiClient, auth, webSocketFactory) {\n        this.apiClient = apiClient;\n        this.auth = auth;\n        this.webSocketFactory = webSocketFactory;\n        this.music = new LiveMusic(this.apiClient, this.auth, this.webSocketFactory);\n    }\n    /**\n       Establishes a connection to the specified model with the given\n       configuration and returns a Session object representing that connection.\n  \n       @experimental Built-in MCP support is an experimental feature, may change in\n       future versions.\n  \n       @remarks\n  \n       @param params - The parameters for establishing a connection to the model.\n       @return A live session.\n  \n       @example\n       ```ts\n       let model: string;\n       if (GOOGLE_GENAI_USE_VERTEXAI) {\n         model = 'gemini-2.0-flash-live-preview-04-09';\n       } else {\n         model = 'gemini-live-2.5-flash-preview';\n       }\n       const session = await ai.live.connect({\n         model: model,\n         config: {\n           responseModalities: [Modality.AUDIO],\n         },\n         callbacks: {\n           onopen: () => {\n             console.log('Connected to the socket.');\n           },\n           onmessage: (e: MessageEvent) => {\n             console.log('Received message from the server: %s\\n', debug(e.data));\n           },\n           onerror: (e: ErrorEvent) => {\n             console.log('Error occurred: %s\\n', debug(e.error));\n           },\n           onclose: (e: CloseEvent) => {\n             console.log('Connection closed.');\n           },\n         },\n       });\n       ```\n      */\n    async connect(params) {\n        var _a, _b, _c, _d, _e, _f;\n        // TODO: b/404946746 - Support per request HTTP options.\n        if (params.config && params.config.httpOptions) {\n            throw new Error('The Live module does not support httpOptions at request-level in' +\n                ' LiveConnectConfig yet. Please use the client-level httpOptions' +\n                ' configuration instead.');\n        }\n        const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();\n        const apiVersion = this.apiClient.getApiVersion();\n        let url;\n        const clientHeaders = this.apiClient.getHeaders();\n        if (params.config &&\n            params.config.tools &&\n            hasMcpToolUsage(params.config.tools)) {\n            setMcpUsageHeader(clientHeaders);\n        }\n        const headers = mapToHeaders(clientHeaders);\n        if (this.apiClient.isVertexAI()) {\n            url = `${websocketBaseUrl}/ws/google.cloud.aiplatform.${apiVersion}.LlmBidiService/BidiGenerateContent`;\n            await this.auth.addAuthHeaders(headers);\n        }\n        else {\n            const apiKey = this.apiClient.getApiKey();\n            let method = 'BidiGenerateContent';\n            let keyName = 'key';\n            if (apiKey === null || apiKey === void 0 ? void 0 : apiKey.startsWith('auth_tokens/')) {\n                console.warn('Warning: Ephemeral token support is experimental and may change in future versions.');\n                if (apiVersion !== 'v1alpha') {\n                    console.warn(\"Warning: The SDK's ephemeral token support is in v1alpha only. Please use const ai = new GoogleGenAI({apiKey: token.name, httpOptions: { apiVersion: 'v1alpha' }}); before session connection.\");\n                }\n                method = 'BidiGenerateContentConstrained';\n                keyName = 'access_token';\n            }\n            url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${apiVersion}.GenerativeService.${method}?${keyName}=${apiKey}`;\n        }\n        let onopenResolve = () => { };\n        const onopenPromise = new Promise((resolve) => {\n            onopenResolve = resolve;\n        });\n        const callbacks = params.callbacks;\n        const onopenAwaitedCallback = function () {\n            var _a;\n            (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onopen) === null || _a === void 0 ? void 0 : _a.call(callbacks);\n            onopenResolve({});\n        };\n        const apiClient = this.apiClient;\n        const websocketCallbacks = {\n            onopen: onopenAwaitedCallback,\n            onmessage: (event) => {\n                void handleWebSocketMessage(apiClient, callbacks.onmessage, event);\n            },\n            onerror: (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onerror) !== null && _a !== void 0 ? _a : function (e) {\n            },\n            onclose: (_b = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onclose) !== null && _b !== void 0 ? _b : function (e) {\n            },\n        };\n        const conn = this.webSocketFactory.create(url, headersToMap(headers), websocketCallbacks);\n        conn.connect();\n        // Wait for the websocket to open before sending requests.\n        await onopenPromise;\n        let transformedModel = tModel(this.apiClient, params.model);\n        if (this.apiClient.isVertexAI() &&\n            transformedModel.startsWith('publishers/')) {\n            const project = this.apiClient.getProject();\n            const location = this.apiClient.getLocation();\n            transformedModel =\n                `projects/${project}/locations/${location}/` + transformedModel;\n        }\n        let clientMessage = {};\n        if (this.apiClient.isVertexAI() &&\n            ((_c = params.config) === null || _c === void 0 ? void 0 : _c.responseModalities) === undefined) {\n            // Set default to AUDIO to align with MLDev API.\n            if (params.config === undefined) {\n                params.config = { responseModalities: [Modality.AUDIO] };\n            }\n            else {\n                params.config.responseModalities = [Modality.AUDIO];\n            }\n        }\n        if ((_d = params.config) === null || _d === void 0 ? void 0 : _d.generationConfig) {\n            // Raise deprecation warning for generationConfig.\n            console.warn('Setting `LiveConnectConfig.generation_config` is deprecated, please set the fields on `LiveConnectConfig` directly. This will become an error in a future version (not before Q3 2025).');\n        }\n        const inputTools = (_f = (_e = params.config) === null || _e === void 0 ? void 0 : _e.tools) !== null && _f !== void 0 ? _f : [];\n        const convertedTools = [];\n        for (const tool of inputTools) {\n            if (this.isCallableTool(tool)) {\n                const callableTool = tool;\n                convertedTools.push(await callableTool.tool());\n            }\n            else {\n                convertedTools.push(tool);\n            }\n        }\n        if (convertedTools.length > 0) {\n            params.config.tools = convertedTools;\n        }\n        const liveConnectParameters = {\n            model: transformedModel,\n            config: params.config,\n            callbacks: params.callbacks,\n        };\n        if (this.apiClient.isVertexAI()) {\n            clientMessage = liveConnectParametersToVertex(this.apiClient, liveConnectParameters);\n        }\n        else {\n            clientMessage = liveConnectParametersToMldev(this.apiClient, liveConnectParameters);\n        }\n        delete clientMessage['config'];\n        conn.send(JSON.stringify(clientMessage));\n        return new Session(conn, this.apiClient);\n    }\n    // TODO: b/416041229 - Abstract this method to a common place.\n    isCallableTool(tool) {\n        return 'callTool' in tool && typeof tool.callTool === 'function';\n    }\n}\nconst defaultLiveSendClientContentParamerters = {\n    turnComplete: true,\n};\n/**\n   Represents a connection to the API.\n\n   @experimental\n  */\nclass Session {\n    constructor(conn, apiClient) {\n        this.conn = conn;\n        this.apiClient = apiClient;\n    }\n    tLiveClientContent(apiClient, params) {\n        if (params.turns !== null && params.turns !== undefined) {\n            let contents = [];\n            try {\n                contents = tContents(params.turns);\n                if (!apiClient.isVertexAI()) {\n                    contents = contents.map((item) => contentToMldev$1(item));\n                }\n            }\n            catch (_a) {\n                throw new Error(`Failed to parse client content \"turns\", type: '${typeof params.turns}'`);\n            }\n            return {\n                clientContent: { turns: contents, turnComplete: params.turnComplete },\n            };\n        }\n        return {\n            clientContent: { turnComplete: params.turnComplete },\n        };\n    }\n    tLiveClienttToolResponse(apiClient, params) {\n        let functionResponses = [];\n        if (params.functionResponses == null) {\n            throw new Error('functionResponses is required.');\n        }\n        if (!Array.isArray(params.functionResponses)) {\n            functionResponses = [params.functionResponses];\n        }\n        else {\n            functionResponses = params.functionResponses;\n        }\n        if (functionResponses.length === 0) {\n            throw new Error('functionResponses is required.');\n        }\n        for (const functionResponse of functionResponses) {\n            if (typeof functionResponse !== 'object' ||\n                functionResponse === null ||\n                !('name' in functionResponse) ||\n                !('response' in functionResponse)) {\n                throw new Error(`Could not parse function response, type '${typeof functionResponse}'.`);\n            }\n            if (!apiClient.isVertexAI() && !('id' in functionResponse)) {\n                throw new Error(FUNCTION_RESPONSE_REQUIRES_ID);\n            }\n        }\n        const clientMessage = {\n            toolResponse: { functionResponses: functionResponses },\n        };\n        return clientMessage;\n    }\n    /**\n      Send a message over the established connection.\n  \n      @param params - Contains two **optional** properties, `turns` and\n          `turnComplete`.\n  \n        - `turns` will be converted to a `Content[]`\n        - `turnComplete: true` [default] indicates that you are done sending\n          content and expect a response. If `turnComplete: false`, the server\n          will wait for additional messages before starting generation.\n  \n      @experimental\n  \n      @remarks\n      There are two ways to send messages to the live API:\n      `sendClientContent` and `sendRealtimeInput`.\n  \n      `sendClientContent` messages are added to the model context **in order**.\n      Having a conversation using `sendClientContent` messages is roughly\n      equivalent to using the `Chat.sendMessageStream`, except that the state of\n      the `chat` history is stored on the API server instead of locally.\n  \n      Because of `sendClientContent`'s order guarantee, the model cannot respons\n      as quickly to `sendClientContent` messages as to `sendRealtimeInput`\n      messages. This makes the biggest difference when sending objects that have\n      significant preprocessing time (typically images).\n  \n      The `sendClientContent` message sends a `Content[]`\n      which has more options than the `Blob` sent by `sendRealtimeInput`.\n  \n      So the main use-cases for `sendClientContent` over `sendRealtimeInput` are:\n  \n      - Sending anything that can't be represented as a `Blob` (text,\n      `sendClientContent({turns=\"Hello?\"}`)).\n      - Managing turns when not using audio input and voice activity detection.\n        (`sendClientContent({turnComplete:true})` or the short form\n      `sendClientContent()`)\n      - Prefilling a conversation context\n        ```\n        sendClientContent({\n            turns: [\n              Content({role:user, parts:...}),\n              Content({role:user, parts:...}),\n              ...\n            ]\n        })\n        ```\n      @experimental\n     */\n    sendClientContent(params) {\n        params = Object.assign(Object.assign({}, defaultLiveSendClientContentParamerters), params);\n        const clientMessage = this.tLiveClientContent(this.apiClient, params);\n        this.conn.send(JSON.stringify(clientMessage));\n    }\n    /**\n      Send a realtime message over the established connection.\n  \n      @param params - Contains one property, `media`.\n  \n        - `media` will be converted to a `Blob`\n  \n      @experimental\n  \n      @remarks\n      Use `sendRealtimeInput` for realtime audio chunks and video frames (images).\n  \n      With `sendRealtimeInput` the api will respond to audio automatically\n      based on voice activity detection (VAD).\n  \n      `sendRealtimeInput` is optimized for responsivness at the expense of\n      deterministic ordering guarantees. Audio and video tokens are to the\n      context when they become available.\n  \n      Note: The Call signature expects a `Blob` object, but only a subset\n      of audio and image mimetypes are allowed.\n     */\n    sendRealtimeInput(params) {\n        let clientMessage = {};\n        if (this.apiClient.isVertexAI()) {\n            clientMessage = {\n                'realtimeInput': liveSendRealtimeInputParametersToVertex(params),\n            };\n        }\n        else {\n            clientMessage = {\n                'realtimeInput': liveSendRealtimeInputParametersToMldev(params),\n            };\n        }\n        this.conn.send(JSON.stringify(clientMessage));\n    }\n    /**\n      Send a function response message over the established connection.\n  \n      @param params - Contains property `functionResponses`.\n  \n        - `functionResponses` will be converted to a `functionResponses[]`\n  \n      @remarks\n      Use `sendFunctionResponse` to reply to `LiveServerToolCall` from the server.\n  \n      Use {@link types.LiveConnectConfig#tools} to configure the callable functions.\n  \n      @experimental\n     */\n    sendToolResponse(params) {\n        if (params.functionResponses == null) {\n            throw new Error('Tool response parameters are required.');\n        }\n        const clientMessage = this.tLiveClienttToolResponse(this.apiClient, params);\n        this.conn.send(JSON.stringify(clientMessage));\n    }\n    /**\n       Terminates the WebSocket connection.\n  \n       @experimental\n  \n       @example\n       ```ts\n       let model: string;\n       if (GOOGLE_GENAI_USE_VERTEXAI) {\n         model = 'gemini-2.0-flash-live-preview-04-09';\n       } else {\n         model = 'gemini-live-2.5-flash-preview';\n       }\n       const session = await ai.live.connect({\n         model: model,\n         config: {\n           responseModalities: [Modality.AUDIO],\n         }\n       });\n  \n       session.close();\n       ```\n     */\n    close() {\n        this.conn.close();\n    }\n}\n// Converts an headers object to a \"map\" object as expected by the WebSocket\n// constructor. We use this as the Auth interface works with Headers objects\n// while the WebSocket constructor takes a map.\nfunction headersToMap(headers) {\n    const headerMap = {};\n    headers.forEach((value, key) => {\n        headerMap[key] = value;\n    });\n    return headerMap;\n}\n// Converts a \"map\" object to a headers object. We use this as the Auth\n// interface works with Headers objects while the API client default headers\n// returns a map.\nfunction mapToHeaders(map) {\n    const headers = new Headers();\n    for (const [key, value] of Object.entries(map)) {\n        headers.append(key, value);\n    }\n    return headers;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst DEFAULT_MAX_REMOTE_CALLS = 10;\n/** Returns whether automatic function calling is disabled. */\nfunction shouldDisableAfc(config) {\n    var _a, _b, _c;\n    if ((_a = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _a === void 0 ? void 0 : _a.disable) {\n        return true;\n    }\n    let callableToolsPresent = false;\n    for (const tool of (_b = config === null || config === void 0 ? void 0 : config.tools) !== null && _b !== void 0 ? _b : []) {\n        if (isCallableTool(tool)) {\n            callableToolsPresent = true;\n            break;\n        }\n    }\n    if (!callableToolsPresent) {\n        return true;\n    }\n    const maxCalls = (_c = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _c === void 0 ? void 0 : _c.maximumRemoteCalls;\n    if ((maxCalls && (maxCalls < 0 || !Number.isInteger(maxCalls))) ||\n        maxCalls == 0) {\n        console.warn('Invalid maximumRemoteCalls value provided for automatic function calling. Disabled automatic function calling. Please provide a valid integer value greater than 0. maximumRemoteCalls provided:', maxCalls);\n        return true;\n    }\n    return false;\n}\nfunction isCallableTool(tool) {\n    return 'callTool' in tool && typeof tool.callTool === 'function';\n}\n// Checks whether the list of tools contains any CallableTools. Will return true\n// if there is at least one CallableTool.\nfunction hasCallableTools(params) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) === null || _b === void 0 ? void 0 : _b.some((tool) => isCallableTool(tool))) !== null && _c !== void 0 ? _c : false;\n}\n// Checks whether the list of tools contains any non-callable tools. Will return\n// true if there is at least one non-Callable tool.\nfunction hasNonCallableTools(params) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) === null || _b === void 0 ? void 0 : _b.some((tool) => !isCallableTool(tool))) !== null && _c !== void 0 ? _c : false;\n}\n/**\n * Returns whether to append automatic function calling history to the\n * response.\n */\nfunction shouldAppendAfcHistory(config) {\n    var _a;\n    return !((_a = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _a === void 0 ? void 0 : _a.ignoreCallHistory);\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Models extends BaseModule {\n    constructor(apiClient) {\n        super();\n        this.apiClient = apiClient;\n        /**\n         * Makes an API request to generate content with a given model.\n         *\n         * For the `model` parameter, supported formats for Vertex AI API include:\n         * - The Gemini model ID, for example: 'gemini-2.0-flash'\n         * - The full resource name starts with 'projects/', for example:\n         *  'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.0-flash'\n         * - The partial resource name with 'publishers/', for example:\n         *  'publishers/google/models/gemini-2.0-flash' or\n         *  'publishers/meta/models/llama-3.1-405b-instruct-maas'\n         * - `/` separated publisher and model name, for example:\n         * 'google/gemini-2.0-flash' or 'meta/llama-3.1-405b-instruct-maas'\n         *\n         * For the `model` parameter, supported formats for Gemini API include:\n         * - The Gemini model ID, for example: 'gemini-2.0-flash'\n         * - The model name starts with 'models/', for example:\n         *  'models/gemini-2.0-flash'\n         * - For tuned models, the model name starts with 'tunedModels/',\n         * for example:\n         * 'tunedModels/1234567890123456789'\n         *\n         * Some models support multimodal input and output.\n         *\n         * @param params - The parameters for generating content.\n         * @return The response from generating content.\n         *\n         * @example\n         * ```ts\n         * const response = await ai.models.generateContent({\n         *   model: 'gemini-2.0-flash',\n         *   contents: 'why is the sky blue?',\n         *   config: {\n         *     candidateCount: 2,\n         *   }\n         * });\n         * console.log(response);\n         * ```\n         */\n        this.generateContent = async (params) => {\n            var _a, _b, _c, _d, _e;\n            const transformedParams = await this.processParamsMaybeAddMcpUsage(params);\n            this.maybeMoveToResponseJsonSchem(params);\n            if (!hasCallableTools(params) || shouldDisableAfc(params.config)) {\n                return await this.generateContentInternal(transformedParams);\n            }\n            if (hasNonCallableTools(params)) {\n                throw new Error('Automatic function calling with CallableTools and Tools is not yet supported.');\n            }\n            let response;\n            let functionResponseContent;\n            const automaticFunctionCallingHistory = tContents(transformedParams.contents);\n            const maxRemoteCalls = (_c = (_b = (_a = transformedParams.config) === null || _a === void 0 ? void 0 : _a.automaticFunctionCalling) === null || _b === void 0 ? void 0 : _b.maximumRemoteCalls) !== null && _c !== void 0 ? _c : DEFAULT_MAX_REMOTE_CALLS;\n            let remoteCalls = 0;\n            while (remoteCalls < maxRemoteCalls) {\n                response = await this.generateContentInternal(transformedParams);\n                if (!response.functionCalls || response.functionCalls.length === 0) {\n                    break;\n                }\n                const responseContent = response.candidates[0].content;\n                const functionResponseParts = [];\n                for (const tool of (_e = (_d = params.config) === null || _d === void 0 ? void 0 : _d.tools) !== null && _e !== void 0 ? _e : []) {\n                    if (isCallableTool(tool)) {\n                        const callableTool = tool;\n                        const parts = await callableTool.callTool(response.functionCalls);\n                        functionResponseParts.push(...parts);\n                    }\n                }\n                remoteCalls++;\n                functionResponseContent = {\n                    role: 'user',\n                    parts: functionResponseParts,\n                };\n                transformedParams.contents = tContents(transformedParams.contents);\n                transformedParams.contents.push(responseContent);\n                transformedParams.contents.push(functionResponseContent);\n                if (shouldAppendAfcHistory(transformedParams.config)) {\n                    automaticFunctionCallingHistory.push(responseContent);\n                    automaticFunctionCallingHistory.push(functionResponseContent);\n                }\n            }\n            if (shouldAppendAfcHistory(transformedParams.config)) {\n                response.automaticFunctionCallingHistory =\n                    automaticFunctionCallingHistory;\n            }\n            return response;\n        };\n        /**\n         * Makes an API request to generate content with a given model and yields the\n         * response in chunks.\n         *\n         * For the `model` parameter, supported formats for Vertex AI API include:\n         * - The Gemini model ID, for example: 'gemini-2.0-flash'\n         * - The full resource name starts with 'projects/', for example:\n         *  'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.0-flash'\n         * - The partial resource name with 'publishers/', for example:\n         *  'publishers/google/models/gemini-2.0-flash' or\n         *  'publishers/meta/models/llama-3.1-405b-instruct-maas'\n         * - `/` separated publisher and model name, for example:\n         * 'google/gemini-2.0-flash' or 'meta/llama-3.1-405b-instruct-maas'\n         *\n         * For the `model` parameter, supported formats for Gemini API include:\n         * - The Gemini model ID, for example: 'gemini-2.0-flash'\n         * - The model name starts with 'models/', for example:\n         *  'models/gemini-2.0-flash'\n         * - For tuned models, the model name starts with 'tunedModels/',\n         * for example:\n         *  'tunedModels/1234567890123456789'\n         *\n         * Some models support multimodal input and output.\n         *\n         * @param params - The parameters for generating content with streaming response.\n         * @return The response from generating content.\n         *\n         * @example\n         * ```ts\n         * const response = await ai.models.generateContentStream({\n         *   model: 'gemini-2.0-flash',\n         *   contents: 'why is the sky blue?',\n         *   config: {\n         *     maxOutputTokens: 200,\n         *   }\n         * });\n         * for await (const chunk of response) {\n         *   console.log(chunk);\n         * }\n         * ```\n         */\n        this.generateContentStream = async (params) => {\n            this.maybeMoveToResponseJsonSchem(params);\n            if (shouldDisableAfc(params.config)) {\n                const transformedParams = await this.processParamsMaybeAddMcpUsage(params);\n                return await this.generateContentStreamInternal(transformedParams);\n            }\n            else {\n                return await this.processAfcStream(params);\n            }\n        };\n        /**\n         * Generates an image based on a text description and configuration.\n         *\n         * @param params - The parameters for generating images.\n         * @return The response from the API.\n         *\n         * @example\n         * ```ts\n         * const response = await client.models.generateImages({\n         *  model: 'imagen-3.0-generate-002',\n         *  prompt: 'Robot holding a red skateboard',\n         *  config: {\n         *    numberOfImages: 1,\n         *    includeRaiReason: true,\n         *  },\n         * });\n         * console.log(response?.generatedImages?.[0]?.image?.imageBytes);\n         * ```\n         */\n        this.generateImages = async (params) => {\n            return await this.generateImagesInternal(params).then((apiResponse) => {\n                var _a;\n                let positivePromptSafetyAttributes;\n                const generatedImages = [];\n                if (apiResponse === null || apiResponse === void 0 ? void 0 : apiResponse.generatedImages) {\n                    for (const generatedImage of apiResponse.generatedImages) {\n                        if (generatedImage &&\n                            (generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes) &&\n                            ((_a = generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes) === null || _a === void 0 ? void 0 : _a.contentType) === 'Positive Prompt') {\n                            positivePromptSafetyAttributes = generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes;\n                        }\n                        else {\n                            generatedImages.push(generatedImage);\n                        }\n                    }\n                }\n                let response;\n                if (positivePromptSafetyAttributes) {\n                    response = {\n                        generatedImages: generatedImages,\n                        positivePromptSafetyAttributes: positivePromptSafetyAttributes,\n                        sdkHttpResponse: apiResponse.sdkHttpResponse,\n                    };\n                }\n                else {\n                    response = {\n                        generatedImages: generatedImages,\n                        sdkHttpResponse: apiResponse.sdkHttpResponse,\n                    };\n                }\n                return response;\n            });\n        };\n        this.list = async (params) => {\n            var _a;\n            const defaultConfig = {\n                queryBase: true,\n            };\n            const actualConfig = Object.assign(Object.assign({}, defaultConfig), params === null || params === void 0 ? void 0 : params.config);\n            const actualParams = {\n                config: actualConfig,\n            };\n            if (this.apiClient.isVertexAI()) {\n                if (!actualParams.config.queryBase) {\n                    if ((_a = actualParams.config) === null || _a === void 0 ? void 0 : _a.filter) {\n                        throw new Error('Filtering tuned models list for Vertex AI is not currently supported');\n                    }\n                    else {\n                        actualParams.config.filter = 'labels.tune-type:*';\n                    }\n                }\n            }\n            return new Pager(PagedItem.PAGED_ITEM_MODELS, (x) => this.listInternal(x), await this.listInternal(actualParams), actualParams);\n        };\n        /**\n         * Edits an image based on a prompt, list of reference images, and configuration.\n         *\n         * @param params - The parameters for editing an image.\n         * @return The response from the API.\n         *\n         * @example\n         * ```ts\n         * const response = await client.models.editImage({\n         *  model: 'imagen-3.0-capability-001',\n         *  prompt: 'Generate an image containing a mug with the product logo [1] visible on the side of the mug.',\n         *  referenceImages: [subjectReferenceImage]\n         *  config: {\n         *    numberOfImages: 1,\n         *    includeRaiReason: true,\n         *  },\n         * });\n         * console.log(response?.generatedImages?.[0]?.image?.imageBytes);\n         * ```\n         */\n        this.editImage = async (params) => {\n            const paramsInternal = {\n                model: params.model,\n                prompt: params.prompt,\n                referenceImages: [],\n                config: params.config,\n            };\n            if (params.referenceImages) {\n                if (params.referenceImages) {\n                    paramsInternal.referenceImages = params.referenceImages.map((img) => img.toReferenceImageAPI());\n                }\n            }\n            return await this.editImageInternal(paramsInternal);\n        };\n        /**\n         * Upscales an image based on an image, upscale factor, and configuration.\n         * Only supported in Vertex AI currently.\n         *\n         * @param params - The parameters for upscaling an image.\n         * @return The response from the API.\n         *\n         * @example\n         * ```ts\n         * const response = await client.models.upscaleImage({\n         *  model: 'imagen-3.0-generate-002',\n         *  image: image,\n         *  upscaleFactor: 'x2',\n         *  config: {\n         *    includeRaiReason: true,\n         *  },\n         * });\n         * console.log(response?.generatedImages?.[0]?.image?.imageBytes);\n         * ```\n         */\n        this.upscaleImage = async (params) => {\n            let apiConfig = {\n                numberOfImages: 1,\n                mode: 'upscale',\n            };\n            if (params.config) {\n                apiConfig = Object.assign(Object.assign({}, apiConfig), params.config);\n            }\n            const apiParams = {\n                model: params.model,\n                image: params.image,\n                upscaleFactor: params.upscaleFactor,\n                config: apiConfig,\n            };\n            return await this.upscaleImageInternal(apiParams);\n        };\n        /**\n         *  Generates videos based on a text description and configuration.\n         *\n         * @param params - The parameters for generating videos.\n         * @return A Promise<GenerateVideosOperation> which allows you to track the progress and eventually retrieve the generated videos using the operations.get method.\n         *\n         * @example\n         * ```ts\n         * const operation = await ai.models.generateVideos({\n         *  model: 'veo-2.0-generate-001',\n         *  source: {\n         *    prompt: 'A neon hologram of a cat driving at top speed',\n         *  },\n         *  config: {\n         *    numberOfVideos: 1\n         * });\n         *\n         * while (!operation.done) {\n         *   await new Promise(resolve => setTimeout(resolve, 10000));\n         *   operation = await ai.operations.getVideosOperation({operation: operation});\n         * }\n         *\n         * console.log(operation.response?.generatedVideos?.[0]?.video?.uri);\n         * ```\n         */\n        this.generateVideos = async (params) => {\n            var _a, _b, _c, _d, _e, _f;\n            if ((params.prompt || params.image || params.video) && params.source) {\n                throw new Error('Source and prompt/image/video are mutually exclusive. Please only use source.');\n            }\n            // Gemini API does not support video bytes.\n            if (!this.apiClient.isVertexAI()) {\n                if (((_a = params.video) === null || _a === void 0 ? void 0 : _a.uri) && ((_b = params.video) === null || _b === void 0 ? void 0 : _b.videoBytes)) {\n                    params.video = {\n                        uri: params.video.uri,\n                        mimeType: params.video.mimeType,\n                    };\n                }\n                else if (((_d = (_c = params.source) === null || _c === void 0 ? void 0 : _c.video) === null || _d === void 0 ? void 0 : _d.uri) &&\n                    ((_f = (_e = params.source) === null || _e === void 0 ? void 0 : _e.video) === null || _f === void 0 ? void 0 : _f.videoBytes)) {\n                    params.source.video = {\n                        uri: params.source.video.uri,\n                        mimeType: params.source.video.mimeType,\n                    };\n                }\n            }\n            return await this.generateVideosInternal(params);\n        };\n    }\n    /**\n     * This logic is needed for GenerateContentConfig only.\n     * Previously we made GenerateContentConfig.responseSchema field to accept\n     * unknown. Since v1.9.0, we switch to use backend JSON schema support.\n     * To maintain backward compatibility, we move the data that was treated as\n     * JSON schema from the responseSchema field to the responseJsonSchema field.\n     */\n    maybeMoveToResponseJsonSchem(params) {\n        if (params.config && params.config.responseSchema) {\n            if (!params.config.responseJsonSchema) {\n                if (Object.keys(params.config.responseSchema).includes('$schema')) {\n                    params.config.responseJsonSchema = params.config.responseSchema;\n                    delete params.config.responseSchema;\n                }\n            }\n        }\n        return;\n    }\n    /**\n     * Transforms the CallableTools in the parameters to be simply Tools, it\n     * copies the params into a new object and replaces the tools, it does not\n     * modify the original params. Also sets the MCP usage header if there are\n     * MCP tools in the parameters.\n     */\n    async processParamsMaybeAddMcpUsage(params) {\n        var _a, _b, _c;\n        const tools = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools;\n        if (!tools) {\n            return params;\n        }\n        const transformedTools = await Promise.all(tools.map(async (tool) => {\n            if (isCallableTool(tool)) {\n                const callableTool = tool;\n                return await callableTool.tool();\n            }\n            return tool;\n        }));\n        const newParams = {\n            model: params.model,\n            contents: params.contents,\n            config: Object.assign(Object.assign({}, params.config), { tools: transformedTools }),\n        };\n        newParams.config.tools = transformedTools;\n        if (params.config &&\n            params.config.tools &&\n            hasMcpToolUsage(params.config.tools)) {\n            const headers = (_c = (_b = params.config.httpOptions) === null || _b === void 0 ? void 0 : _b.headers) !== null && _c !== void 0 ? _c : {};\n            let newHeaders = Object.assign({}, headers);\n            if (Object.keys(newHeaders).length === 0) {\n                newHeaders = this.apiClient.getDefaultHeaders();\n            }\n            setMcpUsageHeader(newHeaders);\n            newParams.config.httpOptions = Object.assign(Object.assign({}, params.config.httpOptions), { headers: newHeaders });\n        }\n        return newParams;\n    }\n    async initAfcToolsMap(params) {\n        var _a, _b, _c;\n        const afcTools = new Map();\n        for (const tool of (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) !== null && _b !== void 0 ? _b : []) {\n            if (isCallableTool(tool)) {\n                const callableTool = tool;\n                const toolDeclaration = await callableTool.tool();\n                for (const declaration of (_c = toolDeclaration.functionDeclarations) !== null && _c !== void 0 ? _c : []) {\n                    if (!declaration.name) {\n                        throw new Error('Function declaration name is required.');\n                    }\n                    if (afcTools.has(declaration.name)) {\n                        throw new Error(`Duplicate tool declaration name: ${declaration.name}`);\n                    }\n                    afcTools.set(declaration.name, callableTool);\n                }\n            }\n        }\n        return afcTools;\n    }\n    async processAfcStream(params) {\n        var _a, _b, _c;\n        const maxRemoteCalls = (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.automaticFunctionCalling) === null || _b === void 0 ? void 0 : _b.maximumRemoteCalls) !== null && _c !== void 0 ? _c : DEFAULT_MAX_REMOTE_CALLS;\n        let wereFunctionsCalled = false;\n        let remoteCallCount = 0;\n        const afcToolsMap = await this.initAfcToolsMap(params);\n        return (function (models, afcTools, params) {\n            var _a, _b;\n            return __asyncGenerator(this, arguments, function* () {\n                var _c, e_1, _d, _e;\n                while (remoteCallCount < maxRemoteCalls) {\n                    if (wereFunctionsCalled) {\n                        remoteCallCount++;\n                        wereFunctionsCalled = false;\n                    }\n                    const transformedParams = yield __await(models.processParamsMaybeAddMcpUsage(params));\n                    const response = yield __await(models.generateContentStreamInternal(transformedParams));\n                    const functionResponses = [];\n                    const responseContents = [];\n                    try {\n                        for (var _f = true, response_1 = (e_1 = void 0, __asyncValues(response)), response_1_1; response_1_1 = yield __await(response_1.next()), _c = response_1_1.done, !_c; _f = true) {\n                            _e = response_1_1.value;\n                            _f = false;\n                            const chunk = _e;\n                            yield yield __await(chunk);\n                            if (chunk.candidates && ((_a = chunk.candidates[0]) === null || _a === void 0 ? void 0 : _a.content)) {\n                                responseContents.push(chunk.candidates[0].content);\n                                for (const part of (_b = chunk.candidates[0].content.parts) !== null && _b !== void 0 ? _b : []) {\n                                    if (remoteCallCount < maxRemoteCalls && part.functionCall) {\n                                        if (!part.functionCall.name) {\n                                            throw new Error('Function call name was not returned by the model.');\n                                        }\n                                        if (!afcTools.has(part.functionCall.name)) {\n                                            throw new Error(`Automatic function calling was requested, but not all the tools the model used implement the CallableTool interface. Available tools: ${afcTools.keys()}, mising tool: ${part.functionCall.name}`);\n                                        }\n                                        else {\n                                            const responseParts = yield __await(afcTools\n                                                .get(part.functionCall.name)\n                                                .callTool([part.functionCall]));\n                                            functionResponses.push(...responseParts);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (!_f && !_c && (_d = response_1.return)) yield __await(_d.call(response_1));\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    if (functionResponses.length > 0) {\n                        wereFunctionsCalled = true;\n                        const typedResponseChunk = new GenerateContentResponse();\n                        typedResponseChunk.candidates = [\n                            {\n                                content: {\n                                    role: 'user',\n                                    parts: functionResponses,\n                                },\n                            },\n                        ];\n                        yield yield __await(typedResponseChunk);\n                        const newContents = [];\n                        newContents.push(...responseContents);\n                        newContents.push({\n                            role: 'user',\n                            parts: functionResponses,\n                        });\n                        const updatedContents = tContents(params.contents).concat(newContents);\n                        params.contents = updatedContents;\n                    }\n                    else {\n                        break;\n                    }\n                }\n            });\n        })(this, afcToolsMap, params);\n    }\n    async generateContentInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = generateContentParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:generateContent', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = generateContentResponseFromVertex(apiResponse);\n                const typedResp = new GenerateContentResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = generateContentParametersToMldev(this.apiClient, params);\n            path = formatMap('{model}:generateContent', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = generateContentResponseFromMldev(apiResponse);\n                const typedResp = new GenerateContentResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    async generateContentStreamInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = generateContentParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:streamGenerateContent?alt=sse', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            const apiClient = this.apiClient;\n            response = apiClient.requestStream({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            });\n            return response.then(function (apiResponse) {\n                return __asyncGenerator(this, arguments, function* () {\n                    var _a, e_2, _b, _c;\n                    try {\n                        for (var _d = true, apiResponse_1 = __asyncValues(apiResponse), apiResponse_1_1; apiResponse_1_1 = yield __await(apiResponse_1.next()), _a = apiResponse_1_1.done, !_a; _d = true) {\n                            _c = apiResponse_1_1.value;\n                            _d = false;\n                            const chunk = _c;\n                            const resp = generateContentResponseFromVertex((yield __await(chunk.json())));\n                            resp['sdkHttpResponse'] = {\n                                headers: chunk.headers,\n                            };\n                            const typedResp = new GenerateContentResponse();\n                            Object.assign(typedResp, resp);\n                            yield yield __await(typedResp);\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (!_d && !_a && (_b = apiResponse_1.return)) yield __await(_b.call(apiResponse_1));\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                });\n            });\n        }\n        else {\n            const body = generateContentParametersToMldev(this.apiClient, params);\n            path = formatMap('{model}:streamGenerateContent?alt=sse', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            const apiClient = this.apiClient;\n            response = apiClient.requestStream({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            });\n            return response.then(function (apiResponse) {\n                return __asyncGenerator(this, arguments, function* () {\n                    var _a, e_3, _b, _c;\n                    try {\n                        for (var _d = true, apiResponse_2 = __asyncValues(apiResponse), apiResponse_2_1; apiResponse_2_1 = yield __await(apiResponse_2.next()), _a = apiResponse_2_1.done, !_a; _d = true) {\n                            _c = apiResponse_2_1.value;\n                            _d = false;\n                            const chunk = _c;\n                            const resp = generateContentResponseFromMldev((yield __await(chunk.json())));\n                            resp['sdkHttpResponse'] = {\n                                headers: chunk.headers,\n                            };\n                            const typedResp = new GenerateContentResponse();\n                            Object.assign(typedResp, resp);\n                            yield yield __await(typedResp);\n                        }\n                    }\n                    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                    finally {\n                        try {\n                            if (!_d && !_a && (_b = apiResponse_2.return)) yield __await(_b.call(apiResponse_2));\n                        }\n                        finally { if (e_3) throw e_3.error; }\n                    }\n                });\n            });\n        }\n    }\n    /**\n     * Calculates embeddings for the given contents. Only text is supported.\n     *\n     * @param params - The parameters for embedding contents.\n     * @return The response from the API.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.embedContent({\n     *  model: 'text-embedding-004',\n     *  contents: [\n     *    'What is your name?',\n     *    'What is your favorite color?',\n     *  ],\n     *  config: {\n     *    outputDimensionality: 64,\n     *  },\n     * });\n     * console.log(response);\n     * ```\n     */\n    async embedContent(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = embedContentParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:predict', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = embedContentResponseFromVertex(apiResponse);\n                const typedResp = new EmbedContentResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = embedContentParametersToMldev(this.apiClient, params);\n            path = formatMap('{model}:batchEmbedContents', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = embedContentResponseFromMldev(apiResponse);\n                const typedResp = new EmbedContentResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Private method for generating images.\n     */\n    async generateImagesInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = generateImagesParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:predict', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = generateImagesResponseFromVertex(apiResponse);\n                const typedResp = new GenerateImagesResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = generateImagesParametersToMldev(this.apiClient, params);\n            path = formatMap('{model}:predict', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = generateImagesResponseFromMldev(apiResponse);\n                const typedResp = new GenerateImagesResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Private method for editing an image.\n     */\n    async editImageInternal(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = editImageParametersInternalToVertex(this.apiClient, params);\n            path = formatMap('{model}:predict', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = editImageResponseFromVertex(apiResponse);\n                const typedResp = new EditImageResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            throw new Error('This method is only supported by the Vertex AI.');\n        }\n    }\n    /**\n     * Private method for upscaling an image.\n     */\n    async upscaleImageInternal(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = upscaleImageAPIParametersInternalToVertex(this.apiClient, params);\n            path = formatMap('{model}:predict', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = upscaleImageResponseFromVertex(apiResponse);\n                const typedResp = new UpscaleImageResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            throw new Error('This method is only supported by the Vertex AI.');\n        }\n    }\n    /**\n     * Recontextualizes an image.\n     *\n     * There are two types of recontextualization currently supported:\n     * 1) Imagen Product Recontext - Generate images of products in new scenes\n     *    and contexts.\n     * 2) Virtual Try-On: Generate images of persons modeling fashion products.\n     *\n     * @param params - The parameters for recontextualizing an image.\n     * @return The response from the API.\n     *\n     * @example\n     * ```ts\n     * const response1 = await ai.models.recontextImage({\n     *  model: 'imagen-product-recontext-preview-06-30',\n     *  source: {\n     *    prompt: 'In a modern kitchen setting.',\n     *    productImages: [productImage],\n     *  },\n     *  config: {\n     *    numberOfImages: 1,\n     *  },\n     * });\n     * console.log(response1?.generatedImages?.[0]?.image?.imageBytes);\n     *\n     * const response2 = await ai.models.recontextImage({\n     *  model: 'virtual-try-on-preview-08-04',\n     *  source: {\n     *    personImage: personImage,\n     *    productImages: [productImage],\n     *  },\n     *  config: {\n     *    numberOfImages: 1,\n     *  },\n     * });\n     * console.log(response2?.generatedImages?.[0]?.image?.imageBytes);\n     * ```\n     */\n    async recontextImage(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = recontextImageParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:predict', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = recontextImageResponseFromVertex(apiResponse);\n                const typedResp = new RecontextImageResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            throw new Error('This method is only supported by the Vertex AI.');\n        }\n    }\n    /**\n     * Segments an image, creating a mask of a specified area.\n     *\n     * @param params - The parameters for segmenting an image.\n     * @return The response from the API.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.segmentImage({\n     *  model: 'image-segmentation-001',\n     *  source: {\n     *    image: image,\n     *  },\n     *  config: {\n     *    mode: 'foreground',\n     *  },\n     * });\n     * console.log(response?.generatedMasks?.[0]?.mask?.imageBytes);\n     * ```\n     */\n    async segmentImage(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = segmentImageParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:predict', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = segmentImageResponseFromVertex(apiResponse);\n                const typedResp = new SegmentImageResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            throw new Error('This method is only supported by the Vertex AI.');\n        }\n    }\n    /**\n     * Fetches information about a model by name.\n     *\n     * @example\n     * ```ts\n     * const modelInfo = await ai.models.get({model: 'gemini-2.0-flash'});\n     * ```\n     */\n    async get(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = getModelParametersToVertex(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = modelFromVertex(apiResponse);\n                return resp;\n            });\n        }\n        else {\n            const body = getModelParametersToMldev(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = modelFromMldev(apiResponse);\n                return resp;\n            });\n        }\n    }\n    async listInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = listModelsParametersToVertex(this.apiClient, params);\n            path = formatMap('{models_url}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listModelsResponseFromVertex(apiResponse);\n                const typedResp = new ListModelsResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = listModelsParametersToMldev(this.apiClient, params);\n            path = formatMap('{models_url}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listModelsResponseFromMldev(apiResponse);\n                const typedResp = new ListModelsResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Updates a tuned model by its name.\n     *\n     * @param params - The parameters for updating the model.\n     * @return The response from the API.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.update({\n     *   model: 'tuned-model-name',\n     *   config: {\n     *     displayName: 'New display name',\n     *     description: 'New description',\n     *   },\n     * });\n     * ```\n     */\n    async update(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = updateModelParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'PATCH',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = modelFromVertex(apiResponse);\n                return resp;\n            });\n        }\n        else {\n            const body = updateModelParametersToMldev(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'PATCH',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = modelFromMldev(apiResponse);\n                return resp;\n            });\n        }\n    }\n    /**\n     * Deletes a tuned model by its name.\n     *\n     * @param params - The parameters for deleting the model.\n     * @return The response from the API.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.delete({model: 'tuned-model-name'});\n     * ```\n     */\n    async delete(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = deleteModelParametersToVertex(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'DELETE',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = deleteModelResponseFromVertex(apiResponse);\n                const typedResp = new DeleteModelResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = deleteModelParametersToMldev(this.apiClient, params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'DELETE',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = deleteModelResponseFromMldev(apiResponse);\n                const typedResp = new DeleteModelResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Counts the number of tokens in the given contents. Multimodal input is\n     * supported for Gemini models.\n     *\n     * @param params - The parameters for counting tokens.\n     * @return The response from the API.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.countTokens({\n     *  model: 'gemini-2.0-flash',\n     *  contents: 'The quick brown fox jumps over the lazy dog.'\n     * });\n     * console.log(response);\n     * ```\n     */\n    async countTokens(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = countTokensParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:countTokens', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = countTokensResponseFromVertex(apiResponse);\n                const typedResp = new CountTokensResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = countTokensParametersToMldev(this.apiClient, params);\n            path = formatMap('{model}:countTokens', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = countTokensResponseFromMldev(apiResponse);\n                const typedResp = new CountTokensResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Given a list of contents, returns a corresponding TokensInfo containing\n     * the list of tokens and list of token ids.\n     *\n     * This method is not supported by the Gemini Developer API.\n     *\n     * @param params - The parameters for computing tokens.\n     * @return The response from the API.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.computeTokens({\n     *  model: 'gemini-2.0-flash',\n     *  contents: 'What is your name?'\n     * });\n     * console.log(response);\n     * ```\n     */\n    async computeTokens(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = computeTokensParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:computeTokens', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = computeTokensResponseFromVertex(apiResponse);\n                const typedResp = new ComputeTokensResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            throw new Error('This method is only supported by the Vertex AI.');\n        }\n    }\n    /**\n     * Private method for generating videos.\n     */\n    async generateVideosInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = generateVideosParametersToVertex(this.apiClient, params);\n            path = formatMap('{model}:predictLongRunning', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = generateVideosOperationFromVertex(apiResponse);\n                const typedResp = new GenerateVideosOperation();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = generateVideosParametersToMldev(this.apiClient, params);\n            path = formatMap('{model}:predictLongRunning', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((apiResponse) => {\n                const resp = generateVideosOperationFromMldev(apiResponse);\n                const typedResp = new GenerateVideosOperation();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Operations extends BaseModule {\n    constructor(apiClient) {\n        super();\n        this.apiClient = apiClient;\n    }\n    /**\n     * Gets the status of a long-running operation.\n     *\n     * @param parameters The parameters for the get operation request.\n     * @return The updated Operation object, with the latest status or result.\n     */\n    async getVideosOperation(parameters) {\n        const operation = parameters.operation;\n        const config = parameters.config;\n        if (operation.name === undefined || operation.name === '') {\n            throw new Error('Operation name is required.');\n        }\n        if (this.apiClient.isVertexAI()) {\n            const resourceName = operation.name.split('/operations/')[0];\n            let httpOptions = undefined;\n            if (config && 'httpOptions' in config) {\n                httpOptions = config.httpOptions;\n            }\n            const rawOperation = await this.fetchPredictVideosOperationInternal({\n                operationName: operation.name,\n                resourceName: resourceName,\n                config: { httpOptions: httpOptions },\n            });\n            return operation._fromAPIResponse({\n                apiResponse: rawOperation,\n                isVertexAI: true,\n            });\n        }\n        else {\n            const rawOperation = await this.getVideosOperationInternal({\n                operationName: operation.name,\n                config: config,\n            });\n            return operation._fromAPIResponse({\n                apiResponse: rawOperation,\n                isVertexAI: false,\n            });\n        }\n    }\n    /**\n     * Gets the status of a long-running operation.\n     *\n     * @param parameters The parameters for the get operation request.\n     * @return The updated Operation object, with the latest status or result.\n     */\n    async get(parameters) {\n        const operation = parameters.operation;\n        const config = parameters.config;\n        if (operation.name === undefined || operation.name === '') {\n            throw new Error('Operation name is required.');\n        }\n        if (this.apiClient.isVertexAI()) {\n            const resourceName = operation.name.split('/operations/')[0];\n            let httpOptions = undefined;\n            if (config && 'httpOptions' in config) {\n                httpOptions = config.httpOptions;\n            }\n            const rawOperation = await this.fetchPredictVideosOperationInternal({\n                operationName: operation.name,\n                resourceName: resourceName,\n                config: { httpOptions: httpOptions },\n            });\n            return operation._fromAPIResponse({\n                apiResponse: rawOperation,\n                isVertexAI: true,\n            });\n        }\n        else {\n            const rawOperation = await this.getVideosOperationInternal({\n                operationName: operation.name,\n                config: config,\n            });\n            return operation._fromAPIResponse({\n                apiResponse: rawOperation,\n                isVertexAI: false,\n            });\n        }\n    }\n    async getVideosOperationInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = getOperationParametersToVertex(params);\n            path = formatMap('{operationName}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response;\n        }\n        else {\n            const body = getOperationParametersToMldev(params);\n            path = formatMap('{operationName}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response;\n        }\n    }\n    async fetchPredictVideosOperationInternal(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = fetchPredictOperationParametersToVertex(params);\n            path = formatMap('{resourceName}:fetchPredictOperation', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response;\n        }\n        else {\n            throw new Error('This method is only supported by the Vertex AI.');\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction blobToMldev(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromData = getValueByPath(fromObject, ['data']);\n    if (fromData != null) {\n        setValueByPath(toObject, ['data'], fromData);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction contentToMldev(fromObject) {\n    const toObject = {};\n    const fromParts = getValueByPath(fromObject, ['parts']);\n    if (fromParts != null) {\n        let transformedList = fromParts;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return partToMldev(item);\n            });\n        }\n        setValueByPath(toObject, ['parts'], transformedList);\n    }\n    const fromRole = getValueByPath(fromObject, ['role']);\n    if (fromRole != null) {\n        setValueByPath(toObject, ['role'], fromRole);\n    }\n    return toObject;\n}\nfunction createAuthTokenConfigToMldev(apiClient, fromObject, parentObject) {\n    const toObject = {};\n    const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n    if (parentObject !== undefined && fromExpireTime != null) {\n        setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n    }\n    const fromNewSessionExpireTime = getValueByPath(fromObject, [\n        'newSessionExpireTime',\n    ]);\n    if (parentObject !== undefined && fromNewSessionExpireTime != null) {\n        setValueByPath(parentObject, ['newSessionExpireTime'], fromNewSessionExpireTime);\n    }\n    const fromUses = getValueByPath(fromObject, ['uses']);\n    if (parentObject !== undefined && fromUses != null) {\n        setValueByPath(parentObject, ['uses'], fromUses);\n    }\n    const fromLiveConnectConstraints = getValueByPath(fromObject, [\n        'liveConnectConstraints',\n    ]);\n    if (parentObject !== undefined && fromLiveConnectConstraints != null) {\n        setValueByPath(parentObject, ['bidiGenerateContentSetup'], liveConnectConstraintsToMldev(apiClient, fromLiveConnectConstraints));\n    }\n    const fromLockAdditionalFields = getValueByPath(fromObject, [\n        'lockAdditionalFields',\n    ]);\n    if (parentObject !== undefined && fromLockAdditionalFields != null) {\n        setValueByPath(parentObject, ['fieldMask'], fromLockAdditionalFields);\n    }\n    return toObject;\n}\nfunction createAuthTokenParametersToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        setValueByPath(toObject, ['config'], createAuthTokenConfigToMldev(apiClient, fromConfig, toObject));\n    }\n    return toObject;\n}\nfunction fileDataToMldev(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['displayName']) !== undefined) {\n        throw new Error('displayName parameter is not supported in Gemini API.');\n    }\n    const fromFileUri = getValueByPath(fromObject, ['fileUri']);\n    if (fromFileUri != null) {\n        setValueByPath(toObject, ['fileUri'], fromFileUri);\n    }\n    const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n    if (fromMimeType != null) {\n        setValueByPath(toObject, ['mimeType'], fromMimeType);\n    }\n    return toObject;\n}\nfunction googleMapsToMldev(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['authConfig']) !== undefined) {\n        throw new Error('authConfig parameter is not supported in Gemini API.');\n    }\n    const fromEnableWidget = getValueByPath(fromObject, ['enableWidget']);\n    if (fromEnableWidget != null) {\n        setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n    }\n    return toObject;\n}\nfunction googleSearchToMldev(fromObject) {\n    const toObject = {};\n    const fromTimeRangeFilter = getValueByPath(fromObject, [\n        'timeRangeFilter',\n    ]);\n    if (fromTimeRangeFilter != null) {\n        setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n    }\n    if (getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n        throw new Error('excludeDomains parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction liveConnectConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromGenerationConfig = getValueByPath(fromObject, [\n        'generationConfig',\n    ]);\n    if (parentObject !== undefined && fromGenerationConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig'], fromGenerationConfig);\n    }\n    const fromResponseModalities = getValueByPath(fromObject, [\n        'responseModalities',\n    ]);\n    if (parentObject !== undefined && fromResponseModalities != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'responseModalities'], fromResponseModalities);\n    }\n    const fromTemperature = getValueByPath(fromObject, ['temperature']);\n    if (parentObject !== undefined && fromTemperature != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'temperature'], fromTemperature);\n    }\n    const fromTopP = getValueByPath(fromObject, ['topP']);\n    if (parentObject !== undefined && fromTopP != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'topP'], fromTopP);\n    }\n    const fromTopK = getValueByPath(fromObject, ['topK']);\n    if (parentObject !== undefined && fromTopK != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'topK'], fromTopK);\n    }\n    const fromMaxOutputTokens = getValueByPath(fromObject, [\n        'maxOutputTokens',\n    ]);\n    if (parentObject !== undefined && fromMaxOutputTokens != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'maxOutputTokens'], fromMaxOutputTokens);\n    }\n    const fromMediaResolution = getValueByPath(fromObject, [\n        'mediaResolution',\n    ]);\n    if (parentObject !== undefined && fromMediaResolution != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'mediaResolution'], fromMediaResolution);\n    }\n    const fromSeed = getValueByPath(fromObject, ['seed']);\n    if (parentObject !== undefined && fromSeed != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'seed'], fromSeed);\n    }\n    const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n    if (parentObject !== undefined && fromSpeechConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'speechConfig'], tLiveSpeechConfig(fromSpeechConfig));\n    }\n    const fromThinkingConfig = getValueByPath(fromObject, [\n        'thinkingConfig',\n    ]);\n    if (parentObject !== undefined && fromThinkingConfig != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'thinkingConfig'], fromThinkingConfig);\n    }\n    const fromEnableAffectiveDialog = getValueByPath(fromObject, [\n        'enableAffectiveDialog',\n    ]);\n    if (parentObject !== undefined && fromEnableAffectiveDialog != null) {\n        setValueByPath(parentObject, ['setup', 'generationConfig', 'enableAffectiveDialog'], fromEnableAffectiveDialog);\n    }\n    const fromSystemInstruction = getValueByPath(fromObject, [\n        'systemInstruction',\n    ]);\n    if (parentObject !== undefined && fromSystemInstruction != null) {\n        setValueByPath(parentObject, ['setup', 'systemInstruction'], contentToMldev(tContent(fromSystemInstruction)));\n    }\n    const fromTools = getValueByPath(fromObject, ['tools']);\n    if (parentObject !== undefined && fromTools != null) {\n        let transformedList = tTools(fromTools);\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return toolToMldev(tTool(item));\n            });\n        }\n        setValueByPath(parentObject, ['setup', 'tools'], transformedList);\n    }\n    const fromSessionResumption = getValueByPath(fromObject, [\n        'sessionResumption',\n    ]);\n    if (parentObject !== undefined && fromSessionResumption != null) {\n        setValueByPath(parentObject, ['setup', 'sessionResumption'], sessionResumptionConfigToMldev(fromSessionResumption));\n    }\n    const fromInputAudioTranscription = getValueByPath(fromObject, [\n        'inputAudioTranscription',\n    ]);\n    if (parentObject !== undefined && fromInputAudioTranscription != null) {\n        setValueByPath(parentObject, ['setup', 'inputAudioTranscription'], fromInputAudioTranscription);\n    }\n    const fromOutputAudioTranscription = getValueByPath(fromObject, [\n        'outputAudioTranscription',\n    ]);\n    if (parentObject !== undefined && fromOutputAudioTranscription != null) {\n        setValueByPath(parentObject, ['setup', 'outputAudioTranscription'], fromOutputAudioTranscription);\n    }\n    const fromRealtimeInputConfig = getValueByPath(fromObject, [\n        'realtimeInputConfig',\n    ]);\n    if (parentObject !== undefined && fromRealtimeInputConfig != null) {\n        setValueByPath(parentObject, ['setup', 'realtimeInputConfig'], fromRealtimeInputConfig);\n    }\n    const fromContextWindowCompression = getValueByPath(fromObject, [\n        'contextWindowCompression',\n    ]);\n    if (parentObject !== undefined && fromContextWindowCompression != null) {\n        setValueByPath(parentObject, ['setup', 'contextWindowCompression'], fromContextWindowCompression);\n    }\n    const fromProactivity = getValueByPath(fromObject, ['proactivity']);\n    if (parentObject !== undefined && fromProactivity != null) {\n        setValueByPath(parentObject, ['setup', 'proactivity'], fromProactivity);\n    }\n    return toObject;\n}\nfunction liveConnectConstraintsToMldev(apiClient, fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['model']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['setup', 'model'], tModel(apiClient, fromModel));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        setValueByPath(toObject, ['config'], liveConnectConfigToMldev(fromConfig, toObject));\n    }\n    return toObject;\n}\nfunction partToMldev(fromObject) {\n    const toObject = {};\n    const fromVideoMetadata = getValueByPath(fromObject, [\n        'videoMetadata',\n    ]);\n    if (fromVideoMetadata != null) {\n        setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n    }\n    const fromThought = getValueByPath(fromObject, ['thought']);\n    if (fromThought != null) {\n        setValueByPath(toObject, ['thought'], fromThought);\n    }\n    const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n    if (fromInlineData != null) {\n        setValueByPath(toObject, ['inlineData'], blobToMldev(fromInlineData));\n    }\n    const fromFileData = getValueByPath(fromObject, ['fileData']);\n    if (fromFileData != null) {\n        setValueByPath(toObject, ['fileData'], fileDataToMldev(fromFileData));\n    }\n    const fromThoughtSignature = getValueByPath(fromObject, [\n        'thoughtSignature',\n    ]);\n    if (fromThoughtSignature != null) {\n        setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n    }\n    const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n    if (fromFunctionCall != null) {\n        setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n    }\n    const fromCodeExecutionResult = getValueByPath(fromObject, [\n        'codeExecutionResult',\n    ]);\n    if (fromCodeExecutionResult != null) {\n        setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n    }\n    const fromExecutableCode = getValueByPath(fromObject, [\n        'executableCode',\n    ]);\n    if (fromExecutableCode != null) {\n        setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n    }\n    const fromFunctionResponse = getValueByPath(fromObject, [\n        'functionResponse',\n    ]);\n    if (fromFunctionResponse != null) {\n        setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n    }\n    const fromText = getValueByPath(fromObject, ['text']);\n    if (fromText != null) {\n        setValueByPath(toObject, ['text'], fromText);\n    }\n    return toObject;\n}\nfunction sessionResumptionConfigToMldev(fromObject) {\n    const toObject = {};\n    const fromHandle = getValueByPath(fromObject, ['handle']);\n    if (fromHandle != null) {\n        setValueByPath(toObject, ['handle'], fromHandle);\n    }\n    if (getValueByPath(fromObject, ['transparent']) !== undefined) {\n        throw new Error('transparent parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction toolToMldev(fromObject) {\n    const toObject = {};\n    const fromFunctionDeclarations = getValueByPath(fromObject, [\n        'functionDeclarations',\n    ]);\n    if (fromFunctionDeclarations != null) {\n        let transformedList = fromFunctionDeclarations;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['functionDeclarations'], transformedList);\n    }\n    if (getValueByPath(fromObject, ['retrieval']) !== undefined) {\n        throw new Error('retrieval parameter is not supported in Gemini API.');\n    }\n    const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n    if (fromGoogleSearch != null) {\n        setValueByPath(toObject, ['googleSearch'], googleSearchToMldev(fromGoogleSearch));\n    }\n    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [\n        'googleSearchRetrieval',\n    ]);\n    if (fromGoogleSearchRetrieval != null) {\n        setValueByPath(toObject, ['googleSearchRetrieval'], fromGoogleSearchRetrieval);\n    }\n    if (getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined) {\n        throw new Error('enterpriseWebSearch parameter is not supported in Gemini API.');\n    }\n    const fromGoogleMaps = getValueByPath(fromObject, ['googleMaps']);\n    if (fromGoogleMaps != null) {\n        setValueByPath(toObject, ['googleMaps'], googleMapsToMldev(fromGoogleMaps));\n    }\n    const fromUrlContext = getValueByPath(fromObject, ['urlContext']);\n    if (fromUrlContext != null) {\n        setValueByPath(toObject, ['urlContext'], fromUrlContext);\n    }\n    const fromComputerUse = getValueByPath(fromObject, ['computerUse']);\n    if (fromComputerUse != null) {\n        setValueByPath(toObject, ['computerUse'], fromComputerUse);\n    }\n    const fromCodeExecution = getValueByPath(fromObject, [\n        'codeExecution',\n    ]);\n    if (fromCodeExecution != null) {\n        setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n    }\n    return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Returns a comma-separated list of field masks from a given object.\n *\n * @param setup The object to extract field masks from.\n * @return A comma-separated list of field masks.\n */\nfunction getFieldMasks(setup) {\n    const fields = [];\n    for (const key in setup) {\n        if (Object.prototype.hasOwnProperty.call(setup, key)) {\n            const value = setup[key];\n            // 2nd layer, recursively get field masks see TODO(b/418290100)\n            if (typeof value === 'object' &&\n                value != null &&\n                Object.keys(value).length > 0) {\n                const field = Object.keys(value).map((kk) => `${key}.${kk}`);\n                fields.push(...field);\n            }\n            else {\n                fields.push(key); // 1st layer\n            }\n        }\n    }\n    return fields.join(',');\n}\n/**\n * Converts bidiGenerateContentSetup.\n * @param requestDict - The request dictionary.\n * @param config - The configuration object.\n * @return - The modified request dictionary.\n */\nfunction convertBidiSetupToTokenSetup(requestDict, config) {\n    // Convert bidiGenerateContentSetup from bidiGenerateContentSetup.setup.\n    let setupForMaskGeneration = null;\n    const bidiGenerateContentSetupValue = requestDict['bidiGenerateContentSetup'];\n    if (typeof bidiGenerateContentSetupValue === 'object' &&\n        bidiGenerateContentSetupValue !== null &&\n        'setup' in bidiGenerateContentSetupValue) {\n        // Now we know bidiGenerateContentSetupValue is an object and has a 'setup'\n        // property.\n        const innerSetup = bidiGenerateContentSetupValue\n            .setup;\n        if (typeof innerSetup === 'object' && innerSetup !== null) {\n            // Valid inner setup found.\n            requestDict['bidiGenerateContentSetup'] = innerSetup;\n            setupForMaskGeneration = innerSetup;\n        }\n        else {\n            // `bidiGenerateContentSetupValue.setup` is not a valid object; treat as\n            // if bidiGenerateContentSetup is invalid.\n            delete requestDict['bidiGenerateContentSetup'];\n        }\n    }\n    else if (bidiGenerateContentSetupValue !== undefined) {\n        // `bidiGenerateContentSetup` exists but not in the expected\n        // shape {setup: {...}}; treat as invalid.\n        delete requestDict['bidiGenerateContentSetup'];\n    }\n    const preExistingFieldMask = requestDict['fieldMask'];\n    // Handle mask generation setup.\n    if (setupForMaskGeneration) {\n        const generatedMaskFromBidi = getFieldMasks(setupForMaskGeneration);\n        if (Array.isArray(config === null || config === void 0 ? void 0 : config.lockAdditionalFields) &&\n            (config === null || config === void 0 ? void 0 : config.lockAdditionalFields.length) === 0) {\n            // Case 1: lockAdditionalFields is an empty array. Lock only fields from\n            // bidi setup.\n            if (generatedMaskFromBidi) {\n                // Only assign if mask is not empty\n                requestDict['fieldMask'] = generatedMaskFromBidi;\n            }\n            else {\n                delete requestDict['fieldMask']; // If mask is empty, effectively no\n                // specific fields locked by bidi\n            }\n        }\n        else if ((config === null || config === void 0 ? void 0 : config.lockAdditionalFields) &&\n            config.lockAdditionalFields.length > 0 &&\n            preExistingFieldMask !== null &&\n            Array.isArray(preExistingFieldMask) &&\n            preExistingFieldMask.length > 0) {\n            // Case 2: Lock fields from bidi setup + additional fields\n            // (preExistingFieldMask).\n            const generationConfigFields = [\n                'temperature',\n                'topK',\n                'topP',\n                'maxOutputTokens',\n                'responseModalities',\n                'seed',\n                'speechConfig',\n            ];\n            let mappedFieldsFromPreExisting = [];\n            if (preExistingFieldMask.length > 0) {\n                mappedFieldsFromPreExisting = preExistingFieldMask.map((field) => {\n                    if (generationConfigFields.includes(field)) {\n                        return `generationConfig.${field}`;\n                    }\n                    return field; // Keep original field name if not in\n                    // generationConfigFields\n                });\n            }\n            const finalMaskParts = [];\n            if (generatedMaskFromBidi) {\n                finalMaskParts.push(generatedMaskFromBidi);\n            }\n            if (mappedFieldsFromPreExisting.length > 0) {\n                finalMaskParts.push(...mappedFieldsFromPreExisting);\n            }\n            if (finalMaskParts.length > 0) {\n                requestDict['fieldMask'] = finalMaskParts.join(',');\n            }\n            else {\n                // If no fields from bidi and no valid additional fields from\n                // pre-existing mask.\n                delete requestDict['fieldMask'];\n            }\n        }\n        else {\n            // Case 3: \"Lock all fields\" (meaning, don't send a field_mask, let server\n            // defaults apply or all are mutable). This is hit if:\n            //  - `config.lockAdditionalFields` is undefined.\n            //  - `config.lockAdditionalFields` is non-empty, BUT\n            //  `preExistingFieldMask` is null, not a string, or an empty string.\n            delete requestDict['fieldMask'];\n        }\n    }\n    else {\n        // No valid `bidiGenerateContentSetup` was found or extracted.\n        // \"Lock additional null fields if any\".\n        if (preExistingFieldMask !== null &&\n            Array.isArray(preExistingFieldMask) &&\n            preExistingFieldMask.length > 0) {\n            // If there's a pre-existing field mask, it's a string, and it's not\n            // empty, then we should lock all fields.\n            requestDict['fieldMask'] = preExistingFieldMask.join(',');\n        }\n        else {\n            delete requestDict['fieldMask'];\n        }\n    }\n    return requestDict;\n}\nclass Tokens extends BaseModule {\n    constructor(apiClient) {\n        super();\n        this.apiClient = apiClient;\n    }\n    /**\n     * Creates an ephemeral auth token resource.\n     *\n     * @experimental\n     *\n     * @remarks\n     * Ephemeral auth tokens is only supported in the Gemini Developer API.\n     * It can be used for the session connection to the Live constrained API.\n     * Support in v1alpha only.\n     *\n     * @param params - The parameters for the create request.\n     * @return The created auth token.\n     *\n     * @example\n     * ```ts\n     * const ai = new GoogleGenAI({\n     *     apiKey: token.name,\n     *     httpOptions: { apiVersion: 'v1alpha' }  // Support in v1alpha only.\n     * });\n     *\n     * // Case 1: If LiveEphemeralParameters is unset, unlock LiveConnectConfig\n     * // when using the token in Live API sessions. Each session connection can\n     * // use a different configuration.\n     * const config: CreateAuthTokenConfig = {\n     *     uses: 3,\n     *     expireTime: '2025-05-01T00:00:00Z',\n     * }\n     * const token = await ai.tokens.create(config);\n     *\n     * // Case 2: If LiveEphemeralParameters is set, lock all fields in\n     * // LiveConnectConfig when using the token in Live API sessions. For\n     * // example, changing `outputAudioTranscription` in the Live API\n     * // connection will be ignored by the API.\n     * const config: CreateAuthTokenConfig =\n     *     uses: 3,\n     *     expireTime: '2025-05-01T00:00:00Z',\n     *     LiveEphemeralParameters: {\n     *        model: 'gemini-2.0-flash-001',\n     *        config: {\n     *           'responseModalities': ['AUDIO'],\n     *           'systemInstruction': 'Always answer in English.',\n     *        }\n     *     }\n     * }\n     * const token = await ai.tokens.create(config);\n     *\n     * // Case 3: If LiveEphemeralParameters is set and lockAdditionalFields is\n     * // set, lock LiveConnectConfig with set and additional fields (e.g.\n     * // responseModalities, systemInstruction, temperature in this example) when\n     * // using the token in Live API sessions.\n     * const config: CreateAuthTokenConfig =\n     *     uses: 3,\n     *     expireTime: '2025-05-01T00:00:00Z',\n     *     LiveEphemeralParameters: {\n     *        model: 'gemini-2.0-flash-001',\n     *        config: {\n     *           'responseModalities': ['AUDIO'],\n     *           'systemInstruction': 'Always answer in English.',\n     *        }\n     *     },\n     *     lockAdditionalFields: ['temperature'],\n     * }\n     * const token = await ai.tokens.create(config);\n     *\n     * // Case 4: If LiveEphemeralParameters is set and lockAdditionalFields is\n     * // empty array, lock LiveConnectConfig with set fields (e.g.\n     * // responseModalities, systemInstruction in this example) when using the\n     * // token in Live API sessions.\n     * const config: CreateAuthTokenConfig =\n     *     uses: 3,\n     *     expireTime: '2025-05-01T00:00:00Z',\n     *     LiveEphemeralParameters: {\n     *        model: 'gemini-2.0-flash-001',\n     *        config: {\n     *           'responseModalities': ['AUDIO'],\n     *           'systemInstruction': 'Always answer in English.',\n     *        }\n     *     },\n     *     lockAdditionalFields: [],\n     * }\n     * const token = await ai.tokens.create(config);\n     * ```\n     */\n    async create(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('The client.tokens.create method is only supported by the Gemini Developer API.');\n        }\n        else {\n            const body = createAuthTokenParametersToMldev(this.apiClient, params);\n            path = formatMap('auth_tokens', body['_url']);\n            queryParams = body['_query'];\n            delete body['config'];\n            delete body['_url'];\n            delete body['_query'];\n            const transformedBody = convertBidiSetupToTokenSetup(body, params.config);\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(transformedBody),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json();\n            });\n            return response.then((resp) => {\n                return resp;\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\nfunction cancelTuningJobParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], fromName);\n    }\n    return toObject;\n}\nfunction cancelTuningJobParametersToVertex(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], fromName);\n    }\n    return toObject;\n}\nfunction createTuningJobConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['validationDataset']) !== undefined) {\n        throw new Error('validationDataset parameter is not supported in Gemini API.');\n    }\n    const fromTunedModelDisplayName = getValueByPath(fromObject, [\n        'tunedModelDisplayName',\n    ]);\n    if (parentObject !== undefined && fromTunedModelDisplayName != null) {\n        setValueByPath(parentObject, ['displayName'], fromTunedModelDisplayName);\n    }\n    if (getValueByPath(fromObject, ['description']) !== undefined) {\n        throw new Error('description parameter is not supported in Gemini API.');\n    }\n    const fromEpochCount = getValueByPath(fromObject, ['epochCount']);\n    if (parentObject !== undefined && fromEpochCount != null) {\n        setValueByPath(parentObject, ['tuningTask', 'hyperparameters', 'epochCount'], fromEpochCount);\n    }\n    const fromLearningRateMultiplier = getValueByPath(fromObject, [\n        'learningRateMultiplier',\n    ]);\n    if (fromLearningRateMultiplier != null) {\n        setValueByPath(toObject, ['tuningTask', 'hyperparameters', 'learningRateMultiplier'], fromLearningRateMultiplier);\n    }\n    if (getValueByPath(fromObject, ['exportLastCheckpointOnly']) !==\n        undefined) {\n        throw new Error('exportLastCheckpointOnly parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['preTunedModelCheckpointId']) !==\n        undefined) {\n        throw new Error('preTunedModelCheckpointId parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['adapterSize']) !== undefined) {\n        throw new Error('adapterSize parameter is not supported in Gemini API.');\n    }\n    const fromBatchSize = getValueByPath(fromObject, ['batchSize']);\n    if (parentObject !== undefined && fromBatchSize != null) {\n        setValueByPath(parentObject, ['tuningTask', 'hyperparameters', 'batchSize'], fromBatchSize);\n    }\n    const fromLearningRate = getValueByPath(fromObject, ['learningRate']);\n    if (parentObject !== undefined && fromLearningRate != null) {\n        setValueByPath(parentObject, ['tuningTask', 'hyperparameters', 'learningRate'], fromLearningRate);\n    }\n    if (getValueByPath(fromObject, ['labels']) !== undefined) {\n        throw new Error('labels parameter is not supported in Gemini API.');\n    }\n    return toObject;\n}\nfunction createTuningJobConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromValidationDataset = getValueByPath(fromObject, [\n        'validationDataset',\n    ]);\n    if (parentObject !== undefined && fromValidationDataset != null) {\n        setValueByPath(parentObject, ['supervisedTuningSpec'], tuningValidationDatasetToVertex(fromValidationDataset, toObject));\n    }\n    const fromTunedModelDisplayName = getValueByPath(fromObject, [\n        'tunedModelDisplayName',\n    ]);\n    if (parentObject !== undefined && fromTunedModelDisplayName != null) {\n        setValueByPath(parentObject, ['tunedModelDisplayName'], fromTunedModelDisplayName);\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (parentObject !== undefined && fromDescription != null) {\n        setValueByPath(parentObject, ['description'], fromDescription);\n    }\n    const fromEpochCount = getValueByPath(fromObject, ['epochCount']);\n    if (parentObject !== undefined && fromEpochCount != null) {\n        setValueByPath(parentObject, ['supervisedTuningSpec', 'hyperParameters', 'epochCount'], fromEpochCount);\n    }\n    const fromLearningRateMultiplier = getValueByPath(fromObject, [\n        'learningRateMultiplier',\n    ]);\n    if (parentObject !== undefined && fromLearningRateMultiplier != null) {\n        setValueByPath(parentObject, ['supervisedTuningSpec', 'hyperParameters', 'learningRateMultiplier'], fromLearningRateMultiplier);\n    }\n    const fromExportLastCheckpointOnly = getValueByPath(fromObject, [\n        'exportLastCheckpointOnly',\n    ]);\n    if (parentObject !== undefined && fromExportLastCheckpointOnly != null) {\n        setValueByPath(parentObject, ['supervisedTuningSpec', 'exportLastCheckpointOnly'], fromExportLastCheckpointOnly);\n    }\n    const fromAdapterSize = getValueByPath(fromObject, ['adapterSize']);\n    if (parentObject !== undefined && fromAdapterSize != null) {\n        setValueByPath(parentObject, ['supervisedTuningSpec', 'hyperParameters', 'adapterSize'], fromAdapterSize);\n    }\n    if (getValueByPath(fromObject, ['batchSize']) !== undefined) {\n        throw new Error('batchSize parameter is not supported in Vertex AI.');\n    }\n    if (getValueByPath(fromObject, ['learningRate']) !== undefined) {\n        throw new Error('learningRate parameter is not supported in Vertex AI.');\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (parentObject !== undefined && fromLabels != null) {\n        setValueByPath(parentObject, ['labels'], fromLabels);\n    }\n    return toObject;\n}\nfunction createTuningJobParametersPrivateToMldev(fromObject) {\n    const toObject = {};\n    const fromBaseModel = getValueByPath(fromObject, ['baseModel']);\n    if (fromBaseModel != null) {\n        setValueByPath(toObject, ['baseModel'], fromBaseModel);\n    }\n    const fromPreTunedModel = getValueByPath(fromObject, [\n        'preTunedModel',\n    ]);\n    if (fromPreTunedModel != null) {\n        setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);\n    }\n    const fromTrainingDataset = getValueByPath(fromObject, [\n        'trainingDataset',\n    ]);\n    if (fromTrainingDataset != null) {\n        setValueByPath(toObject, ['tuningTask', 'trainingData'], tuningDatasetToMldev(fromTrainingDataset));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        createTuningJobConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction createTuningJobParametersPrivateToVertex(fromObject) {\n    const toObject = {};\n    const fromBaseModel = getValueByPath(fromObject, ['baseModel']);\n    if (fromBaseModel != null) {\n        setValueByPath(toObject, ['baseModel'], fromBaseModel);\n    }\n    const fromPreTunedModel = getValueByPath(fromObject, [\n        'preTunedModel',\n    ]);\n    if (fromPreTunedModel != null) {\n        setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);\n    }\n    const fromTrainingDataset = getValueByPath(fromObject, [\n        'trainingDataset',\n    ]);\n    if (fromTrainingDataset != null) {\n        setValueByPath(toObject, ['supervisedTuningSpec', 'trainingDatasetUri'], tuningDatasetToVertex(fromTrainingDataset, toObject));\n    }\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        createTuningJobConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction getTuningJobParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], fromName);\n    }\n    return toObject;\n}\nfunction getTuningJobParametersToVertex(fromObject) {\n    const toObject = {};\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['_url', 'name'], fromName);\n    }\n    return toObject;\n}\nfunction listTuningJobsConfigToMldev(fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    const fromFilter = getValueByPath(fromObject, ['filter']);\n    if (parentObject !== undefined && fromFilter != null) {\n        setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n    }\n    return toObject;\n}\nfunction listTuningJobsConfigToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n    if (parentObject !== undefined && fromPageSize != null) {\n        setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n    }\n    const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n    if (parentObject !== undefined && fromPageToken != null) {\n        setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n    }\n    const fromFilter = getValueByPath(fromObject, ['filter']);\n    if (parentObject !== undefined && fromFilter != null) {\n        setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n    }\n    return toObject;\n}\nfunction listTuningJobsParametersToMldev(fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listTuningJobsConfigToMldev(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listTuningJobsParametersToVertex(fromObject) {\n    const toObject = {};\n    const fromConfig = getValueByPath(fromObject, ['config']);\n    if (fromConfig != null) {\n        listTuningJobsConfigToVertex(fromConfig, toObject);\n    }\n    return toObject;\n}\nfunction listTuningJobsResponseFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromTuningJobs = getValueByPath(fromObject, ['tunedModels']);\n    if (fromTuningJobs != null) {\n        let transformedList = fromTuningJobs;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return tuningJobFromMldev(item);\n            });\n        }\n        setValueByPath(toObject, ['tuningJobs'], transformedList);\n    }\n    return toObject;\n}\nfunction listTuningJobsResponseFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromNextPageToken = getValueByPath(fromObject, [\n        'nextPageToken',\n    ]);\n    if (fromNextPageToken != null) {\n        setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n    }\n    const fromTuningJobs = getValueByPath(fromObject, ['tuningJobs']);\n    if (fromTuningJobs != null) {\n        let transformedList = fromTuningJobs;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return tuningJobFromVertex(item);\n            });\n        }\n        setValueByPath(toObject, ['tuningJobs'], transformedList);\n    }\n    return toObject;\n}\nfunction tunedModelFromMldev(fromObject) {\n    const toObject = {};\n    const fromModel = getValueByPath(fromObject, ['name']);\n    if (fromModel != null) {\n        setValueByPath(toObject, ['model'], fromModel);\n    }\n    const fromEndpoint = getValueByPath(fromObject, ['name']);\n    if (fromEndpoint != null) {\n        setValueByPath(toObject, ['endpoint'], fromEndpoint);\n    }\n    return toObject;\n}\nfunction tuningDatasetToMldev(fromObject) {\n    const toObject = {};\n    if (getValueByPath(fromObject, ['gcsUri']) !== undefined) {\n        throw new Error('gcsUri parameter is not supported in Gemini API.');\n    }\n    if (getValueByPath(fromObject, ['vertexDatasetResource']) !== undefined) {\n        throw new Error('vertexDatasetResource parameter is not supported in Gemini API.');\n    }\n    const fromExamples = getValueByPath(fromObject, ['examples']);\n    if (fromExamples != null) {\n        let transformedList = fromExamples;\n        if (Array.isArray(transformedList)) {\n            transformedList = transformedList.map((item) => {\n                return item;\n            });\n        }\n        setValueByPath(toObject, ['examples', 'examples'], transformedList);\n    }\n    return toObject;\n}\nfunction tuningDatasetToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromGcsUri = getValueByPath(fromObject, ['gcsUri']);\n    if (parentObject !== undefined && fromGcsUri != null) {\n        setValueByPath(parentObject, ['supervisedTuningSpec', 'trainingDatasetUri'], fromGcsUri);\n    }\n    const fromVertexDatasetResource = getValueByPath(fromObject, [\n        'vertexDatasetResource',\n    ]);\n    if (parentObject !== undefined && fromVertexDatasetResource != null) {\n        setValueByPath(parentObject, ['supervisedTuningSpec', 'trainingDatasetUri'], fromVertexDatasetResource);\n    }\n    if (getValueByPath(fromObject, ['examples']) !== undefined) {\n        throw new Error('examples parameter is not supported in Vertex AI.');\n    }\n    return toObject;\n}\nfunction tuningJobFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromState = getValueByPath(fromObject, ['state']);\n    if (fromState != null) {\n        setValueByPath(toObject, ['state'], tTuningJobStatus(fromState));\n    }\n    const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n    if (fromCreateTime != null) {\n        setValueByPath(toObject, ['createTime'], fromCreateTime);\n    }\n    const fromStartTime = getValueByPath(fromObject, [\n        'tuningTask',\n        'startTime',\n    ]);\n    if (fromStartTime != null) {\n        setValueByPath(toObject, ['startTime'], fromStartTime);\n    }\n    const fromEndTime = getValueByPath(fromObject, [\n        'tuningTask',\n        'completeTime',\n    ]);\n    if (fromEndTime != null) {\n        setValueByPath(toObject, ['endTime'], fromEndTime);\n    }\n    const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n    if (fromUpdateTime != null) {\n        setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (fromDescription != null) {\n        setValueByPath(toObject, ['description'], fromDescription);\n    }\n    const fromBaseModel = getValueByPath(fromObject, ['baseModel']);\n    if (fromBaseModel != null) {\n        setValueByPath(toObject, ['baseModel'], fromBaseModel);\n    }\n    const fromTunedModel = getValueByPath(fromObject, ['_self']);\n    if (fromTunedModel != null) {\n        setValueByPath(toObject, ['tunedModel'], tunedModelFromMldev(fromTunedModel));\n    }\n    return toObject;\n}\nfunction tuningJobFromVertex(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromState = getValueByPath(fromObject, ['state']);\n    if (fromState != null) {\n        setValueByPath(toObject, ['state'], tTuningJobStatus(fromState));\n    }\n    const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n    if (fromCreateTime != null) {\n        setValueByPath(toObject, ['createTime'], fromCreateTime);\n    }\n    const fromStartTime = getValueByPath(fromObject, ['startTime']);\n    if (fromStartTime != null) {\n        setValueByPath(toObject, ['startTime'], fromStartTime);\n    }\n    const fromEndTime = getValueByPath(fromObject, ['endTime']);\n    if (fromEndTime != null) {\n        setValueByPath(toObject, ['endTime'], fromEndTime);\n    }\n    const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n    if (fromUpdateTime != null) {\n        setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    const fromDescription = getValueByPath(fromObject, ['description']);\n    if (fromDescription != null) {\n        setValueByPath(toObject, ['description'], fromDescription);\n    }\n    const fromBaseModel = getValueByPath(fromObject, ['baseModel']);\n    if (fromBaseModel != null) {\n        setValueByPath(toObject, ['baseModel'], fromBaseModel);\n    }\n    const fromTunedModel = getValueByPath(fromObject, ['tunedModel']);\n    if (fromTunedModel != null) {\n        setValueByPath(toObject, ['tunedModel'], fromTunedModel);\n    }\n    const fromPreTunedModel = getValueByPath(fromObject, [\n        'preTunedModel',\n    ]);\n    if (fromPreTunedModel != null) {\n        setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);\n    }\n    const fromSupervisedTuningSpec = getValueByPath(fromObject, [\n        'supervisedTuningSpec',\n    ]);\n    if (fromSupervisedTuningSpec != null) {\n        setValueByPath(toObject, ['supervisedTuningSpec'], fromSupervisedTuningSpec);\n    }\n    const fromTuningDataStats = getValueByPath(fromObject, [\n        'tuningDataStats',\n    ]);\n    if (fromTuningDataStats != null) {\n        setValueByPath(toObject, ['tuningDataStats'], fromTuningDataStats);\n    }\n    const fromEncryptionSpec = getValueByPath(fromObject, [\n        'encryptionSpec',\n    ]);\n    if (fromEncryptionSpec != null) {\n        setValueByPath(toObject, ['encryptionSpec'], fromEncryptionSpec);\n    }\n    const fromPartnerModelTuningSpec = getValueByPath(fromObject, [\n        'partnerModelTuningSpec',\n    ]);\n    if (fromPartnerModelTuningSpec != null) {\n        setValueByPath(toObject, ['partnerModelTuningSpec'], fromPartnerModelTuningSpec);\n    }\n    const fromCustomBaseModel = getValueByPath(fromObject, [\n        'customBaseModel',\n    ]);\n    if (fromCustomBaseModel != null) {\n        setValueByPath(toObject, ['customBaseModel'], fromCustomBaseModel);\n    }\n    const fromExperiment = getValueByPath(fromObject, ['experiment']);\n    if (fromExperiment != null) {\n        setValueByPath(toObject, ['experiment'], fromExperiment);\n    }\n    const fromLabels = getValueByPath(fromObject, ['labels']);\n    if (fromLabels != null) {\n        setValueByPath(toObject, ['labels'], fromLabels);\n    }\n    const fromOutputUri = getValueByPath(fromObject, ['outputUri']);\n    if (fromOutputUri != null) {\n        setValueByPath(toObject, ['outputUri'], fromOutputUri);\n    }\n    const fromPipelineJob = getValueByPath(fromObject, ['pipelineJob']);\n    if (fromPipelineJob != null) {\n        setValueByPath(toObject, ['pipelineJob'], fromPipelineJob);\n    }\n    const fromServiceAccount = getValueByPath(fromObject, [\n        'serviceAccount',\n    ]);\n    if (fromServiceAccount != null) {\n        setValueByPath(toObject, ['serviceAccount'], fromServiceAccount);\n    }\n    const fromTunedModelDisplayName = getValueByPath(fromObject, [\n        'tunedModelDisplayName',\n    ]);\n    if (fromTunedModelDisplayName != null) {\n        setValueByPath(toObject, ['tunedModelDisplayName'], fromTunedModelDisplayName);\n    }\n    const fromVeoTuningSpec = getValueByPath(fromObject, [\n        'veoTuningSpec',\n    ]);\n    if (fromVeoTuningSpec != null) {\n        setValueByPath(toObject, ['veoTuningSpec'], fromVeoTuningSpec);\n    }\n    return toObject;\n}\nfunction tuningOperationFromMldev(fromObject) {\n    const toObject = {};\n    const fromSdkHttpResponse = getValueByPath(fromObject, [\n        'sdkHttpResponse',\n    ]);\n    if (fromSdkHttpResponse != null) {\n        setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n    }\n    const fromName = getValueByPath(fromObject, ['name']);\n    if (fromName != null) {\n        setValueByPath(toObject, ['name'], fromName);\n    }\n    const fromMetadata = getValueByPath(fromObject, ['metadata']);\n    if (fromMetadata != null) {\n        setValueByPath(toObject, ['metadata'], fromMetadata);\n    }\n    const fromDone = getValueByPath(fromObject, ['done']);\n    if (fromDone != null) {\n        setValueByPath(toObject, ['done'], fromDone);\n    }\n    const fromError = getValueByPath(fromObject, ['error']);\n    if (fromError != null) {\n        setValueByPath(toObject, ['error'], fromError);\n    }\n    return toObject;\n}\nfunction tuningValidationDatasetToVertex(fromObject, parentObject) {\n    const toObject = {};\n    const fromGcsUri = getValueByPath(fromObject, ['gcsUri']);\n    if (fromGcsUri != null) {\n        setValueByPath(toObject, ['validationDatasetUri'], fromGcsUri);\n    }\n    const fromVertexDatasetResource = getValueByPath(fromObject, [\n        'vertexDatasetResource',\n    ]);\n    if (parentObject !== undefined && fromVertexDatasetResource != null) {\n        setValueByPath(parentObject, ['supervisedTuningSpec', 'trainingDatasetUri'], fromVertexDatasetResource);\n    }\n    return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Tunings extends BaseModule {\n    constructor(apiClient) {\n        super();\n        this.apiClient = apiClient;\n        /**\n         * Gets a TuningJob.\n         *\n         * @param name - The resource name of the tuning job.\n         * @return - A TuningJob object.\n         *\n         * @experimental - The SDK's tuning implementation is experimental, and may\n         * change in future versions.\n         */\n        this.get = async (params) => {\n            return await this.getInternal(params);\n        };\n        /**\n         * Lists tuning jobs.\n         *\n         * @param config - The configuration for the list request.\n         * @return - A list of tuning jobs.\n         *\n         * @experimental - The SDK's tuning implementation is experimental, and may\n         * change in future versions.\n         */\n        this.list = async (params = {}) => {\n            return new Pager(PagedItem.PAGED_ITEM_TUNING_JOBS, (x) => this.listInternal(x), await this.listInternal(params), params);\n        };\n        /**\n         * Creates a supervised fine-tuning job.\n         *\n         * @param params - The parameters for the tuning job.\n         * @return - A TuningJob operation.\n         *\n         * @experimental - The SDK's tuning implementation is experimental, and may\n         * change in future versions.\n         */\n        this.tune = async (params) => {\n            var _a;\n            if (this.apiClient.isVertexAI()) {\n                if (params.baseModel.startsWith('projects/')) {\n                    const preTunedModel = {\n                        tunedModelName: params.baseModel,\n                    };\n                    if ((_a = params.config) === null || _a === void 0 ? void 0 : _a.preTunedModelCheckpointId) {\n                        preTunedModel.checkpointId = params.config.preTunedModelCheckpointId;\n                    }\n                    const paramsPrivate = Object.assign(Object.assign({}, params), { preTunedModel: preTunedModel });\n                    paramsPrivate.baseModel = undefined;\n                    return await this.tuneInternal(paramsPrivate);\n                }\n                else {\n                    const paramsPrivate = Object.assign({}, params);\n                    return await this.tuneInternal(paramsPrivate);\n                }\n            }\n            else {\n                const paramsPrivate = Object.assign({}, params);\n                const operation = await this.tuneMldevInternal(paramsPrivate);\n                let tunedModelName = '';\n                if (operation['metadata'] !== undefined &&\n                    operation['metadata']['tunedModel'] !== undefined) {\n                    tunedModelName = operation['metadata']['tunedModel'];\n                }\n                else if (operation['name'] !== undefined &&\n                    operation['name'].includes('/operations/')) {\n                    tunedModelName = operation['name'].split('/operations/')[0];\n                }\n                const tuningJob = {\n                    name: tunedModelName,\n                    state: JobState.JOB_STATE_QUEUED,\n                };\n                return tuningJob;\n            }\n        };\n    }\n    async getInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = getTuningJobParametersToVertex(params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = tuningJobFromVertex(apiResponse);\n                return resp;\n            });\n        }\n        else {\n            const body = getTuningJobParametersToMldev(params);\n            path = formatMap('{name}', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = tuningJobFromMldev(apiResponse);\n                return resp;\n            });\n        }\n    }\n    async listInternal(params) {\n        var _a, _b, _c, _d;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = listTuningJobsParametersToVertex(params);\n            path = formatMap('tuningJobs', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listTuningJobsResponseFromVertex(apiResponse);\n                const typedResp = new ListTuningJobsResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n        else {\n            const body = listTuningJobsParametersToMldev(params);\n            path = formatMap('tunedModels', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'GET',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = listTuningJobsResponseFromMldev(apiResponse);\n                const typedResp = new ListTuningJobsResponse();\n                Object.assign(typedResp, resp);\n                return typedResp;\n            });\n        }\n    }\n    /**\n     * Cancels a tuning job.\n     *\n     * @param params - The parameters for the cancel request.\n     * @return The empty response returned by the API.\n     *\n     * @example\n     * ```ts\n     * await ai.tunings.cancel({name: '...'}); // The server-generated resource name.\n     * ```\n     */\n    async cancel(params) {\n        var _a, _b, _c, _d;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = cancelTuningJobParametersToVertex(params);\n            path = formatMap('{name}:cancel', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            await this.apiClient.request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            });\n        }\n        else {\n            const body = cancelTuningJobParametersToMldev(params);\n            path = formatMap('{name}:cancel', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            await this.apiClient.request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,\n                abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal,\n            });\n        }\n    }\n    async tuneInternal(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            const body = createTuningJobParametersPrivateToVertex(params);\n            path = formatMap('tuningJobs', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = tuningJobFromVertex(apiResponse);\n                return resp;\n            });\n        }\n        else {\n            throw new Error('This method is only supported by the Vertex AI.');\n        }\n    }\n    async tuneMldevInternal(params) {\n        var _a, _b;\n        let response;\n        let path = '';\n        let queryParams = {};\n        if (this.apiClient.isVertexAI()) {\n            throw new Error('This method is only supported by the Gemini Developer API.');\n        }\n        else {\n            const body = createTuningJobParametersPrivateToMldev(params);\n            path = formatMap('tunedModels', body['_url']);\n            queryParams = body['_query'];\n            delete body['_url'];\n            delete body['_query'];\n            response = this.apiClient\n                .request({\n                path: path,\n                queryParams: queryParams,\n                body: JSON.stringify(body),\n                httpMethod: 'POST',\n                httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,\n                abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal,\n            })\n                .then((httpResponse) => {\n                return httpResponse.json().then((jsonResponse) => {\n                    const response = jsonResponse;\n                    response.sdkHttpResponse = {\n                        headers: httpResponse.headers,\n                    };\n                    return response;\n                });\n            });\n            return response.then((apiResponse) => {\n                const resp = tuningOperationFromMldev(apiResponse);\n                return resp;\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass BrowserDownloader {\n    async download(_params, _apiClient) {\n        throw new Error('Download to file is not supported in the browser, please use a browser compliant download like an <a> tag.');\n    }\n}\n\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 8; // bytes\nconst MAX_RETRY_COUNT = 3;\nconst INITIAL_RETRY_DELAY_MS = 1000;\nconst DELAY_MULTIPLIER = 2;\nconst X_GOOG_UPLOAD_STATUS_HEADER_FIELD = 'x-goog-upload-status';\nasync function uploadBlob(file, uploadUrl, apiClient) {\n    var _a, _b, _c;\n    let fileSize = 0;\n    let offset = 0;\n    let response = new HttpResponse(new Response());\n    let uploadCommand = 'upload';\n    fileSize = file.size;\n    while (offset < fileSize) {\n        const chunkSize = Math.min(MAX_CHUNK_SIZE, fileSize - offset);\n        const chunk = file.slice(offset, offset + chunkSize);\n        if (offset + chunkSize >= fileSize) {\n            uploadCommand += ', finalize';\n        }\n        let retryCount = 0;\n        let currentDelayMs = INITIAL_RETRY_DELAY_MS;\n        while (retryCount < MAX_RETRY_COUNT) {\n            response = await apiClient.request({\n                path: '',\n                body: chunk,\n                httpMethod: 'POST',\n                httpOptions: {\n                    apiVersion: '',\n                    baseUrl: uploadUrl,\n                    headers: {\n                        'X-Goog-Upload-Command': uploadCommand,\n                        'X-Goog-Upload-Offset': String(offset),\n                        'Content-Length': String(chunkSize),\n                    },\n                },\n            });\n            if ((_a = response === null || response === void 0 ? void 0 : response.headers) === null || _a === void 0 ? void 0 : _a[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) {\n                break;\n            }\n            retryCount++;\n            await sleep(currentDelayMs);\n            currentDelayMs = currentDelayMs * DELAY_MULTIPLIER;\n        }\n        offset += chunkSize;\n        // The `x-goog-upload-status` header field can be `active`, `final` and\n        //`cancelled` in resposne.\n        if (((_b = response === null || response === void 0 ? void 0 : response.headers) === null || _b === void 0 ? void 0 : _b[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) !== 'active') {\n            break;\n        }\n        // TODO(b/401391430) Investigate why the upload status is not finalized\n        // even though all content has been uploaded.\n        if (fileSize <= offset) {\n            throw new Error('All content has been uploaded, but the upload status is not finalized.');\n        }\n    }\n    const responseJson = (await (response === null || response === void 0 ? void 0 : response.json()));\n    if (((_c = response === null || response === void 0 ? void 0 : response.headers) === null || _c === void 0 ? void 0 : _c[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) !== 'final') {\n        throw new Error('Failed to upload file: Upload status is not finalized.');\n    }\n    return responseJson['file'];\n}\nasync function getBlobStat(file) {\n    const fileStat = { size: file.size, type: file.type };\n    return fileStat;\n}\nfunction sleep(ms) {\n    return new Promise((resolvePromise) => setTimeout(resolvePromise, ms));\n}\n\nclass BrowserUploader {\n    async upload(file, uploadUrl, apiClient) {\n        if (typeof file === 'string') {\n            throw new Error('File path is not supported in browser uploader.');\n        }\n        return await uploadBlob(file, uploadUrl, apiClient);\n    }\n    async stat(file) {\n        if (typeof file === 'string') {\n            throw new Error('File path is not supported in browser uploader.');\n        }\n        else {\n            return await getBlobStat(file);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass BrowserWebSocketFactory {\n    create(url, headers, callbacks) {\n        return new BrowserWebSocket(url, headers, callbacks);\n    }\n}\nclass BrowserWebSocket {\n    constructor(url, headers, callbacks) {\n        this.url = url;\n        this.headers = headers;\n        this.callbacks = callbacks;\n    }\n    connect() {\n        this.ws = new WebSocket(this.url);\n        this.ws.onopen = this.callbacks.onopen;\n        this.ws.onerror = this.callbacks.onerror;\n        this.ws.onclose = this.callbacks.onclose;\n        this.ws.onmessage = this.callbacks.onmessage;\n    }\n    send(message) {\n        if (this.ws === undefined) {\n            throw new Error('WebSocket is not connected');\n        }\n        this.ws.send(message);\n    }\n    close() {\n        if (this.ws === undefined) {\n            throw new Error('WebSocket is not connected');\n        }\n        this.ws.close();\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst GOOGLE_API_KEY_HEADER = 'x-goog-api-key';\n// TODO(b/395122533): We need a secure client side authentication mechanism.\nclass WebAuth {\n    constructor(apiKey) {\n        this.apiKey = apiKey;\n    }\n    async addAuthHeaders(headers) {\n        if (headers.get(GOOGLE_API_KEY_HEADER) !== null) {\n            return;\n        }\n        if (this.apiKey.startsWith('auth_tokens/')) {\n            throw new Error('Ephemeral tokens are only supported by the live API.');\n        }\n        // Check if API key is empty or null\n        if (!this.apiKey) {\n            throw new Error('API key is missing. Please provide a valid API key.');\n        }\n        headers.append(GOOGLE_API_KEY_HEADER, this.apiKey);\n    }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst LANGUAGE_LABEL_PREFIX = 'gl-node/';\n/**\n * The Google GenAI SDK.\n *\n * @remarks\n * Provides access to the GenAI features through either the {@link\n * https://cloud.google.com/vertex-ai/docs/reference/rest | Gemini API} or\n * the {@link https://cloud.google.com/vertex-ai/docs/reference/rest | Vertex AI\n * API}.\n *\n * The {@link GoogleGenAIOptions.vertexai} value determines which of the API\n * services to use.\n *\n * When using the Gemini API, a {@link GoogleGenAIOptions.apiKey} must also be\n * set. When using Vertex AI, currently only {@link GoogleGenAIOptions.apiKey}\n * is supported via Express mode. {@link GoogleGenAIOptions.project} and {@link\n * GoogleGenAIOptions.location} should not be set.\n *\n * @example\n * Initializing the SDK for using the Gemini API:\n * ```ts\n * import {GoogleGenAI} from '@google/genai';\n * const ai = new GoogleGenAI({apiKey: 'GEMINI_API_KEY'});\n * ```\n *\n * @example\n * Initializing the SDK for using the Vertex AI API:\n * ```ts\n * import {GoogleGenAI} from '@google/genai';\n * const ai = new GoogleGenAI({\n *   vertexai: true,\n *   project: 'PROJECT_ID',\n *   location: 'PROJECT_LOCATION'\n * });\n * ```\n *\n */\nclass GoogleGenAI {\n    constructor(options) {\n        var _a;\n        if (options.apiKey == null) {\n            throw new Error('An API Key must be set when running in a browser');\n        }\n        // Web client only supports API key mode for Vertex AI.\n        if (options.project || options.location) {\n            throw new Error('Vertex AI project based authentication is not supported on browser runtimes. Please do not provide a project or location.');\n        }\n        this.vertexai = (_a = options.vertexai) !== null && _a !== void 0 ? _a : false;\n        this.apiKey = options.apiKey;\n        const baseUrl = getBaseUrl(options.httpOptions, options.vertexai, \n        /*vertexBaseUrlFromEnv*/ undefined, \n        /*geminiBaseUrlFromEnv*/ undefined);\n        if (baseUrl) {\n            if (options.httpOptions) {\n                options.httpOptions.baseUrl = baseUrl;\n            }\n            else {\n                options.httpOptions = { baseUrl: baseUrl };\n            }\n        }\n        this.apiVersion = options.apiVersion;\n        const auth = new WebAuth(this.apiKey);\n        this.apiClient = new ApiClient({\n            auth: auth,\n            apiVersion: this.apiVersion,\n            apiKey: this.apiKey,\n            vertexai: this.vertexai,\n            httpOptions: options.httpOptions,\n            userAgentExtra: LANGUAGE_LABEL_PREFIX + 'web',\n            uploader: new BrowserUploader(),\n            downloader: new BrowserDownloader(),\n        });\n        this.models = new Models(this.apiClient);\n        this.live = new Live(this.apiClient, auth, new BrowserWebSocketFactory());\n        this.batches = new Batches(this.apiClient);\n        this.chats = new Chats(this.models, this.apiClient);\n        this.caches = new Caches(this.apiClient);\n        this.files = new Files(this.apiClient);\n        this.operations = new Operations(this.apiClient);\n        this.authTokens = new Tokens(this.apiClient);\n        this.tunings = new Tunings(this.apiClient);\n    }\n}\n\nexport { ActivityHandling, AdapterSize, ApiError, ApiSpec, AuthType, Batches, Behavior, BlockedReason, Caches, Chat, Chats, ComputeTokensResponse, ContentReferenceImage, ControlReferenceImage, ControlReferenceType, CountTokensResponse, CreateFileResponse, DeleteCachedContentResponse, DeleteFileResponse, DeleteModelResponse, DynamicRetrievalConfigMode, EditImageResponse, EditMode, EmbedContentResponse, EndSensitivity, Environment, FeatureSelectionPreference, FileSource, FileState, Files, FinishReason, FunctionCallingConfigMode, FunctionResponse, FunctionResponseBlob, FunctionResponseFileData, FunctionResponsePart, FunctionResponseScheduling, GenerateContentResponse, GenerateContentResponsePromptFeedback, GenerateContentResponseUsageMetadata, GenerateImagesResponse, GenerateVideosOperation, GenerateVideosResponse, GoogleGenAI, HarmBlockMethod, HarmBlockThreshold, HarmCategory, HarmProbability, HarmSeverity, HttpResponse, ImagePromptLanguage, InlinedEmbedContentResponse, InlinedResponse, JobState, Language, ListBatchJobsResponse, ListCachedContentsResponse, ListFilesResponse, ListModelsResponse, ListTuningJobsResponse, Live, LiveClientToolResponse, LiveMusicPlaybackControl, LiveMusicServerMessage, LiveSendToolResponseParameters, LiveServerMessage, MaskReferenceImage, MaskReferenceMode, MediaModality, MediaResolution, Modality, Mode, Models, MusicGenerationMode, Operations, Outcome, PagedItem, Pager, PersonGeneration, RawReferenceImage, RecontextImageResponse, ReplayResponse, SafetyFilterLevel, Scale, SegmentImageResponse, SegmentMode, Session, SingleEmbedContentResponse, StartSensitivity, StyleReferenceImage, SubjectReferenceImage, SubjectReferenceType, Tokens, TrafficType, TuningMode, TuningTask, TurnCompleteReason, TurnCoverage, Type, UpscaleImageResponse, UrlRetrievalStatus, VideoCompressionQuality, VideoGenerationMaskMode, VideoGenerationReferenceType, createFunctionResponsePartFromBase64, createFunctionResponsePartFromUri, createModelContent, createPartFromBase64, createPartFromCodeExecutionResult, createPartFromExecutableCode, createPartFromFunctionCall, createPartFromFunctionResponse, createPartFromText, createPartFromUri, createUserContent, mcpToTool, setDefaultBaseUrls };\n\n"],
  "mappings": "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",
  "names": ["Outcome", "Language", "FunctionResponseScheduling", "Type", "HarmCategory", "HarmBlockMethod", "HarmBlockThreshold", "Mode", "AuthType", "ApiSpec", "UrlRetrievalStatus", "FinishReason", "HarmProbability", "HarmSeverity", "BlockedReason", "TrafficType", "Modality", "MediaResolution", "JobState", "TuningMode", "AdapterSize", "TuningTask", "FeatureSelectionPreference", "Behavior", "DynamicRetrievalConfigMode", "Environment", "FunctionCallingConfigMode", "SafetyFilterLevel", "PersonGeneration", "ImagePromptLanguage", "MaskReferenceMode", "ControlReferenceType", "SubjectReferenceType", "EditMode", "SegmentMode", "VideoGenerationReferenceType", "VideoGenerationMaskMode", "VideoCompressionQuality", "FileState", "FileSource", "TurnCompleteReason", "MediaModality", "StartSensitivity", "EndSensitivity", "ActivityHandling", "TurnCoverage", "Scale", "MusicGenerationMode", "LiveMusicPlaybackControl", "executableCode", "codeExecutionResult", "resourceName", "PagedItem", "response", "v", "_a", "response", "params", "_b", "_c", "_d", "resourceName"]
}
